---
title: 'Data analysis: Direct shotgun metagenomics captures species abundance of honey
  samples'
output:
  pdf_document: default
  html_notebook: default
---
### Authors: Anastasios Galanis and Solenn Patalano (2020). 

#### Anastasios would like to thank Nikolaos Kalavros for his patience and assistance in learning and dealing with every error during all steps of analysis. 

### Introduction
This notebook was prepared during data analysis of 'Direct shotgun metagenomics captures species abundance of honey samples' and is meant to facilitate reproduction of data analysis and figures. Moreover, detailed description of steps and functions is provided to allow beginners in R to follow the train of thought and analysis is structure. 

Each script is written in such a way that all necessary packages will be installed if not already present. Comments are provided to facilitate communication.

The graphic below shows a summary of the analysis. Briefly, the analysis begins by comparing the performance of tools on the genus level and then moving down to the species level. Species level resolution is important in order to better understand the foraging behaviour of _Apis mellifera_ but also how plant-pollinator interactions can potentially influence fitness and behaviour of eusocial insect societies. The performance of tools is tested using simulated reads generated using FASTQsim resembling the error profile of IonTorrent sequencing (this is the sequencing platform currently available at BSRC Alexander Fleming). The root mean square error (RMSE) is used as a metric to identify the most suitable tool to analyse plant communities. The tools are further evaluated on a simulated shotgun metagenome comprising species of the following categories: 1) previously identified in honey, 2) possible contaminants (e.g. human), 3) not expected to be found in honey (e.g. algae). Again, RMSE is calculated. Considering the performance both on a separate plant community as well as a simulated metagenome (containing the same plant community), we can select the most appropriate tool for downstream analysis.



Before beginning the analysis, please ensure that you have set your working directory in the script below:

```{r setup, message=FALSE}
  knitr::opts_knit$set(root.dir = normalizePath("C:/Users/user/Desktop/data_frames"))
```

Side comment: In order to be able to produce the PDF output of this notebook the following line is added prior to proceeding. It can also be ignored if you are not going to produce the same output; however, might prove useful for future uses.

```{r}
if (!require('tinytex')) tinytex::install_tinytex(); library('tinytex')
```


## 1. Comparing the performance of CCMetagen, DIAMOND, kraken2, and MG-RAST using simulated reads

### 1.1 Generating simulated IonTorrent reads

First, the genomes of the following organisms were downloaded (FASTA) manually from NCBI:


| Bacteria                                                 | Viridiplantae                                | Fungi                           | Other Eukaryota           | Viruses                                         |
|----------------------------------------------------------|----------------------------------------------|---------------------------------|---------------------------|-------------------------------------------------|
| Frischella perrara strain PEB0191                        | Brassica cretica                             | Nosema ceranae strain PA08 1199 | Apis mellifera strain DH4 | Apis mellifera filamentous virus isolate CH-CO5 |
| Gilliamella apicola strain wkB1                          | Chlamydomonas reinhardtii strain CC-503      |                                 | Homo sapiens              |                                                 |
| Lactobacillus kunkeei strain MP2                         | Citrus sinensis cultivar Valencia            |                                 |                           |                                                 |
| Paenibacillus apiarius strain NRRL B-23460 Ga0138518_107 | Malus domestica cultivar Golden Delicious    |                                 |                           |                                                 |
| Snodgrassella alvi wkB2                                  | Medicago truncatula strain A17               |                                 |                           |                                                 |
| Staphylococcus epidermidis ATCC 12228                    | Oxalis drummondii                            |                                 |                           |                                                 |
|                                                          | Papaver somniferum cultivar HN1              |                                 |                           |                                                 |
|                                                          | Petunia x hybrida cultivar Pink Wave         |                                 |                           |                                                 |
|                                                          | Prunus persica cultivar Lovell               |                                 |                           |                                                 |
|                                                          | Pyrus x bretschneideri cultivar Dangshansuli |                                 |                           |                                                 |
|                                                          | Theobroma cacao                              |                                 |                           |                                                 |
|                                                          | Zea mays cultivar B73                        |                                 |                           |                                                 |

FASTQsim was installed on a Google Cloud instance running Ubuntu (Linux). Please note that FASTQsim requires Python 2.7 and depends on numpy, scipy, and matplotlib. To install them:

python -m pip install numpy scipy matplotlib

###### Comment: As I have been advised, it is recommended to also install jupyter in case you are going to work in Python in the future.

##### 1.1.1 Insalling and Running FASTQsim

First, download FASTQsim_v2.0.tgz from SourceForge https://sourceforge.net/projects/fastqsim/files/ . Extract the file and at it to your PATH variable in order to be able to run the FASTQsim's scripts globally (for example, between different folders). Otherwise, you will need to move the files you want to process to the same folder as the scripts, which is not very convenient.

```{r eval=FALSE}
$ tar -xzvf FASTQsim_v2.0.tgz
$ echo 'export PATH="$PATH":/where/you/installed/FASTQsim_v2.0' >> ~/.profile
$ source ~/.profile
```

Then you are ready to run FASTQsim. Please note that even though it is possible to run several files together, on my system this was not possible and therefore each genome was processed separetely. Below is an example of producing IonTorrent reads from a genome.

```{r, eval=FALSE}
$ sh FASTQspike.sh -nobackground -platform ion -source 0.2 <genome.file>.fasta 
  -o <desired.output> -threads 30
```

| Parameter         | Function                                                                                                                   |
|-------------------|----------------------------------------------------------------------------------------------------------------------------|
| nobackground     | Generate simulated reads without spiking a pre-existing FASTQ file.                                                        |
| platform ion     | Specifies the error profile the reads should follow. We are using IonTorrent and therefore specified this as our platform. |
| source NUMBER  | Specify the input file and the desired coverage with <NUMBER>.                                                             |
| o                | Output file.                                                                                                               |
| threads NUMBER | Number of threads to be used. Increase number of threads for faster processing.                                            |

##### 1.1.2 Generating the Mock files

If you have multiple files for processing, it is recommended you follow a pattern in naming the output files. This is not required because the output is fq (FASTQ). Then merge the files together. For example, for plant genomes:

```{r eval=FALSE}
$ cat *.fq > Mock_plants.fastq
```

In the same manner, we constructed the community termed ''Others'' which includes reads from organisms except plants. Then, the files were merged together using a *cat* command as shown above.

The simulated dataset termed **'Mock_Plants'** is shown below

| Species                                         | Number of reads | Relative abundance (%) |
|-------------------------------------------------|-----------------|------------------------|
| Brassica cretica                                | 128164          | 16.37                  |
| Chlamydomonas reinhardtii strain CC-503         | 75570           | 9.65                   |
| Citrus sinensis cultivar Valencia               | 25337           | 3.24                   |
| Malus domestica cultivar Golden Delicious       | 221931          | 28.35                  |
| Medicago truncatula strain A17                  | 53621           | 6.85                   |
| Oxalis drummondii                               | 681             | 0.09                   |
| Papaver somniferum cultivar HN1                 | 44368           | 5.67                   |
| Petunia x hybrida cultivar Pink Wave            | 107             | 0.01                   |
| Prunus persica cultivar Lovell                  | 71436           | 9.13                   |
| Pyrus x bretschneideri cultivar   Dangshansuli  | 32936           | 4.21                   |
| Theobroma cacao                                 | 61463           | 7.85                   |
| Zea mays cultivar B73                           | 67207           | 8.59                   |
| Total                                           | 782821          | 100.00                 |

Only for plants, we also evaluated the performance of the tools at the genus level (Reminder taxonomy: Order>Faminly>Genus>Species). Below is the abundance of each genus as well as the species from the dataset above that correspond to the respective genus. This is the file **Mock_Plants_Genus.csv**

| Genus         | Species belonging to genus                    | Number of reads | True relative abundance (%) |
|---------------|-----------------------------------------------|-----------------|-----------------------------|
| Brassica      | Brassica cretica                              | 128164          | 16.37                       |
| Chlamydomonas | Chlamydomonas reinhardtii strain CC-50        | 75570           | 9.65                        |
| Citrus        | Citrus sinensis cultivar Valencia             | 25337           | 3.24                        |
| Malus         | Malus domestica cultivar Golden Delicious     | 221931          | 28.35                       |
| Medicago      | Medicago truncatula                           | 53621           | 6.85                        |
| Oxalis        | Oxalis drummondii                             | 681             | 0.09                        |
| Papaver       | Papaver somniferum cultivar HN1               | 44368           | 5.67                        |
| Petunia       | Petunia x hybrida cultivar Pink Wave          | 107             | 0.01                        |
| Prunus        | Prunus persica cultivar Lovell                | 71436           | 9.13                        |
| Pyrus         | Pyrus x bretschneideri cultivar Dangshansuli  | 32936           | 4.21                        |
| Theobroma     | Theobroma cacao                               | 61463           | 7.85                        |
| Zea           | Zea mays cultivar B73                         | 67207           | 8.59                        |
| Total         |                                               | 782821          | 100.00                      |

The simulated dataset termed **'Mock_Others'** is shown below

| Species                                                    | Number of reads | Relative abundance (%) |
|------------------------------------------------------------|-----------------|------------------------|
| Apis mellifera filamentous virus isolate   CH-CO5          | 9388            | 1.55                   |
| Apis mellifera strain DH4                                  | 70983           | 11.68                  |
| Frischella perrara strain PEB0191                          | 33876           | 5.58                   |
| Gilliamella apicola strain wkB1                            | 5925            | 0.98                   |
| Homo sapiens                                               | 20664           | 3.40                   |
| Lactobacillus kunkeei strain MP2                           | 101647          | 16.73                  |
| Nosema ceranae strain PA08 1199                            | 18130           | 2.98                   |
| Paenibacillus apiarius strain NRRL   B-23460 Ga0138518_107 | 68734           | 11.31                  |
| Snodgrassella alvi wkB2                                    | 12690           | 2.09                   |
| Staphylococcus epidermidis ATCC   12228                    | 32270           | 5.31                   |
| Varroa destructor                                          | 233302          | 38.40                  |
| Total                                                      | 607609          | 100.00                 |

Finally, the dataset **'Mock_Community'** is shown below

| Species                                                    | Number of reads | Relative abundance (%) |
|------------------------------------------------------------|-----------------|------------------------|
| Apis mellifera filamentous virus isolate   CH-CO5          | 9388            | 0.68                   |
| Apis mellifera strain DH4                                  | 70983           | 5.11                   |
| Brassica cretica                                           | 128164          | 9.22                   |
| Chlamydomonas reinhardtii strain CC-503                    | 75570           | 5.44                   |
| Citrus sinensis cultivar Valencia                          | 25337           | 1.82                   |
| Frischella perrara strain PEB0191                          | 33876           | 2.44                   |
| Gilliamella apicola strain wkB1                            | 5925            | 0.43                   |
| Homo sapiens                                               | 20664           | 1.49                   |
| Lactobacillus kunkeei strain MP2                           | 101647          | 7.31                   |
| Malus domestica cultivar Golden Delicious                  | 221931          | 15.96                  |
| Medicago truncatula strain A17                             | 53621           | 3.86                   |
| Nosema ceranae strain PA08 1199                            | 18130           | 1.30                   |
| Oxalis drummondii                                          | 681             | 0.05                   |
| Paenibacillus apiarius strain NRRL   B-23460 Ga0138518_107 | 68734           | 4.94                   |
| Papaver somniferum cultivar HN1                            | 44368           | 3.19                   |
| Petunia x hybrida cultivar Pink Wave                       | 107             | 0.01                   |
| Prunus persica cultivar Lovell                             | 71436           | 5.14                   |
| Pyrus x bretschneideri cultivar   Dangshansuli             | 32936           | 2.37                   |
| Snodgrassella alvi wkB2                                    | 12690           | 0.91                   |
| Staphylococcus epidermidis ATCC   12228                    | 32270           | 2.32                   |
| Theobroma cacao                                            | 61463           | 4.42                   |
| Varroa destructor                                          | 233302          | 16.78                  |
| Zea mays cultivar B73                                      | 67207           | 4.83                   |
| Total                                                      | 1390430         | 100.00                 |

Create unique headers
```{r eval = FALSE}
$ perl -ne 'if (/^>/){@a=split /_/; $h{$a[0]}++; $a[0].= ".".$h{$a[0]}; $s=join "_", @a; print $s;}else{print $_;}' <mock_community_corrected.fasta >communitycorrectedunique.fasta
```


Remove ambiguous sequences
```{r eval=FALSE}
$ sed '/^[^>]/s/[R|Y|W|S|M|K|H|B|V|D|]//g' others.fasta > otherscorrected.fasta
$ sed 's/[R|Y|W|S|M|K|H|B|V|D]/N/g' input.file > output.file
```

### 1.2 Installing and running the different tools

#### 1.2.1 MG-RAST

MG-RAST is a webserver easily accessible through www.mg-rast.org. An account was set up and re required FASTQ files were uploaded. For plant species, the following options were applied:

| Parameter                                  | Option               |
|--------------------------------------------|----------------------|
| sequence file is assembled                 | no                   |
| remove artificial replicate sequences      | yes                  |
| remove any host specific species sequences | H. sapiens, NCBI v36 |
| remove low quality sequences               | no                   |

For the community file, the following options were applied:

| Parameter                                     | Option               |
|-----------------------------------------------|----------------------|
| sequence file is assembled                    | no                   |
| remove artificial replicate sequences         | no                   |
| remove any host specific species sequences    | H. sapiens, NCBI v36 |
| filter based on sequence length               | no                   |
| Filter based on sequence ambiguity base count | no                   |


#### 1.2.2 DIAMOND

(Martin knows the details, so he can fill it in)


#### 1.2.3 Kraken2

Kraken2 was installed according to the instructions provided here:

https://ccb.jhu.edu/software/kraken2/index.shtml?t=manual#installation 

A requirement for masking low-complexity regions is to have the BLAST+ suite already installed 

```{r eval=FALSE}
$ sudo apt-get install ncbi-blast+
```


Instead of using the standard kraken2 database, we built and indexed an updated version of the NCBI nt database (ADD THE DATE) using the following commands:

```{r eval=FALSE}
$ ./kraken2-build --download-taxonomy --db nucleotide
$ kraken2-build --download-library nt --use-ftp --db nucleotide
$ kraken2-build --build --threads 30 --db nucleotide

```

Note that you may not use the use-ftp flag, however most of the times rsync failed for me so I would recommend going the slower way...

Then for each file following command was run

```{r eval=FALSE}
$ ./kraken2 --db nucleotide file.fastq --threads 30 --report-zero-counts file_results --output file_res.kraken
```

Note that you may also not use the --output flag. Personally, I only used the report-zero-counts flag for doing the benchmarking.

#### 1.2.3 Minimap2

(Martin could give some input)


#### 1.2.4 CCMetagen

CCMetagen was installed according to the instructions here https://github.com/vrmarcelino/CCMetagen. For CCMetagen, the pre-indexed KMA nt databse was used due to problems in self-indexing a newer version. KMA was run using the standard parameters using the following command:

```{r eval=FALSE}
$ kma -i file.fastq -o file_out_kma -t_db compress_ncbi -t 300 -1t1 -mem_mode -and -ef
```


CCMetagen was run using the following command

```{r eval=FALSE}
$ CCMetagen.py -i file_out_kma.res -o file_results --depth_unit rpm --mapstat file_out_kma.mapstat -c 0.01 -st 85.00
```


### 1.3 Abundance calculation and CSV files generation

#### 1.3.1 Abundance calculation

Abundance was calculated using the following equation:


$Abundance\ (\%) = \displaystyle \frac{Reads\ assigned\ to\ species }{Total\ number\ of\ reads\ -\ Number\ of\ unclassified\ or\ no\ hits\ reads}*100$

The same formula was used for all except MG-RAST which reports abundance directly on its website. 

#### 1.3.2 CSV files generation

The CSV files containing the species and their relative abundances were prepared manually in R studio. These are the files in the folder DSM_analysis_tutorial, which should also be your working directory from now on.

```{r eval=FALSE}
setwd("C:/Users/user/Desktop/data_frames")
```

#### 1.3.3 Summary of CSV files

Each CSV file contains the following columns (showing an example of kraken2)

| Software | Species                          | Observed_Abundance | Expected_Abundance | Taxonomic_Domain |
|----------|----------------------------------|--------------------|--------------------|------------------|
| kraken2  | Apis mellifera filamentous virus | 2.49               | 1.55               | Viruses          |
| kraken2  | Apis mellifera                   | 2.69               | 11.68              | Eukarya          |

The taxonomic domain has been added to help visualisation in scatter plots.

The following CSV data files have been created

| Plants                      | Others              | Community              |
|-----------------------------|---------------------|------------------------|
| SOFTWARE_species_plants.csv | SOFTWARE_others.csv | SOFTWARE_community.csv |
| SOFTWARE_genus_plants.csv   |                     |                        |

Due to the fact that MG-RAST did not report plant species and that the others and community simulation ended with more than 99% of reads failing QC the files MGRAST_species_plants.csv, MGRAST_others.csv, and MGRAST_community.csv have not been generated. Therefore, there are 13 csv files in total. Note that we had also processed sequencing files with MG-RAST and usually 20-25% of reads would fail QC. Moreover, it seems counterintuitive that >90% of the sequences failed QC. The community file is composed a bit over than 50% with the file Mock_Plants which was processed normally by MG-RAST resulting in only about 9% of reads failing QC. Therefore, if the problem was with all other non-plant sequences then at least the plant sequences should have been handled properly. Alas, this was not the case. Perhaps this points that MG-RAST is not suitable for the analysis of honey shotgun metagenomes prepared on an IonTorrent platform.

### 1.3 Preparation of stacked barplots for comparisons against the mock

#### 1.3.1 Installing required packages

Having set your working directory properly you can load the data using the following command. The script will first check if you have the required packages and install them if necessary. We then also specify ggplot to place the titles of the charts in the centre since it places them on the left by default!

```{r, message=FALSE}
if (!require('tidyverse')) install.packages('tidyverse'); library('tidyverse')
if (!require('stringr')) install.packages('stringr'); library('stringr')
if (!require('rlist')) install.packages('rlist'); library('rlist')
if (!require('ggplot2')) install.packages('ggplot2'); library('ggplot2')
if (!require('ggsci')) install.packages('ggsci'); library('ggsci')
theme_update(plot.title = element_text(hjust = 0.5))
```

#### 1.3.2 Stacked barplot for plant species

After installing the required packages we can load the files and merge them using stringr. The new dataframe (comparison_plants) contains information about the origin of each data point (id = "file name"). To be able to order the barplot in the way we need, we specify the _levels_ of the variable/factor _Software_. Lastly the stacked barplot is prepared.

```{r warning=FALSE}
setwd("C:/Users/user/Desktop/data_frames")
plant_species <- list.files(path = getwd(), recursive = TRUE, pattern = "species_plants.csv")

comparison_species_plants <- plant_species %>%
  setNames(nm = .) %>%
  map_df(read.csv, .id = "file name")

comparison_species_plants$Software <- factor(comparison_species_plants$Software, levels = c("Mock","CCMetagen","DIAMOND","kraken2","minimap2"))

stacked_barplot_species_plants <- ggplot() + geom_bar(aes(y = Observed_Abundance, x = Software, fill= Species), data = comparison_species_plants, stat='identity', width=0.3, position="fill") + theme(legend.position = 'bottom', legend.text = element_text(size = 10), plot.title = element_text(hjust = 0.5)) + scale_fill_rickandmorty() + theme_bw(base_size =15) + scale_y_continuous(labels = function(x) paste0(x*100, "%"))

final_barplot_species_plants <- print(stacked_barplot_species_plants + labs(title= "Comparison Viridiplantae Species level",y="Observed Abundance (%)", x = ""))
ggsave(filename="final_barplot_species_plants.pdf",plot = final_barplot_species_plants, width = 9, device = "pdf")
```

#### 1.3.3 Stacked barplot for plant genera

Essentially the exact same script as above is applied, this time changing the pattern name to load the files that contain the plant genera.
```{r warning=FALSE}
setwd("C:/Users/user/Desktop/data_frames/barcharts")
plant_genus <- list.files(path = getwd(), recursive = TRUE, pattern = "genus_plants.csv")

comparison_genus_plants <- plant_genus %>%
  setNames(nm = .) %>%
  map_df(read.csv, .id = "file name")

comparison_genus_plants$Software <- factor(comparison_genus_plants$Software, levels = c("Mock","CCMetagen","DIAMOND","kraken2","MG-RAST", "minimap2"))

stacked_barplot_genus_plants <- ggplot() + geom_bar(aes(y = Observed_Abundance, x = Software, fill= Genus), data = comparison_genus_plants, stat='identity', width=0.3, position = "fill") + theme(legend.position = 'bottom', legend.text = element_text(size = 8)) + scale_fill_rickandmorty() + theme_bw(base_size =15) + scale_y_continuous(labels = function(x) paste0(x*100, "%"))

final_barplot_genus_plants <- print(stacked_barplot_genus_plants + labs(title= "Comparison Viridiplantae Genus level",y="Observed Abundance (%)", x = ""))
ggsave(filename="final_barplot_genus_plants.pdf",plot = final_barplot_genus_plants, device = "pdf", width = 9)

```

#### 1.3.4 Stacked barplot for the others dataset

Essentially the exact same script as above is applied, this time changing the pattern name to load the files that contain the plant genera.
```{r warning=FALSE}
setwd("C:/Users/user/Desktop/data_frames/barcharts")
others_dataset <- list.files(path = getwd(), recursive = TRUE, pattern = "others.csv")

comparison_others <- others_dataset %>%
  setNames(nm = .) %>%
  map_df(read.csv, .id = "file name")

comparison_others$Software <- factor(comparison_others$Software, levels = c("Mock","CCMetagen","DIAMOND","kraken2","minimap2"))

stacked_barplot_others <- ggplot() + geom_bar(aes(y = Observed_Abundance, x = Software, fill= Species), data = comparison_others, stat='identity', width=0.3, position="fill") + theme(legend.position = 'bottom', legend.text = element_text(size = 8)) + scale_fill_rickandmorty() + theme_bw(base_size = 15) + scale_y_continuous(labels = function(x) paste0(x*100, "%"))

final_barplot_others <- print(stacked_barplot_others + labs(title= "Comparison for other organisms (non-Viridiplantae)",y="Observed Abundance (%)", x = ""))
ggsave(filename="final_barplot_others.pdf",plot = final_barplot_others, device = "pdf", width = 9, height = 5)

```

### 1.4 Preparation of scatter plot to visualise the community

In order to prepare the scatter plot we will first install a themes package 

```{r, message=FALSE}
if (!require('hrbrthemes')) install.packages('hrbrthemes'); library('hrbrthemes')
if (!require('ggpubr')) install.packages('ggpubr'); library('ggpubr')

```

Now we create a function for creating the scatter plot and apply it to each community. Lastly, we combine the graphs into one. 

```{r}
setwd("C:/Users/user/Desktop/data_frames")

CCMetagen_community <- read.csv("CCMetagen_community.csv")
DIAMOND_community <- read.csv("DIAMOND_community.csv")
kraken2_community <- read.csv("kraken2_community.csv")
minimap2_community <- read.csv("minimap2_community.csv")

library(scales)
q_colors =  3 # for no particular reason
v_colors =  viridis(q_colors, option = "plasma")
v_colours = c(v_colors,"#73D055FF")


scatterplot <- function(df, x, y) {
   ggscatter(df, x="Observed_Abundance", y= "Expected_Abundance", color = "Taxonomic_Domain", size = 3, palette = c("#0D0887FF","#8a8a5c","#CC4678FF","#73D055FF","#F0F921FF")) + stat_cor(size=7, label.x = 4, label.y = 18) + labs(x="Observed Abundance (%)", y="Expected Abundance (%)", color = "Taxonomic Domain", title = "") + theme_bw(base_size = 15) + geom_abline(intercept = 0, slope =1) + theme(legend.text = element_text(size=10))
}



plot1 <- scatterplot(CCMetagen_community) + xlim(0,20) + ylim(0,20)
plot2 <- scatterplot(DIAMOND_community) + xlim(0,20) + ylim(0,20)
plot3 <- scatterplot(kraken2_community) + xlim(0,20) + ylim(0,20)
plot4 <- scatterplot(minimap2_community) + xlim(0,20) + ylim(0,20)

final_scatterplot_no_export <- ggarrange(plot1,plot2,plot3,plot4, labels = c("A","B","C","D"),ncol = 2, nrow = 2, common.legend = TRUE, legend = "bottom")
final_scatterplot <- annotate_figure(final_scatterplot_no_export,  top = text_grob("Performance of tools on the community dataset", face = "bold", size = 14), bottom = text_grob("A: CCMetagen, B: DIAMOND, C: kraken2, D: minimap2"))

ggsave(path = "C:/Users/user/Desktop/data_frames/barcharts", filename = "scatter_plot_performance.pdf", plot= final_scatterplot, height=8, width = 10, device = "pdf")
```


### 1.4 Root Mean Square Error (RMSE) calculation

The RMSE calculation allows us to select the most appropriate software to analyse the IonTorrent reads. Essentially, this calculates how close the observed abundance is to the expected abundance. The RMSE function is given below:

$RMSE = \sqrt{\displaystyle \frac{\sum_{i=1}^{n}(Exp - Obs)^{2}}{n}}$

where:
$Exp$ is the Expected Abundance,
$Obs$ is the Observed Abundance,
and $n$ is the number of observations.

We use the rmse function from the hydroGOF package to do the calculations.

```{r, message=FALSE}
if (!require('hydroGOF')) install.packages('hydroGOF'); library('hydroGOF')
```

We will combine our data frames into a list

```{r}
setwd("C:/Users/user/Desktop/data_frames/RMSE")

temp_species_plants <- list.files(pattern = "species_plants.csv")
species_plants_list <- lapply(temp_species_plants,read.csv)

temp_genus_plants <- list.files(pattern = "genus_plants.csv")
genus_plants_list <- lapply(temp_genus_plants,read.csv)

temp_others <- list.files(pattern = "others.csv")
others_list <- lapply(temp_others,read.csv)

temp_community <- list.files(pattern = "community.csv")
community_list <- lapply(temp_community,read.csv)
```

Create a custom function to add names to the list elements. This custom function will grab the software name from the first column and assign it as the name of the element in the list. We do this in order to know the results for each software separately.

```{r}
setwd("C:/Users/user/Desktop/data_frames/RMSE")

getnames <- function(df){ 
      soft <- df[2,1] 
      return(soft)
}

list_naming <- unlist(lapply(species_plants_list,getnames), use.names = FALSE)
names(species_plants_list) <- list_naming

list_naming_genus <- unlist(lapply(species_plants_list,getnames), use.names = FALSE)
names(genus_plants_list) <- list_naming_genus

names(others_list) <- list_naming

names(community_list) <- list_naming
```

Now, we create a custom function which will report the RMSE for each Software. Then using lapply we can return the RMSE for each Software and create a dataframe with the values. In the end we combine the RMSE dataframes with the RMSE values reported for each sample. 

```{r message=FALSE}
setwd("C:/Users/user/Desktop/data_frames/RMSE")
if (!require('gridExtra')) install.packages('gridExtra'); library('gridExtra')

custom_rmse <- function(df){ 
      exp <- df[,"Expected_Abundance"] 
      obs <- df[,"Observed_Abundance"]
      rmse_value <- rmse(exp,obs)
      return(rmse_value)
}

RMSE_plant_species <- as.data.frame(do.call(rbind, lapply(species_plants_list,custom_rmse)))

RMSE_plant_genus <- as.data.frame(do.call(rbind, lapply(genus_plants_list,custom_rmse)))

RMSE_others <- as.data.frame(do.call(rbind, lapply(others_list,custom_rmse)))

RMSE_community <- as.data.frame(do.call(rbind, lapply(community_list,custom_rmse)))

RMSE_total <- cbind(RMSE_plant_species,RMSE_plant_genus,RMSE_others,RMSE_community)

colnames(RMSE_total) <- c("Plant_Species","Plant_Genus","Others","Community")
names_for_RMSE <- c("Viridiplantae: \n Species level","Viridiplantae: \n Genus level", "Others", "Community")

names(RMSE_total) <- names_for_RMSE
rounded_RMSE_total <- round(RMSE_total,digits = 3)
png("RMSE_total.png",height = 50*nrow(rounded_RMSE_total), width = 100*ncol(rounded_RMSE_total))
rounded_RMSE_total
grid.table(rounded_RMSE_total)

trial_rmse_total <- as_huxtable(rounded_RMSE_total)
set_bold(trial_rmse_total,  row = 1, col = 4)

pdf("RMSE_table.pdf", height=11, width=10)
grid.table(rounded_RMSE_total)
dev.off()

```

## 2. Setting the threshold for kraken2

Since kraken2 appeared to have performed the best among all datasets, we need to set a threshold for the number of reads. We need to do this to avoid false positives from appearing during the analysis. We will do this analysis both on the genus and species level. First, we will start by importing kraken2 output into R.

### 2.1 Importing kraken2 output into R

Remember from section 1.2.3 (Installing and running kraken2) that you should use the flag _--report-zero-counts_ in order to export all taxa. First, we will import the file and sort the dataframe according to taxonomic ID. 
To do this, first we create the names of the variables in the kraken2 output. Then we import the output removing the first row which contains the number of reads that were not assigned and the first column which is the relative abundance calculation from kraken2. We also remove the whitespaces that are produced by kraken2. Then we are ready to sort in an ascending order.


```{r}
setwd("C:/Users/user/Desktop/data_frames")

kraken2_output_names <- c("Reads_assigned_rooted_at_taxon", "Reads_assigned_directly_to_taxon","Rank_code","Taxonomic_ID","Name")

kraken2_community <- read.delim(file = 'mock_community_all.txt', sep = '\t', header = FALSE, skip = 1, strip.white = TRUE)[,-c(1)]
names(kraken2_community) <- kraken2_output_names
kraken2_community <- arrange(kraken2_community,Taxonomic_ID)

```

Now we will create a new column in the dataset to store the abundance for each _Reads assigned directly to taxon_ row. We also create a new colouring column which is labelled with "YES" and "NO" depending on whether the species or genus was used to generate simulated reads. Note the use of the %in% (in operator). We do not use '==' in this case, because if we do then only the lastly checked item in the _community_names_ will be labelled with YES or NO while all others will be assigned to NO. The in operator checks if an item is already present and skips to the next.

```{r}
kraken2_community$Relative_abundance <- (kraken2_community$Reads_assigned_directly_to_taxon / kraken2_community[1,1]) * 100
kraken2_community$Relative_abundance_rooted <- (kraken2_community$Reads_assigned_rooted_at_taxon / kraken2_community[1,1]) * 100

Community_names <- c("Brassica cretica", "Chlamydomonas reinhardtii", "Citrus sinensis", "Malus domestica", "Medicago truncatula", "Oxalis drummondii", "Papaver somniferum", "Petunia x hybrida", "Prunus persica", "Pyrus x bretschneideri", "Theobroma cacao", "Zea mays”,”Apis mellifera filamentous virus", "Apis mellifera", "Frischella perrara", "Gilliamella apicola", "Homo sapiens", "Lactobacillus kunkeei", "Nosema ceranae", "Paenibacillus apiarius", "Snodgrassella alvi", "Staphylococcus epidermidis", "Varroa destructor")
kraken2_community$colouring <- ifelse(kraken2_community$Name %in% Community_names, "YES", "NO")

```

### 2.2 Creating barplots (Reproducing Figures B.A)

Now we can create two new dataframes. One, which will contain only the species (S) and another one which will contain only the genera (G).

```{r}
kraken2_community_genus <- filter(kraken2_community, Rank_code == "G")

kraken2_community_species <- filter(kraken2_community, Rank_code == "S")

```

We can now create the histograms for genus and species separately.

First, the species
```{r}
if (!require('ggplot2')) install.packages('ggplot2'); library('ggplot2')
if (!require('ggpubr')) install.packages('ggpubr'); library('ggpubr')

plot_kraken2_community_species <- ggplot(kraken2_community_species, aes(x=reorder(Name,-Relative_abundance), y=Relative_abundance, fill=colouring)) + geom_bar(stat = "identity") + theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_fill_manual(values = c("grey", "blue")) + labs(x = "Species", y= "Relative abundance", title = "Abundance distribution", fill = "Originally present")

plot_kraken2_community_species

plot_kraken2_community_species_limit <- plot_kraken2_community_species + ylim(0,0.05) + geom_hline(yintercept = 0.012, linetype ="dashed", color = "black")
plot_kraken2_community_species_limit
ggsave(filename="species_limit.png", plot = plot_kraken2_community_species_limit)

```

And now the genera

```{r}
if (!require('ggplot2')) install.packages('ggplot2'); library('ggplot2')
if (!require('ggpubr')) install.packages('ggpubr'); library('ggpubr')

plot_kraken2_community_genus <- ggplot(kraken2_community_genus, aes(x=reorder(Name,-Relative_abundance_rooted), y=Relative_abundance_rooted, fill=colouring)) + geom_bar(stat = "identity") + theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_fill_manual(values = c("grey", "blue")) + labs(y= "Relative abundance", title = "Abundance distribution", fill = "Originally present")

plot_kraken2_community_genus

plot_kraken2_community_genus_limit <- plot_kraken2_community_genus + ylim(0,0.5) + geom_hline(yintercept = 0.004, linetype ="dashed", color = "black")
plot_kraken2_community_genus_limit
ggsave(filename="genus_limit.png", plot = plot_kraken2_community_genus_limit)

```

Regarding the species and genera the lowest abundance detected was 0.004. Therefore, it is safe to conclude that a threshold of at least 38 reads was capable of identifying all genera and most species present in the simulated dataset. 

## 3 Normalisation of data across multiple samples

### 3.1 Importing multiple kraken2 output files and preparing common dataframe

We successfully sequenced 8 honey samples both with our Direct shotgun metagenomics method and a previously published method. A summary table of the samples is given below.

| Hive number | DirectSM | SM    | Season   |
|-------------|----------|-------|----------|
| 4           | DSM_H4   | SM_H4 | November |
| 5           | DSM_H5   | SM_H5 | May      |
| 6           | DSM_H6   | SM_H6 | July     |
| 7           | DSM_H7   | SM_H7 | July     |


Now, we can import them all together into a list. Each dataframe in the list is named after the file it originated from . Then, we change the column names and arrange each dataframe in ascending order according to the Taxonomic ID. Next, we will add 3 additional columns regarding the taxonomic classification: Superkingdom, Kingdom, and Phylum. This is done through the taxonomizr package

```{r}
setwd("C:/Users/user/Desktop/new_final")
if (!require('purrr')) install.packages('purrr'); library('purrr')
if (!require('taxonomizr')) install.packages('taxonomizr'); library('taxonomizr')


kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")


#previous was data_frames/comparison
import_kraken2_files <- list.files(path = "C:/Users/user/Desktop/new_final",pattern = "\\.kraken2",full.names = T)

kraken2_files <- lapply(import_kraken2_files, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,-c(1)]
})

naming_list <- list.files(path = "C:/Users/user/Desktop/new_final",pattern = "\\.kraken2")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

# previous was -4
kraken2_files <- setNames(kraken2_files, substring(naming_list, first  = 1, last = nchar(naming_list) -8))

kraken2_files = lapply(kraken2_files,setNames,kraken2_output_names)

kraken2_files = lapply(kraken2_files,arrange, Taxonomic_ID)

# Optionally add the relative abundance as well
kraken2_files = lapply(kraken2_files, function(df) {
  df$Relative_abundance = df$Sample_reads / df[1,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,1] * 100;
  return(df)
})

classification_ranks <- function(df) {
  setwd("C:/Users/user/Desktop/taxdmp")
  taxids <- df[,4]
  Phylum <- as.character(getTaxonomy(taxids, desiredTaxa = "phylum"))
  Kingdom <- as.data.frame(getTaxonomy(taxids, desiredTaxa = "kingdom"))
  Superkingdom <- as.data.frame(getTaxonomy(taxids, desiredTaxa = "superkingdom"))
  cbind(df, Phylum, Kingdom, Superkingdom)
}

kraken2_files = lapply(kraken2_files, classification_ranks)
```

Now that we have loaded our data, we can simply filter it with dplyr to get the new lists that we want. We create new lists for family (F), genus (G), and species (S). For each taxonomic level we remove the contaminants belonging to 'Drosophila'. Note that the contaminants belonging to 'Homo sapiens' are not removed at this step. Then, we extract the columns containing the taxonomic ID and the number of reads. Note that for genus and family we use the _Sample_reads_rooted_at_taxon_ . Lastly, for each taxonomic level, we create a new dataframe that has merged the data across the samples. The entire clade of 'Chordata' is removed at this step which includes 'Homo sapiens' as well as all of the chordates which likely represent misclassified contaminants.

```{r}
kraken2_files_family <- kraken2_files %>% lapply(filter, Rank_code == "F") %>% lapply(filter, Name != "Drosophilidae") %>% lapply(filter, is.na(Phylum)|Phylum != "Chordata")
kraken2_files_genus <- kraken2_files %>% lapply(filter, Rank_code == "G") %>% lapply(filter, Name != "Drosophila") %>% lapply(filter, is.na(Phylum)|Phylum != "Chordata")

kraken2_files_species <- kraken2_files %>% lapply(filter, Rank_code == "S") %>% lapply(filter, Name != "Drosophila melanogaster") %>% lapply(filter, is.na(Phylum)|Phylum != "Chordata")


kraken2_files_filter_genus <- lapply(kraken2_files_genus, "[", c(1,4))
kraken2_files_filter_species <- lapply(kraken2_files_species, "[", c(2,4))
kraken2_files_filter_family <- lapply(kraken2_files_family, "[", c(1,4))


Hives_genus <- lapply(names(kraken2_files_filter_genus), function(x){
  colnames(kraken2_files_filter_genus[[x]]) <- c(x,"Taxonomic_ID")
  kraken2_files_filter_genus[[x]]
})
names(Hives_genus) <- names(kraken2_files_filter_genus) 

Hives_species <- lapply(names(kraken2_files_filter_species), function(x){
  colnames(kraken2_files_filter_species[[x]]) <- c(x,"Taxonomic_ID")
  kraken2_files_filter_species[[x]]
})
names(Hives_species) <- names(kraken2_files_filter_species) 


Hives_family <- lapply(names(kraken2_files_filter_family), function(x){
  colnames(kraken2_files_filter_family[[x]]) <- c(x,"Taxonomic_ID")
  kraken2_files_filter_family[[x]]
})
names(Hives_family) <- names(kraken2_files_filter_family) 


Hives_comparison_genus <- Hives_genus %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.),0))

Hives_comparison_species <- Hives_species %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))


Hives_comparison_family <- Hives_family %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

```

### 3.2 Normalisation with DESeq2 RLE and preparation of heatmap

In order to be able to compare across samples we need to normalise the read counts. Normalisation is done with DESeq2 using the relative log expression (RLE). This has been shown to perform well in metagenomic samples and it's appropriate to use it for shotgun metagenomics.

#### 3.3 DESEq2 RLE

#### 3.3.1 Introduction and Family RLE

First, we begin with normalising the data. For this we need to load DESeq2. It is important to also have a file that contains the metadata about each sample. In this case the metadata contains information about the Season, Varroa infestation, etc.

```{r message=FALSE}
if (!require('DESeq2')) install.packages('DESeq2'); library('DESeq2')
if (!require('pheatmap')) install.packages('pheatmap'): library('pheatmap')
if (!require('taxize')) install.packages('taxize'): library('taxize')


hives_metadata <- read.csv("C:/Users/user/Desktop/data_frames/comparison/metadata_hives.csv")
```

In order to create our DESeq object we need to specify the file that contains the data to be normalised (in _countData_), the metadata file that is ordered in the same way as the columns of the _countData_, and the design (of the experiments) which is contained in the metadata file. Also note that we keep the tidy as 'TRUE' which means that the row names are the first column of the _countData_. We can then apply the RLE through the estimateSizeFactors function and using the type 'ratio'. 


```{r message = FALSE}
Hives_dds_family <- DESeqDataSetFromMatrix(countData = Hives_comparison_family, colData = hives_metadata, design = ~Hive + Method, tidy = TRUE)

Hives_dds_RLE_family <- estimateSizeFactors(Hives_dds_family,type = "ratio")

```

Once we have our normalised counts we can create our PCA plot. First, the count values are extracted with the Variance Stabilising Transformation (vst) function. The vst looks at the trend between variance and mean in the data, and then tries to find a strictly monotonous transformation of the data so that this trend is removed. In practice, the transformation will approach the logarithm function for high values and the square root function for small values (incl. 0), and smoothly interpolate inbetween. (from https://support.bioconductor.org/p/104615/#104650)


```{r message=FALSE}
Hives_normalised_counts_family <- counts(Hives_dds_RLE_family, normalized = TRUE)

Hives_counts_vst_family <- varianceStabilizingTransformation(Hives_dds_RLE_family, blind = FALSE)

PCA_plot_family <- plotPCA(Hives_counts_vst_family, intgroup = "Method") + geom_text(aes(label=hives_metadata$Hive), vjust=1.5)


ggsave(filename="PCA_plot_family.png", plot = PCA_plot_family)
```

To create our heatmap, first, we need to extract the column names for the annotation.  Lastly, we create the heatmap using the normalised read counts. We also create a taxonomic map to colour the rows accordingly (Bacteria, Eukaryota, Viridiplantae, Viruses, Archaea). Then we extract the normalised read counts and order them.

```{r message=FALSE}
Hives_annotation <- as.data.frame(colData(Hives_dds_family))


get_super_kingdom_or_plant <- function(x) {
  setwd("C:/Users/user/Desktop/taxdmp")
  ifelse(getTaxonomy(x, desiredTaxa = "superkingdom") != "Eukaryota", getTaxonomy(x, desiredTaxa = "superkingdom"), ifelse(getTaxonomy(x, desiredTaxa = "kingdom") == "Viridiplantae", getTaxonomy(x, desiredTaxa = "kingdom"), getTaxonomy(x, desiredTaxa = "superkingdom")))
}

TaxonomicIDs_family <- as.numeric(rownames((Hives_counts_vst_family)))
Taxid_taxonomy_family <- as.data.frame(get_super_kingdom_or_plant(TaxonomicIDs_family)) 
Taxonomic_IDs_dataframe_family <- as.data.frame(TaxonomicIDs_family)
annotationrows_family <- bind_cols(Taxid_taxonomy_family,Taxonomic_IDs_dataframe_family)
colnames(annotationrows_family) <- c("Domain", "Taxonomic_ID")
annotationrows_family <- tibble::column_to_rownames(annotationrows_family, var = "Taxonomic_ID")

ann_colors = list(
    Domain = c(Bacteria = "#0D0887FF", Viruses = "#73D055FF", Eukaryota = "#CC4678FF", Viridiplantae = "#F0F921FF", Archaea = "#ad05f5"),
    Season = c(May = "#5cb300", July = "#ecf547", November = "#8f7c56"))


ordered_counts_family <- order(rowMeans(counts(Hives_dds_RLE_family,normalized=TRUE)), decreasing=TRUE)

final_heatmap_family <- pheatmap(assay(Hives_counts_vst_family)[ordered_counts_family,],cluster_rows = FALSE, show_rownames = FALSE, clustering_distance_cols = "correlation", cluster_cols = TRUE, annotation_col = select(Hives_annotation,Season,Varroa,Population), annotation_row = annotationrows_family, annotation_colors = ann_colors[1:2], main = "Heatmap families", height = 20)
ggsave(filename="heatmap_family.png", plot=final_heatmap_family)
```


#### 3.3.2 Genus RLE

```{r message = FALSE}

Hives_dds_genus <- DESeqDataSetFromMatrix(countData = Hives_comparison_genus, colData = hives_metadata, design = ~Method + Hive, tidy = TRUE)

Hives_dds_RLE_genus <- estimateSizeFactors(Hives_dds_genus,type = "ratio")

Hives_normalised_counts_genus <- counts(Hives_dds_RLE_genus, normalized = TRUE)

Hives_counts_vst_genus <- varianceStabilizingTransformation(Hives_dds_RLE_genus, blind = FALSE)

PCA_plot_genus <- plotPCA(Hives_counts_vst_genus, intgroup = "Method") + geom_text(aes(label=hives_metadata$Hive), vjust=1.5)
ggsave(filename="PCA_plot_genus.png", plot=PCA_plot_genus)

Hives_annotation <- as.data.frame(colData(Hives_dds_genus))

TaxonomicIDs_genus <- as.numeric(rownames((Hives_counts_vst_genus)))
Taxid_taxonomy_genus <- as.data.frame(get_super_kingdom_or_plant(TaxonomicIDs_genus)) 
Taxonomic_IDs_dataframe_genus <- as.data.frame(TaxonomicIDs_genus)
annotationrows_genus <- bind_cols(Taxid_taxonomy_genus,Taxonomic_IDs_dataframe_genus)
colnames(annotationrows_genus) <- c("Domain", "Taxonomic_ID")
annotationrows_genus <- tibble::column_to_rownames(annotationrows_genus, var = "Taxonomic_ID")

ann_colors = list(
    Domain = c(Bacteria = "#0D0887FF", Viruses = "#73D055FF", Eukaryota = "#CC4678FF", Viridiplantae = "#F0F921FF", Archaea = "#ad05f5"),
    Season = c(May = "#5cb300", July = "#ecf547", November = "#8f7c56"))


ordered_counts_genus <- order(rowMeans(counts(Hives_dds_RLE_genus,normalized=TRUE)), decreasing=TRUE)
final_heatmap_genus <- pheatmap(assay(Hives_counts_vst_genus)[ordered_counts_genus,],cluster_rows = FALSE, show_rownames = FALSE, clustering_distance_cols = "correlation", cluster_cols = TRUE, annotation_col = select(Hives_annotation,"Season"), annotation_row = annotationrows_genus, annotation_colors = ann_colors[1:2], main = "Heatmap genera", height = 15)
ggsave(filename="heatmap_genus.png", plot=final_heatmap_genus)

```


#### 3.3.2 Species RLE

```{r message =FALSE}

Hives_dds_species <- DESeqDataSetFromMatrix(countData = Hives_comparison_species, colData = hives_metadata, design = ~Hive + Method, tidy = TRUE)

Hives_dds_RLE_species <- estimateSizeFactors(Hives_dds_species,type = "ratio")

Hives_normalised_counts_species <- counts(Hives_dds_RLE_species, normalized = TRUE)

Hives_counts_vst_species <- varianceStabilizingTransformation(Hives_dds_RLE_species, blind = FALSE)

PCA_plot_species <- plotPCA(Hives_counts_vst_species, intgroup = "Method") + geom_text(aes(label=hives_metadata$Hive), vjust=1.5)
ggsave(filename="PCA_plot_species.png", plot=PCA_plot_species)

Hives_annotation <- as.data.frame(colData(Hives_dds_species))

TaxonomicIDs_species <- as.numeric(rownames((Hives_counts_vst_species)))
Taxid_taxonomy_species <- as.data.frame(get_super_kingdom_or_plant(TaxonomicIDs_species)) 
Taxonomic_IDs_dataframe_species <- as.data.frame(TaxonomicIDs_species)
annotationrows_species <- bind_cols(Taxid_taxonomy_species,Taxonomic_IDs_dataframe_species,generate_species)
colnames(annotationrows_species) <- c("Domain", "Taxonomic_ID","Species")

setwd("C:/Users/user/Desktop/taxdmp")
generate_species <- getTaxonomy(TaxonomicIDs_species,desiredTaxa = "species")
generate_species = as.data.frame(generate_species)
generate_species$species = as.character(generate_species$species)
generate_species[902,1] <- print("unknown1")
generate_species[1455,1] <- print("special1")
generate_species[1790,1] <- print("trial3")
generate_species[1792,1] <- print("ever2")
generate_species[1791,1] <- print("mask1")
generate_species[521,1] <- print("another1")

annotationrows_species = annotationrows_species[,-2]
annotationrows_species <- tibble::column_to_rownames(annotationrows_species, var = "Species")


ann_colors = list(
    Domain = c(Bacteria = "#0D0887FF", Viruses = "#F0F921FF", Eukaryota = "#CC4678FF", Viridiplantae = "#73D055FF", Archaea = "#ad05f5"),
    Season = c(May = "#5cb300", July = "#ecf547", November = "#8f7c56"))

rownames(Hives_counts_vst_species) <- generate_species$species
rownames(annotationrows_species) <- generate_species$species

ordered_counts_species <- order(rowMeans(counts(Hives_dds_RLE_species,normalized=TRUE)), decreasing=TRUE)[1:30]
final_heatmap_species <- pheatmap(assay(Hives_counts_vst_species)[ordered_counts_species,],clustering_distance_cols = "correlation", cluster_rows = FALSE, show_rownames = TRUE, cluster_cols = TRUE, annotation_col = select(Hives_annotation,Season), labels_col = c("DirectSM H4","DirectSM H5","DirectSM H6" ,"DirectSM H7","SM H4", "SM H5","SM H6","SM H7"), annotation_row = annotationrows_species, annotation_colors = ann_colors[1:2], main = "Heatmap top 30 species", height = 100, fontsize = 20)

ggsave(filename="top30_heatmap_species.pdf",device="pdf", plot=final_heatmap_species, height = 13, width = 15)

new_metadata <- hives_metadata[1:2,-6]
new_metadata$Hive <- as.factor(new_metadata$Hive)
new_Hives_comparison_species <- Hives_comparison_species[,1:3]
new_metadata[2,2] <- print("SM")

Hives_dds_species2 <- DESeqDataSetFromMatrix(countData = Hives_comparison_species, colData = hives_metadata, design = ~Season, tidy = TRUE)

Hives_dds_RLE_species2 <- estimateSizeFactors(Hives_dds_species2,type = "ratio")

Hives_dds_RLE_species3 <- collapseReplicates(Hives_dds_RLE_species2, groupby = Hives_dds_RLE_species2$Season, renameCols = TRUE)

dds_try <- DESeq(Hives_dds_RLE_species2)
res <- results(dds_try)
resultsNames(dds_try)

resLFC <- lfcShrink(dds_try, coef="Season_November_vs_July", type="apeglm")
resLFC

plotMA(resLFC)

sum(res$padj < 0.05, na.rm=TRUE)

resOrdered <- res[order(res$pvalue),]

resSig <- subset(resOrdered, padj < 0.05)

taxids112 <- data.frame(Number=is.numeric)
taxids12 <- rownames(resSig) %>% as.data.frame() %>% dplyr::rename(Taxonomic_ID = ".")
taxids_with_tax <- classification_deseq(taxids12)
taxizetry <- ncbi_get_taxon_summary(id = taxids12$Taxonomic_ID)

classification_deseq <- function(df) {
  setwd("C:/Users/user/Desktop/taxdmp")
  taxids <- df$Taxonomic_ID
  Phylum <- as.character(getTaxonomy(taxids, desiredTaxa = "phylum"))
  Superkingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "superkingdom"))
  Kingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "kingdom"))
  Class <- as.character(getTaxonomy(taxids, desiredTaxa = "class"))
  Order <- as.character(getTaxonomy(taxids, desiredTaxa = "order"))
  Family <- as.character(getTaxonomy(taxids,desiredTaxa = "family"))
  Genus <- as.character(getTaxonomy(taxids,desiredTaxa = "genus"))
  Species <- as.character(getTaxonomy(taxids,desiredTaxa = "species"))
  cbind(df, Superkingdom, Kingdom, Phylum, Class, Order, Family, Genus, Species)
}

```

plot differentially abundant species
```{r}
filtering_sign <- rownames(resSig)
annotation_sign <- annotationrows_species %>% tibble::rownames_to_column(var = "Taxonomic_ID")
annotation_sign2 <- annotation_sign %>% filter(., Taxonomic_ID %in% filtering_sign) %>% column_to_rownames(var = "Taxonomic_ID")

plotUpDownSigGenes <- function(results, colNums, rld, title) {

      # make the lists
    upgenes <- rownames(head(resSig[ order( resSig$log2FoldChange ), ], n=40))
    downgenes <- rownames(head(resSig[ order( -resSig$log2FoldChange ), ], n=40))

    # this gives us the rows we want
    rows <- match(upgenes, row.names(rld))
    mat <- assay(rld)[rows,c(1:8)]
    mat <- mat - rowMeans(mat)
     
    TaxonomicIDs_species1 <- as.numeric(rownames((mat)))
    Taxid_taxonomy_species1 <- as.data.frame(get_super_kingdom_or_plant(TaxonomicIDs_species1)) 
    Taxonomic_IDs_dataframe_species1 <- as.data.frame(TaxonomicIDs_species1)

    setwd("C:/Users/user/Desktop/taxdmp")
    generate_species1 <- getTaxonomy(TaxonomicIDs_species1,desiredTaxa = "species")
    generate_species1 = as.data.frame(generate_species1)
    generate_species1$species = as.character(generate_species1$species)
    annotationrows_species1 <- bind_cols(Taxid_taxonomy_species1,Taxonomic_IDs_dataframe_species1,generate_species1)
    colnames(annotationrows_species1) <- c("Domain", "Taxonomic_ID","Species")

    annotationrows_species1 = annotationrows_species1[,-2]
    annotationrows_species1 <- tibble::column_to_rownames(annotationrows_species1, var = "Species")
    rownames(mat) <- generate_species1$species



    # the labels are hard coded at the moment :(
    df <- as.data.frame(colData(rld)[c("Season")])
    pheatmap(mat, fontsize=15, annotation_colors = ann_colors, annotation_row = annotationrows_species1, cluster_rows = FALSE, show_rownames = TRUE, main = "Significantly differentially abundant species", height = 100, angle_col = "270", cluster_cols = TRUE, show_colnames = TRUE, border_color = NA, annotation_col = df, labels_col = c("DirectSM H4","DirectSM H5","DirectSM H6" ,"DirectSM H7","SM H4", "SM H5","SM H6","SM H7"))
}

plotUpDownSigGenes(
    resSig,
    colNums = c(1:8),
    rld)

contrastDEGenes <- subset(results(dds_try, contrast=c("Season","May","July")), padj < 0.05)
aCols <- c(2,3,4)


# get the log transforms again
rld <- rlog(dds_try, blind=F)

# call
sig_plot <- plotUpDownSigGenes(
    resSig,
    colNums = c(1:8),
    rld)
ggsave(plot= sig_plot,filename = "significantly_abundant_species4.pdf",device="pdf", height = 9, width = 14)

new_counts_with_tax <- Counts_with_taxonomy_with_Hive7 
new_counts_with_tax$Superkingdom <- as.character(new_counts_with_tax$Superkingdom)
new_counts_with_tax$Kingdom <- as.character(new_counts_with_tax$Kingdom)

new_counts_with_tax1 <- new_counts_with_tax %>% mutate_all(~replace(., is.na(.), print("Not found")))

DSM_H4 <- new_counts_with_tax1[,c(1,9,10)] %>% filter(.,DirectSM_H4 != 0) 
DSM_H5 <- new_counts_with_tax1[,c(2,9,10)] %>% filter(.,DirectSM_H5 != 0)
DSM_H6 <- new_counts_with_tax1[,c(3,9,10)] %>% filter(.,DirectSM_H6 != 0)
DSM_H7 <- new_counts_with_tax1[,c(4,9,10)] %>% filter(.,DirectSM_H7 != 0)
SM_H4 <- new_counts_with_tax1[,c(5,9,10)] %>% filter(.,SM_H4 != 0)
SM_H5 <- new_counts_with_tax1[,c(6,9,10)] %>% filter(.,SM_H5 != 0)
SM_H6 <- new_counts_with_tax1[,c(7,9,10)] %>% filter(.,SM_H6 != 0)
SM_H7 <- new_counts_with_tax1[,c(8,9,10)] %>% filter(.,SM_H7 != 0)


nDSM_H4 <- new_counts_with_tax1[,c(1,9,10,16)] %>% filter(.,DirectSM_H4 != 0) 
nDSM_H5 <- new_counts_with_tax1[,c(2,9,10,16)] %>% filter(.,DirectSM_H5 != 0)
nDSM_H6 <- new_counts_with_tax1[,c(3,9,10,16)] %>% filter(.,DirectSM_H6 != 0)
nDSM_H7 <- new_counts_with_tax1[,c(4,9,10,16)] %>% filter(.,DirectSM_H7 != 0)
nSM_H4 <- new_counts_with_tax1[,c(5,9,10,16)] %>% filter(.,SM_H4 != 0)
nSM_H5 <- new_counts_with_tax1[,c(6,9,10,16)] %>% filter(.,SM_H5 != 0)
nSM_H6 <- new_counts_with_tax1[,c(7,9,10,16)] %>% filter(.,SM_H6 != 0)
nSM_H7 <- new_counts_with_tax1[,c(8,9,10,16)] %>% filter(.,SM_H7 != 0)

new_lyst2 <- list(nDSM_H4,nDSM_H5,nDSM_H6,nDSM_H7,nSM_H4,nSM_H5,nSM_H6,nSM_H7)
names(new_lyst2) <- c("DSM_H4","DSM_H5","DSM_H6","DSM_H7","SM_H4","SM_H5","SM_H6","SM_H7")

new_lyst3 <- lapply(new_lyst2, "[", c(2))

all_species_per_sample <- do.call(merge, new_lyst3)

for (df in names(new_lyst3)) write.csv(new_lyst3[[df]], file=paste0("C:/Users/user/Desktop/"), df, ".csv")

lapply(names(new_lyst2), function(df) write.csv(new_lyst2[[df]], file=paste0("C:/Users/user/Desktop/", df, ".csv")) )


new_lyst <- list(DSM_H4,DSM_H5,DSM_H6,DSM_H7,SM_H4,SM_H5,SM_H6,SM_H7)
names(new_lyst) <- c("DSM_H4","DSM_H5","DSM_H6","DSM_H7","SM_H4","SM_H5","SM_H6","SM_H7")

count_kingdoms <- function(df, name) {
  Bacteria <- sum(df$Superkingdom == "Bacteria")
  Viridiplantae <- sum(df$Kingdom == "Viridiplantae")
  Eukaryota <- (sum(df$Superkingdom == "Eukaryota") - Viridiplantae)
  Viruses <- sum(df$Superkingdom == "Viruses")
  Archaea <- sum(df$Superkingdom == "Archaea")
  df_1 <- rbind(Bacteria,Viruses,Archaea,Viridiplantae,Eukaryota) %>% as.data.frame();
  return(df_1)
}

kingdoms_per_sample <- lapply(new_lyst,count_kingdoms) %>% do.call(cbind,.)
kingdoms_per_sample2 <- lapply(new_lyst,count_kingdoms) %>% do.call(rbind,.) %>% t() %>% as.data.frame()
rownames(kingdoms_per_sample2) <- NULL

colnames(kingdoms_per_sample) <- c("DirectSM_H4","DirectSM_H5","DirectSM_H6","DirectSM_H7","SM_H4","SM_H5","SM_H6","SM_H7")
kingdom_for_plot <- t(kingdoms_per_sample) %>% as.data.frame() %>% rownames_to_column(var = "Sample")
kingdom_for_plot$Sample <- rep(c("DirectSM_H4","DirectSM_H5","DirectSM_H6","DirectSM_H7","SM_H4","SM_H5","SM_H6","SM_H7"))
#kingdom_for_plot = kingdom_for_plot[,-c(1)]
#kingdom_for_plot = kingdom_for_plot[,-3]

new_kingdom_with_percent1 <- kingdom_for_plot
new_kingdom_with_percent2 = round((new_kingdom_with_percent1[,-1]/rowSums(new_kingdom_with_percent1[,-1]))*100, digits = 2)
new_kingdom_with_percent3 = new_kingdom_with_percent2[,-3]
names_samples <- as.data.frame(kingdom_for_plot[,1])
new_kingdom_with_percent4 = cbind(names_samples,new_kingdom_with_percent3)
colnames(new_kingdom_with_percent4) <- c("Sample","Bacteria","Viruses","Viridiplantae","Eukaryota")

kingdom_melt_percent5 <- reshape2::melt(new_kingdom_with_percent4, id = "Sample")
kingdom_melt_percent5$Sample <- factor(kingdom_melt_percent5$Sample, levels = c("SM_H4","SM_H5","SM_H6","SM_H7","DirectSM_H4","DirectSM_H5","DirectSM_H6","DirectSM_H7"))


#write.csv(kingdom_for_plot, "C:/Users/user/Desktop/Total_number_species_per_domain_per_sample.csv")

kingdom_melt <- reshape2::melt(kingdom_for_plot, id = "Sample") %>% filter(variable != "Archaea")
kingdom_melt$Sample <- factor(kingdom_melt$Sample, levels = c("SM_H4","SM_H5","SM_H6","SM_H7","DirectSM_H4","DirectSM_H5","DirectSM_H6","DirectSM_H7"))

#kingdom_excel <- read.csv("C:/Users/user/Desktop/data_plot_domains1.csv")

#ggscatter(kingdom_excel, x = "Species_DSM", y = "Species_SM", color = "Domain")

x_axis_labels <- c("SM H4","SM H5","SM H6","SM H7","DirectSM H4","DirectSM H5","DirectSM H6","DirectSM H7")
  
barplot_species_relative <- ggplot(kingdom_melt, aes(x=Sample, y= value, fill=variable)) + geom_bar(stat = "identity", position = "fill") + theme_bw() + scale_fill_manual(values=c("#0D0887FF","#CC4678FF", "#73D055FF","#F0F921FF")) + labs(y = "Number of species (%)", x="", fill="Domain") + theme(text = element_text(size=15),axis.text.x = element_text(angle=45, hjust=1, size = 10)) + scale_x_discrete(labels = x_axis_labels)

ggsave(path = "C:/Users/user/Desktop/" ,plot = barplot_species_relative, filename = "barplot_species_relative.png")

barplot_species_absolute <- ggplot(kingdom_melt, aes(x=Sample, y= value, fill=variable)) + geom_bar(stat = "identity") + theme_bw() + scale_fill_manual(values=c("#0D0887FF","#F0F921FF","#73D055FF","#CC4678FF")) + labs(y = "Number of species", x="", fill="Domain") + theme(text = element_text(size=15),axis.text.x = element_text(angle=45, hjust=1, size = 10)) + scale_x_discrete(labels = x_axis_labels) + geom_text(aes(label=ifelse(value>20,paste0(kingdom_melt_percent5$value,"%"),"")), position=position_stack(vjust=0.5) , colour="white") 


eva_crane <- kingdom_melt %>% filter(variable != "Archaea")
eva_crane_percent <- kingdom_melt_percent %>% filter(variable != "Archaea")

ggsave(path = "C:/Users/user/Documents/" ,plot = barplot_species_absolute, filename = "barplot_species_absolute1.pdf", device = "pdf", height = 5, width = 9)


kingdom_for_plot_percent <- kingdom_for_plot
kingdom_for_plot_percent$Percent_plant = round(((kingdom_for_plot_percent$Viridiplantae/rowSums(kingdom_for_plot_percent[,c(-1)])) * 100), digits = 2)

```
#### 3.3.3 Heatmaps without Hive 7 data

Since Hive 7 samples didn't seem to cluster consistently, heatmaps without data from Hive 7 is shown below

First the data import
```{r message=FALSE}
setwd("C:/Users/user/Desktop/data_frames/comparison/No_Hive7")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_kraken2_files_no_Hive7 <- list.files(path = "C:/Users/user/Desktop/data_frames/comparison/No_Hive7",pattern = "\\.tsv",full.names = T)

kraken2_files_no_Hive7 <- lapply(import_kraken2_files_no_Hive7, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,-c(1)]
})

naming_list_no_Hive7 <- list.files(path = "C:/Users/user/Desktop/data_frames/comparison/No_Hive7",pattern = "\\.tsv")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

kraken2_files_no_Hive7 <- setNames(kraken2_files_no_Hive7, substring(naming_list_no_Hive7, first  = 1, last = nchar(naming_list_no_Hive7) -4))

kraken2_files_no_Hive7 = lapply(kraken2_files_no_Hive7,setNames,kraken2_output_names)

kraken2_files_no_Hive7 = lapply(kraken2_files_no_Hive7,arrange, Taxonomic_ID)

# Optionally add the relative abundance as well
kraken2_files_no_Hive7 = lapply(kraken2_files_no_Hive7, function(df) {
  df$Relative_abundance = df$Sample_reads / df[1,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,1] * 100;
  return(df)
})

kraken2_files_no_Hive7 = lapply(kraken2_files_no_Hive7, classification_ranks)


kraken2_files_no_Hive7_family <- kraken2_files_no_Hive7 %>% lapply(filter, Rank_code == "F") %>% lapply(filter, Name != "Drosophilidae") %>% lapply(filter, is.na(Phylum)|Phylum != "Chordata")
kraken2_files_no_Hive7_genus <- kraken2_files_no_Hive7 %>% lapply(filter, Rank_code == "G") %>% lapply(filter, Name != "Drosophila") %>% lapply(filter, is.na(Phylum)|Phylum != "Chordata") 
kraken2_files_no_Hive7_species <- kraken2_files_no_Hive7 %>% lapply(filter, Rank_code == "S") %>% lapply(filter, Name != "Drosophila melanogaster") %>% lapply(filter, is.na(Phylum)|Phylum != "Chordata")


kraken2_files_filter_no_Hive7_genus <- lapply(kraken2_files_no_Hive7_genus, "[", c(2,4))
kraken2_files_filter_no_Hive7_species <- lapply(kraken2_files_no_Hive7_species, "[", c(2,4))
kraken2_files_filter_no_Hive7_family <- lapply(kraken2_files_no_Hive7_family, "[", c(1,4))


Hives_no_Hive7_genus <- lapply(names(kraken2_files_filter_no_Hive7_genus), function(x){
  colnames(kraken2_files_filter_no_Hive7_genus[[x]]) <- c(x,"Taxonomic_ID")
  kraken2_files_filter_no_Hive7_genus[[x]]
})
names(Hives_no_Hive7_genus) <- names(kraken2_files_filter_no_Hive7_genus) 

Hives_no_Hive7_species <- lapply(names(kraken2_files_filter_no_Hive7_species), function(x){
  colnames(kraken2_files_filter_no_Hive7_species[[x]]) <- c(x,"Taxonomic_ID")
  kraken2_files_filter_no_Hive7_species[[x]]
})
names(Hives_no_Hive7_species) <- names(kraken2_files_filter_no_Hive7_species) 

Hives_no_Hive7_family <- lapply(names(kraken2_files_filter_no_Hive7_family), function(x){
  colnames(kraken2_files_filter_no_Hive7_family[[x]]) <- c(x,"Taxonomic_ID")
  kraken2_files_filter_no_Hive7_family[[x]]
})
names(Hives_no_Hive7_family) <- names(kraken2_files_filter_no_Hive7_family) 


Hives_comparison_no_Hive7_genus <- Hives_no_Hive7_genus %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.),0))

Hives_comparison_no_Hive7_species <- Hives_no_Hive7_species %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

Hives_comparison_no_Hive7_family <- Hives_no_Hive7_family %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

hives_no_Hive7_metadata <- read.csv("C:/Users/user/Desktop/data_frames/comparison/No_Hive7/metadata_hives_no_Hive7.csv")
```


#### 3.3.3.1 Heatmap family

```{r message=FALSE}
Hives_dds_no_Hive7_family <- DESeqDataSetFromMatrix(countData = Hives_comparison_no_Hive7_family, colData = hives_no_Hive7_metadata, design = ~Method + Hive, tidy = TRUE)

Hives_dds_RLE_no_Hive7_family <- estimateSizeFactors(Hives_dds_no_Hive7_family,type = "ratio")

Hives_normalised_counts_no_Hive7_family <- counts(Hives_dds_RLE_no_Hive7_family, normalized = TRUE)

Hives_counts_vst_no_Hive7_family <- varianceStabilizingTransformation(Hives_dds_RLE_no_Hive7_family, blind = FALSE)

PCA_plot_no_Hive7_family <- plotPCA(Hives_counts_vst_no_Hive7_family, intgroup = "Method") + geom_text(aes(label=hives_no_Hive7_metadata$Hive), vjust=1.5)
ggsave(filename="PCA_plot_no_Hive7_family.png", plot=PCA_plot_no_Hive7_family)

Hives_annotation_no_Hive7 <- as.data.frame(colData(Hives_dds_no_Hive7_family))

TaxonomicIDs_no_Hive7_family <- as.numeric(rownames((Hives_counts_vst_no_Hive7_family)))
Taxid_taxonomy_no_Hive7_family <- as.data.frame(get_super_kingdom_or_plant(TaxonomicIDs_no_Hive7_family)) 
Taxonomic_IDs_dataframe_no_Hive7_family <- as.data.frame(TaxonomicIDs_no_Hive7_family)
annotationrows_no_Hive7_family <- bind_cols(Taxid_taxonomy_no_Hive7_family,Taxonomic_IDs_dataframe_no_Hive7_family)
colnames(annotationrows_no_Hive7_family) <- c("Domain", "Taxonomic_ID")
annotationrows_no_Hive7_family <- tibble::column_to_rownames(annotationrows_no_Hive7_family, var = "Taxonomic_ID")

ann_colors = list(
    Domain = c(Bacteria = "#9e671b", Viruses = "#D95F02", Eukaryota = "#0a2fff", Viridiplantae = "#1B9E77", Archaea = "#ad05f5"),
    Season = c(May = "#5cb300", July = "#ecf547", November = "#8f7c56"))



ordered_counts_no_Hive7_family <- order(rowMeans(counts(Hives_dds_RLE_no_Hive7_family,normalized=TRUE)), decreasing=TRUE)[1:100]
final_heatmap_no_Hive7_family <- pheatmap(assay(Hives_counts_vst_no_Hive7_family)[ordered_counts_no_Hive7_family,],cluster_rows = FALSE, show_rownames = FALSE, clustering_distance_cols = "correlation", cluster_cols = TRUE, annotation_col = select(Hives_annotation,Season,Varroa,Population), annotation_row = annotationrows_no_Hive7_family, annotation_colors = ann_colors[1:2], main = "Heatmap top 100 families without Hive 7")
ggsave(filename="heatmap_no_Hive7_family.png", plot=final_heatmap_no_Hive7_family)

```


#### 3.3.3.1 Heatmap genus
```{r message=FALSE}
Hives_dds_no_Hive7_genus <- DESeqDataSetFromMatrix(countData = Hives_comparison_no_Hive7_genus, colData = hives_no_Hive7_metadata, design = ~Method + Hive, tidy = TRUE)

Hives_dds_RLE_no_Hive7_genus <- estimateSizeFactors(Hives_dds_no_Hive7_genus,type = "ratio")

Hives_normalised_counts_no_Hive7_genus <- counts(Hives_dds_RLE_no_Hive7_genus, normalized = TRUE)

Hives_counts_vst_no_Hive7_genus <- varianceStabilizingTransformation(Hives_dds_RLE_no_Hive7_genus, blind = FALSE)

PCA_plot_no_Hive7_genus <- plotPCA(Hives_counts_vst_no_Hive7_genus, intgroup = "Method") + geom_text(aes(label=hives_no_Hive7_metadata$Hive), vjust=1.5)
ggsave(filename="PCA_plot_no_Hive7_genus.png", plot=PCA_plot_no_Hive7_genus)

Hives_annotation_no_Hive7 <- as.data.frame(colData(Hives_dds_no_Hive7_genus))

TaxonomicIDs_no_Hive7_genus <- as.numeric(rownames((Hives_counts_vst_no_Hive7_genus)))
Taxid_taxonomy_no_Hive7_genus <- as.data.frame(get_super_kingdom_or_plant(TaxonomicIDs_no_Hive7_genus)) 
Taxonomic_IDs_dataframe_no_Hive7_genus <- as.data.frame(TaxonomicIDs_no_Hive7_genus)
annotationrows_no_Hive7_genus <- bind_cols(Taxid_taxonomy_no_Hive7_genus,Taxonomic_IDs_dataframe_no_Hive7_genus)
colnames(annotationrows_no_Hive7_genus) <- c("Domain", "Taxonomic_ID")
annotationrows_no_Hive7_genus <- tibble::column_to_rownames(annotationrows_no_Hive7_genus, var = "Taxonomic_ID")

ann_colors = list(
    Domain = c(Bacteria = "#9e671b", Viruses = "#D95F02", Eukaryota = "#0a2fff", Viridiplantae = "#1B9E77", Archaea = "#ad05f5"),
    Season = c(May = "#5cb300", July = "#ecf547", November = "#8f7c56"))


ordered_counts_no_Hive7_genus <- order(rowMeans(counts(Hives_dds_RLE_no_Hive7_genus,normalized=TRUE)), decreasing=TRUE)[1:60]
final_heatmap_no_Hive7_genus <- pheatmap(assay(Hives_counts_vst_no_Hive7_genus)[ordered_counts_no_Hive7_genus,],cluster_rows = FALSE, show_rownames = FALSE, clustering_distance_cols = "correlation", cluster_cols = TRUE, annotation_col = select(Hives_annotation,Season,Varroa,Population), annotation_row = annotationrows_no_Hive7_genus, annotation_colors = ann_colors[1:2] ,main = "Heatmap top 60 genera without Hive 7", height = 50 ,width = 20)
ggsave(filename="heatmap_no_Hive7_genus.png", plot=final_heatmap_no_Hive7_genus)

```


#### 3.3.3.1 Heatmap species
```{r message=FALSE}
Hives_dds_no_Hive7_species <- DESeqDataSetFromMatrix(countData = Hives_comparison_no_Hive7_species, colData = hives_no_Hive7_metadata, design = ~Method + Hive, tidy = TRUE)

Hives_dds_RLE_no_Hive7_species <- estimateSizeFactors(Hives_dds_no_Hive7_species,type = "ratio")

Hives_normalised_counts_no_Hive7_species <- counts(Hives_dds_RLE_no_Hive7_species, normalized = TRUE)

Hives_counts_vst_no_Hive7_species <- varianceStabilizingTransformation(Hives_dds_RLE_no_Hive7_species, blind = FALSE)

PCA_plot_no_Hive7_species <- plotPCA(Hives_counts_vst_no_Hive7_species, intgroup = "Method") + geom_text(aes(label=hives_no_Hive7_metadata$Hive), vjust=1.5)
PCA_plot_no_Hive7_species

ggsave(filename="PCA_plot_no_Hive7_species.png", plot=PCA_plot_no_Hive7_species)

Hives_annotation_no_Hive7 <- as.data.frame(colData(Hives_dds_no_Hive7_species))

# assign taxonomic ids to groups

setwd("C:/Users/user/Desktop/taxdmp")
if (!require('taxonomizr')) install.packages("taxonomizr"); library('taxonomizr')

# extract taxonomic ids

TaxonomicIDs <- as.numeric(rownames((Hives_counts_vst_no_Hive7_species)))
Taxid_taxonomy <- as.data.frame(get_super_kingdom_or_plant(TaxonomicIDs)) 
Taxonomic_IDs_dataframe <- as.data.frame(TaxonomicIDs)
annotationrows <- bind_cols(Taxid_taxonomy,Taxonomic_IDs_dataframe)
colnames(annotationrows) <- c("Domain", "Taxonomic_ID")

annotationrows <- tibble::column_to_rownames(annotationrows, var = "Taxonomic_ID")

ann_colors = list(
    Domain = c(Bacteria = "#9e671b", Viruses = "#D95F02", Eukaryota = "#0a2fff", Viridiplantae = "#1B9E77", Archaea = "#ad05f5"),
    Season = c(May = "#5cb300", July = "#ecf547", November = "#8f7c56"))

ordered_counts_no_Hive7_species <- order(rowMeans(counts(Hives_dds_RLE_no_Hive7_species,normalized=TRUE)), decreasing=TRUE)[1:20]

final_heatmap_no_Hive7_species <- pheatmap(assay(Hives_counts_vst_no_Hive7_species)[ordered_counts_no_Hive7_species,],cluster_rows = FALSE, show_rownames = FALSE, clustering_distance_cols = "correlation", cluster_cols = TRUE, annotation_col = select(Hives_annotation_no_Hive7,Season,Varroa,Population), annotation_row = annotationrows, annotation_colors = ann_colors[1:2], main = "Heatmap top 20 species without Hive 7", annotation_legend = TRUE, height = 100)

speciesnames2 <- as.data.frame(rownames(assay(Hives_counts_vst_no_Hive7_species)[ordered_counts_no_Hive7_species,]))
write.csv(speciesnames2, "C:/Users/user/Desktop/speciesnames2.csv" , row.names = FALSE, col.names = FALSE)

ggsave(filename="heatmap_no_Hive7_species.png", plot=final_heatmap_no_Hive7_species)
    
```


### 4 Varroa reads

Shotgun metagenomics offers the opportunity to identify and possibly quantify pathogens present in the honey. For this, we can assess the presence of varroa since we have data regarding the natural fall of varroa. Normalisation at the species level has removed the Varroa destructor reads. However, the reads were conserved after normalisation at the genus level and we use the Varroa (anot not Varroa destructor reads) for the analysis. We needed to know whether the varroa reads in the honey correlate with the natural falling of varroa. This is done in two steps. First, we assess whether the number of reads through direct shotgun metagenomics correlates with the number of reads from shotgun metagenomics.

```{r}
setwd("C:/Users/user/Desktop/data_frames/varroa/martin")

varroa_data <- read.csv("varroa_counts_with_approximate_harvest.csv")
varroa_data$Hive = as.factor(varroa_data$Hive)

varroa_scatter_plot_genus <- ggscatter(varroa_data, x="Varroa_reads_DSM_genus", y= "Varroa_reads_SM_genus", add = "reg.line", color = "Hive", conf.int = TRUE, add.params = list(color = "black", fill="lightblue"), size = 5, point = TRUE) + stat_cor(size=6) + labs(x="Varroa reads through DSM (genus)", y="Varroa reads through SM (genus)", title = "Correlation between SM and DSM reads (genus)")

varroa_scatter_plot_genus
varroa_scatter_plot_genus_final <- ggpar(varroa_scatter_plot_genus, legend = "right")
ggsave(path= "C:/Users/user/Desktop/data_frames/varroa",filename="varroa_scatter_plot_correlation_DSM_SM_genus.png", plot = varroa_scatter_plot_genus_final)

varroa_scatter_plot_species <- ggscatter(varroa_data, x="Varroa_reads_DSM_species", y= "Varroa_reads_SM_species", add = "reg.line", color = "Hive", conf.int = TRUE, add.params = list(color = "black", fill="lightblue"), size = 5, point = TRUE) + stat_cor(size=6) + labs(x="Varroa reads through DSM (species)", y="Varroa reads through SM (species)", title = "Correlation between SM and DSM reads (species)")

varroa_scatter_plot_species_final <- ggpar(varroa_scatter_plot_species, legend = "right")
ggsave(path= "C:/Users/user/Desktop/data_frames/varroa",filename="varroa_scatter_plot_correlation_DSM_SM_species.png", plot = varroa_scatter_plot_species_final)
```

Figures without sugar observations

```{r}
setwd("C:/Users/user/Desktop/data_frames/varroa")

varroa_means <- read.csv("varroa_means.csv")
new_varroa <- read.csv("new_varroa.csv")
varroa_means$Hive = as.factor(varroa_means$Hive)
new_varroa$Hive = as.factor(new_varroa$Hive)
new_varroa$Time = as.factor(new_varroa$Time)
new_varroa$Time <- factor(new_varroa$Time, levels = c("2_weeks","3_weeks","1_month","2_months","3_months"), labels = c("2 weeks","3 weeks","1 month","2 months","3 months"))

my.formula <- y ~ x

regression_lines_SM_genus <- ggplot(data = new_varroa, aes(x =Varroa_reads_SM_genus, y =Average_varday, color = Time)) + geom_smooth(method = "lm", se=FALSE, formula = my.formula) + stat_cor() + theme_minimal() + labs(x = "Varroa reads SM reads (genus)", y="Average varday", title = "Correlation between Average VarDay and Varroa SM reads (genus)") + geom_point(size = 3, aes(shape=Hive))

ggsave(path = "C:/Users/user/Desktop/data_frames/varroa" ,plot = regression_lines_SM_genus, filename = "regression_lines_SM_genus.png")

regression_lines_SM_species <- ggplot(data = new_varroa, aes(x =Varroa_reads_SM_species, y =Average_varday, color = Time)) + geom_smooth(method = "lm", se=FALSE, formula = my.formula) + stat_cor() + theme_minimal() + labs(x = "Varroa reads SM reads (species)", y="Average varday", title = "Correlation between Average VarDay and Varroa SM reads (species)")  + geom_point(size = 3, aes(shape=Hive))

ggsave(path = "C:/Users/user/Desktop/data_frames/varroa" ,plot = regression_lines_SM_species, filename = "regression_lines_SM_species.png")


regression_lines_DSM_genus <- ggplot(data = new_varroa, aes(x =Varroa_reads_DSM_genus, y =Average_varday, color = Time)) + geom_smooth(method = "lm", se=FALSE, formula = my.formula) + stat_cor() + theme_minimal() + labs(x = "Varroa reads DSM reads (genus)", y="Average varday", title = "Correlation between Average VarDay and Varroa DSM reads (genus)") + geom_point(size = 3, aes(shape=Hive))

ggsave(path = "C:/Users/user/Desktop/data_frames/varroa" ,plot = regression_lines_DSM_genus, filename = "regression_lines_DSM_genus.png")

regression_lines_DSM_species <- ggplot(data = new_varroa, aes(x =Varroa_reads_DSM_species, y =Average_varday, color = Time)) + geom_smooth(method = "lm", se=FALSE, formula = my.formula) + stat_cor() + theme_minimal() + labs(x = "Varroa reads DSM reads (species)", y="Average varday", title = "Correlation between Average VarDay and Varroa DSM reads (species)") + geom_point(size = 3, aes(shape=Hive))

ggsave(path = "C:/Users/user/Desktop/data_frames/varroa" ,plot = regression_lines_DSM_species, filename = "regression_lines_DSM_species.png")


```

Including sugar observations
```{r}
setwd("C:/Users/user/Desktop/data_frames/varroa")

varroa_with_sugar <- read.csv("varroa_with_sugar.csv")

varroa_with_sugar$Hive = as.factor(varroa_with_sugar$Hive)
varroa_with_sugar$Time = as.factor(varroa_with_sugar$Time)
varroa_with_sugar$Time <- factor(varroa_with_sugar$Time, levels = c("2_weeks","3_weeks","1_month","2_months","3_months"), labels = c("2 weeks","3 weeks","1 month","2 months","3 months"))


regression_lines_SM_genus_with_sugar <- ggplot(data = varroa_with_sugar, aes(x =Varroa_reads_SM_genus, y =Average_varday, color = Time)) + geom_smooth(method = "lm", se=FALSE, formula = my.formula) + stat_cor() + theme_minimal() + labs(x = "Varroa reads SM reads (genus)", y="Average varday", title = "Correlation between Average VarDay and Varroa SM reads (genus)") + geom_point(size = 3, aes(shape=Hive))

regression_lines_SM_genus_with_sugar

ggsave(path = "C:/Users/user/Desktop/data_frames/varroa",plot = regression_lines_SM_genus_with_sugar, filename = "regression_lines_SM_genus_with_sugar.png")


regression_lines_SM_species_with_sugar <- ggplot(data = varroa_with_sugar, aes(x =Varroa_reads_SM_species, y =Average_varday, color = Time)) + geom_smooth(method = "lm", se=FALSE, formula = my.formula) + stat_cor() + theme_minimal() + labs(x = "Varroa reads SM reads (species)", y="Average varday", title = "Correlation between Average VarDay and Varroa SM reads (species)") + geom_point(size = 3, aes(shape=Hive))

ggsave(path = "C:/Users/user/Desktop/data_frames/varroa" ,plot = regression_lines_SM_species_with_sugar, filename = "regression_lines_SM_species_with_sugar.png")


regression_lines_DSM_genus_with_sugar <- ggplot(data = varroa_with_sugar, aes(x =Varroa_reads_DSM_genus, y =Average_varday, color = Time)) + geom_smooth(method = "lm", se=FALSE, formula = my.formula) + stat_cor() + theme_minimal() + labs(x = "Varroa reads DSM reads (genus)", y="Average varday", title = "Correlation between Average VarDay and Varroa DSM reads (genus)") + geom_point(size = 3, aes(shape=Hive))

ggsave(path = "C:/Users/user/Desktop/data_frames/varroa" ,plot = regression_lines_DSM_genus_with_sugar, filename = "regression_lines_DSM_genus_with_sugar.png")


regression_lines_DSM_species_with_sugar <- ggplot(data = varroa_with_sugar, aes(x =Varroa_reads_DSM_species, y =Average_varday, color = Time)) + geom_smooth(method = "lm", se=FALSE, formula = my.formula) + stat_cor() + theme_minimal() + labs(x = "Varroa reads DSM reads (species)", y="Average varday", title = "Correlation between Average VarDay and Varroa DSM reads (species)") + geom_point(size = 3, aes(shape=Hive))

ggsave(path = "C:/Users/user/Desktop/data_frames/varroa" ,plot = regression_lines_DSM_species_with_sugar, filename = "regression_lines_DSM_species_with_sugar.png")


```



Figures without Hive 5
```{r}
setwd("C:/Users/user/Desktop/data_frames/varroa")

varroa_without_Hive_5 <- read.csv("varroa_without_Hive_5.csv")

varroa_without_Hive_5$Hive = as.factor(varroa_without_Hive_5$Hive)
varroa_without_Hive_5$Time = as.factor(varroa_without_Hive_5$Time)
varroa_without_Hive_5$Time <- factor(varroa_without_Hive_5$Time, levels = c("2_weeks","3_weeks","1_month","2_months","3_months"), labels = c("2 weeks","3 weeks","1 month","2 months","3 months"))


regression_lines_SM_genus_without_Hive_5 <- ggplot(data = varroa_without_Hive_5, aes(x =Varroa_reads_SM_genus, y =Average_varday, color = Time)) + geom_smooth(method = "lm", se=FALSE, formula = my.formula) + stat_cor() + theme_minimal() + labs(x = "Varroa reads SM reads (genus)", y="Average varday", title = "Correlation between Average VarDay and Varroa SM reads (genus)") + geom_point(size = 3, aes(shape=Hive))


ggsave(path = "C:/Users/user/Desktop/data_frames/varroa",plot = regression_lines_SM_genus_without_Hive_5, filename = "regression_lines_SM_genus_without_Hive_5.png")


regression_lines_SM_species_without_Hive_5 <- ggplot(data = varroa_without_Hive_5, aes(x =Varroa_reads_SM_species, y =Average_varday, color = Time)) + geom_smooth(method = "lm", se=FALSE, formula = my.formula) + stat_cor() + theme_minimal() + labs(x = "Varroa reads SM reads (species)", y="Average varday", title = "Correlation between Average VarDay and Varroa SM reads (species)") + geom_point(size = 3, aes(shape=Hive))

ggsave(path = "C:/Users/user/Desktop/data_frames/varroa" ,plot = regression_lines_SM_species_without_Hive_5, filename = "regression_lines_SM_species_without_Hive_5.png")


regression_lines_DSM_genus_without_Hive_5 <- ggplot(data = varroa_without_Hive_5, aes(x =Varroa_reads_DSM_genus, y =Average_varday, color = Time)) + geom_smooth(method = "lm", se=FALSE, formula = my.formula) + stat_cor() + theme_minimal() + labs(x = "Varroa reads DSM reads (genus)", y="Average varday", title = "Correlation between Average VarDay and Varroa DSM reads (genus)") + geom_point(size = 3, aes(shape=Hive))

ggsave(path = "C:/Users/user/Desktop/data_frames/varroa" ,plot = regression_lines_DSM_genus_without_Hive_5, filename = "regression_lines_DSM_genus_without_Hive_5.png")


regression_lines_DSM_species_without_Hive_5 <- ggplot(data = varroa_without_Hive_5, aes(x =Varroa_reads_DSM_species, y =Average_varday, color = Time)) + geom_smooth(method = "lm", se=FALSE, formula = my.formula) + stat_cor() + theme_minimal() + labs(x = "Varroa reads DSM reads (species)", y="Average varday", title = "Correlation between Average VarDay and Varroa DSM reads (species)") + geom_point(size = 3, aes(shape=Hive))

ggsave(path = "C:/Users/user/Desktop/data_frames/varroa" ,plot = regression_lines_DSM_species_without_Hive_5, filename = "regression_lines_DSM_species_without_Hive_5.png")

```

### Working with Plants

First we extract the plants from the normalised counts without Hive 7 and convert to relative abundance. The same is applied to the normalised counts with Hive 7. Moreover, we create a dataframe applying a relative abundance filter of 0.001%.

```{r}
#Normalised counts without Hive 7
Normalised_counts_no_Hive7 <- as.data.frame(Hives_normalised_counts_no_Hive7_species) %>% round(.,digits=0)
Relative_abundance_no_Hive7 <- Normalised_counts_no_Hive7 %>% mutate_all(.,funs((./sum(.))*100))
rownames(Relative_abundance_no_Hive7) <- rownames(Normalised_counts_no_Hive7)


#Normalised counts with Hive 7
Normalised_counts_with_Hive7 <- as.data.frame(Hives_normalised_counts_species) %>% round(.,digits = 0)
Relative_abundance_with_Hive7 <- Normalised_counts_with_Hive7 %>% mutate_all(.,funs((./sum(.))*100))

rownames(Relative_abundance_with_Hive7) <- rownames(Normalised_counts_with_Hive7)

#Normalised counts filtered
Relative_abundance_with_Hive7_filtered <- Relative_abundance_with_Hive7 %>% mutate_all(.,funs(ifelse(. <= 0.01, 0, .)))
rownames(Relative_abundance_with_Hive7_filtered) <- rownames(Relative_abundance_with_Hive7)

#With Hive 7 but no Relative Abundance
Normalised_counts_with_Hive7_no_rel <- as.data.frame(Hives_normalised_counts_species) %>% round(.,digits = 0)

```

Now we create a new function which will return the classification for each row and apply it to each dataframe.

```{r}
classification_phyloseq <- function(df) {
  setwd("C:/Users/user/Desktop/taxdmp")
  taxids <- rownames(df)
  Phylum <- as.character(getTaxonomy(taxids, desiredTaxa = "phylum"))
  Superkingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "superkingdom"))
  Kingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "kingdom"))
  Class <- as.character(getTaxonomy(taxids, desiredTaxa = "class"))
  Order <- as.character(getTaxonomy(taxids, desiredTaxa = "order"))
  Family <- as.character(getTaxonomy(taxids,desiredTaxa = "family"))
  Genus <- as.character(getTaxonomy(taxids,desiredTaxa = "genus"))
  Species <- as.character(getTaxonomy(taxids,desiredTaxa = "species"))
  cbind(df, Superkingdom, Kingdom, Phylum, Class, Order, Family, Genus, Species)
}

tosolenn <- Hives_normalised_counts_species %>% round(.,digits=0) %>% classification_phyloseq()
tosolenngenus <- Hives_normalised_counts_genus %>% round(.,digits=0) %>% classification_phyloseq()
tosolennfamily <- Hives_normalised_counts_family %>% round(.,digits=0) %>% classification_phyloseq()


write.csv(tosolenn,"C:/Users/user/Desktop/Normalised_reads_confidence05.csv")
write.csv(tosolenngenus,"C:/Users/user/Desktop/Normalised_reads_confidence05_genus.csv")
write.csv(tosolennfamily,"C:/Users/user/Desktop/Normalised_reads_confidence05_family.csv")


Counts_with_taxonomy_no_Hive7 <- classification_phyloseq(Relative_abundance)

Counts_with_taxonomy_with_Hive7 <- classification_phyloseq(Relative_abundance_with_Hive7)
write.csv(Counts_with_taxonomy_with_Hive7,"C:/Users/user/Desktop/normalised_counts_with_Hive7_and_taxonomy.csv")

Counts_with_taxonomy_with_Hive7_filtered <- classification_phyloseq(Relative_abundance_with_Hive7_filtered)

Counts_with_taxonomy_with_Hive7_no_rel <- classification_phyloseq(Normalised_counts_with_Hive7_no_rel)
```


```{r}

# previous used the filtered
Relative_abundance_plants <- Counts_with_taxonomy_with_Hive7 %>% tibble::rownames_to_column(var = "Taxonomic_ID") %>% filter(Phylum == "Streptophyta",) %>% tibble::column_to_rownames("Taxonomic_ID")
Relative_abundance_bacteria <- Counts_with_taxonomy %>% tibble::rownames_to_column(var = "Taxonomic_ID") %>% filter(Superkingdom == "Bacteria",) %>% tibble::column_to_rownames("Taxonomic_ID")


viruses_extract <- Counts_with_taxonomy_with_Hive7 %>% tibble::rownames_to_column(var = "Taxonomic_ID") %>% filter(Superkingdom == "Viruses") %>% tibble::column_to_rownames("Taxonomic_ID")
write.csv(viruses_extract,"C:/Users/user/Desktop/viruses.csv")

viruses_counts <- Counts_with_taxonomy_with_Hive7_no_rel %>% tibble::rownames_to_column(var = "Taxonomic_ID") %>% filter(Superkingdom == "Viruses") %>% tibble::column_to_rownames("Taxonomic_ID")
write.csv(viruses_counts,"C:/Users/user/Desktop/viruses_counts.csv")
```


```{r}

# THIS IS TRIAL FOR THE PHYLOSEQ PACKAGE 
#        --- NOT COMPLETE -----      #  
otu_counts <- Relative_abundance %>% data.matrix()
otu_counts2 <- otu_counts 

rownames(otu_counts2) <- Normalised_no_Hive7[,1]


otu_tax <- select(Counts_with_taxonomy, c("Superkingdom","Kingdom","Phylum", "Class", "Order", "Family", "Genus", "Species"))
otu_tax_mat <- as.matrix(otu_tax)
rownames(otu_tax_mat) <- rownames(otu_tax)

otu_plants <- subset_taxa(physeqobj, Kingdom == "Viridiplantae")
otu_plants_filter <- filter_taxa(otu_plants, function(x) mean(x) > 0.01, TRUE)

plot_bar(physeqobj, fill="Superkingdom")

BiocManager::install("phyloseq")
library(phyloseq)

OTU = otu_table(otu_counts, taxa_are_rows = TRUE)
TAX = tax_table(otu_tax_mat)

physeqobj <- phyloseq(OTU,TAX)
```


```{r}

df <- Counts_with_taxonomy_with_Hive7_filtered

#Get the pairs per method per hive. Right now no error is returned if Hive number doesn't exist


#Remove rows that sum to 0 in other words the species is not present 
remove_zero_across_samples <- function(df){
  df_x <- df %>% select_if(.,is.numeric)
  df_y <- df %>% select(.,"Species")
  df_z <- cbind(df_x,df_y) %>% remove_rownames(.) %>% dplyr::filter(rowSums(dplyr::select(., -Species)) > 0)
}

get_pair_method <- function(df,number=is.numeric){
  df_1 <- df %>% dplyr::select(.,contains(number)) %>% remove_rownames()
  df_2 <- df %>% dplyr::select(.,Species) %>% remove_rownames()
  df_3 <- cbind(df_1,df_2) %>% remove_zero_across_samples()
  return(df_3)
}

Hive4_plants <- Relative_abundance_plants %>% get_pair_method(number = "4") # 125 plants
Hive5_plants <- Relative_abundance_plants %>% get_pair_method(number = "5") # 173
Hive6_plants <- Relative_abundance_plants %>% get_pair_method(number = "6") # 107
Hive7_plants <- Relative_abundance_plants %>% get_pair_method(number = "7") # 67


  
remove_zero_across_genus <- function(df){
  df_x <- df %>% select_if(.,is.numeric)
  df_y <- df %>% select(.,"Genus")
  df_z <- cbind(df_x,df_y) %>% remove_rownames(.) %>% dplyr::filter(rowSums(dplyr::select(., -Genus)) > 0)
}

get_pair_genus <- function(df,number=is.numeric){
  df_1 <- df %>% dplyr::select(.,contains(number)) %>% remove_rownames()
  df_2 <- df %>% dplyr::select(.,Genus) %>% remove_rownames()
  df_3 <- cbind(df_1,df_2) %>% remove_zero_across_genus()
  return(df_3)
}

Hive4_genus <- Relative_abundance_plants %>% get_pair_genus(number = "4")
Hive5_genus <- Relative_abundance_plants %>% get_pair_genus(number = "5")
Hive6_genus <- Relative_abundance_plants %>% get_pair_genus(number = "6")
Hive7_genus <- Relative_abundance_plants %>% get_pair_genus(number = "7")



#Function to get flower colour, flowering begin, flowering duration, plant height. They are placed in the same data frame including the Hive number as a factor
Plants_BIEN <- function(df, Hive = is.numeric, method = c("DirectSM_H","SM_H")){
    x=paste(Hive)
    y=paste(method)
    plant_names <- df %>% dplyr::pull(.,Species) %>% as.character()
   flower_col <- plant_names %>% BIEN::BIEN_trait_traitbyspecies(species = ., trait = "flower color", all.taxonomy = FALSE, political.boundaries = FALSE, source.citation = FALSE) %>%  dplyr::select(c(scrubbed_species_binomial,trait_value))  
    flowering_begin <- plant_names %>% BIEN::BIEN_trait_traitbyspecies(species = ., trait = "plant flowering begin", all.taxonomy = FALSE, political.boundaries = FALSE, source.citation = FALSE) %>% dplyr::rename(flowering_begin_month = trait_value) %>% dplyr::filter(unit == "month") %>%  dplyr::select(c(scrubbed_species_binomial,flowering_begin_month))  
  flowering_duration <- plant_names %>% BIEN::BIEN_trait_traitbyspecies(species = ., trait = "plant flowering duration", all.taxonomy = FALSE, political.boundaries = FALSE, source.citation = FALSE) %>% dplyr::rename(flowering_duration_months = trait_value) %>% dplyr::select(c(scrubbed_species_binomial,flowering_duration_months))
  new_lst <- list(flower_col = flower_col, flowering_begin = flowering_begin,flowering_duration = flowering_duration)
  df_new <- new_lst %>% purrr::reduce(.,full_join, by = "scrubbed_species_binomial") %>% dplyr::rename(.,Species = scrubbed_species_binomial) %>% tibble::add_column(.,Method = factor(paste0(y,x)))
}

#Removed because it takes  A LOT of time
  plants_height <- plant_names %>% BIEN::BIEN_trait_mean(species = ., trait = "whole plant height") %>% dplyr::rename(scrubbed_species_binomial = species) %>% dplyr::rename(mean_height = mean_value) %>% dplyr::select(c(scrubbed_species_binomial,mean_height)) 

Plants_BIEN_genus <- function(df, Hive = is.numeric, method = c("DirectSM_H","SM_H")){
    x=paste(Hive)
    y=paste(method)
    plant_names <- df %>% dplyr::pull(.,Genus) %>% as.character()
   flower_col <- plant_names %>% BIEN::BIEN_trait_traitbygenus(genus = ., trait = "flower color", all.taxonomy = FALSE, political.boundaries = FALSE, source.citation = FALSE) %>%  dplyr::select(c(scrubbed_genus,trait_value))  
    flowering_begin <- plant_names %>% BIEN::BIEN_trait_traitbygenus(genus = ., trait = "plant flowering begin", all.taxonomy = FALSE, political.boundaries = FALSE, source.citation = FALSE) %>% dplyr::rename(flowering_begin_month = trait_value) %>% dplyr::filter(unit == "month") %>%  dplyr::select(c(scrubbed_genus,flowering_begin_month))  
  flowering_duration <- plant_names %>% BIEN::BIEN_trait_traitbygenus(genus = ., trait = "plant flowering duration", all.taxonomy = FALSE, political.boundaries = FALSE, source.citation = FALSE) %>% dplyr::rename(flowering_duration_months = trait_value) %>% dplyr::select(c(scrubbed_genus,flowering_duration_months))
  new_lst <- list(flower_col = flower_col, flowering_begin = flowering_begin,flowering_duration = flowering_duration)
  df_new <- new_lst %>% purrr::reduce(.,full_join, by = "scrubbed_genus") %>% dplyr::rename(.,Genus = scrubbed_genus) %>% tibble::add_column(.,Method = factor(paste0(y,x)))
}


#Get plant data at species level
Hive4_DSM_plants <- Hive4_plants %>% Plants_BIEN(Hive = 4,method = "DirectSM_H")
Hive4_SM_plants <- Hive4_plants %>% Plants_BIEN(Hive = 4,method = "SM_H")
Hive5_DSM_plants <- Hive5_plants %>% Plants_BIEN(Hive = 5,method = "DirectSM_H")
Hive5_SM_plants <- Hive5_plants %>% Plants_BIEN(Hive = 5,method = "SM_H")
Hive6_DSM_plants <- Hive6_plants %>% Plants_BIEN(Hive = 6,method = "DirectSM_H")
Hive6_SM_plants <- Hive6_plants %>% Plants_BIEN(Hive = 6,method = "SM_H")
Hive7_DSM_plants <- Hive7_plants %>% Plants_BIEN(Hive = 7,method = "DirectSM_H")
Hive7_SM_plants <- Hive7_plants %>% Plants_BIEN(Hive = 7,method = "SM_H")

#Get plant data at genus level
Hive4_DSM_plants_genus <- Hive4_genus %>% Plants_BIEN_genus(Hive = 4,method = "DirectSM_H")
Hive4_SM_plants_genus <- Hive4_genus %>% Plants_BIEN_genus(Hive = 4,method = "SM_H")
Hive5_DSM_plants_genus <- Hive5_genus %>% Plants_BIEN_genus(Hive = 5,method = "DirectSM_H")
Hive5_SM_plants_genus <- Hive5_genus %>% Plants_BIEN_genus(Hive = 5,method = "SM_H")
Hive6_DSM_plants_genus <- Hive6_genus %>% Plants_BIEN_genus(Hive = 6,method = "DirectSM_H")
Hive6_SM_plants_genus <- Hive6_genus %>% Plants_BIEN_genus(Hive = 6,method = "SM_H")
Hive7_DSM_plants_genus <- Hive7_genus %>% Plants_BIEN_genus(Hive = 7,method = "DirectSM_H")
Hive7_SM_plants_genus <- Hive7_genus %>% Plants_BIEN_genus(Hive = 7,method = "SM_H")


#Returns a dataframe with occurrence data per genus or species. The list can then be filtered as in species_in_med()
occurence_data <- function(df,level=c("species","genus")){
  if(level=="species")
    return({
  plant_names <- df %>% dplyr::pull(.,Species) %>% as.character()  
  plant_names %>% BIEN::BIEN_occurrence_box(species = .,min.lat = 33, max.lat =44, min.long = -9, max.long = 36.1, natives.only = FALSE, native.status = TRUE, cultivated = TRUE) %>% dplyr::select(c(scrubbed_species_binomial,country)) %>% dplyr::rename(Species = scrubbed_species_binomial)
  })
  if(level=="genus")
    return({
  plant_names <- df %>% dplyr::pull(.,Genus) %>% as.character()  
  plant_names %>% BIEN::BIEN_occurrence_box(genus = .,min.lat = 33, max.lat =44, min.long = -9, max.long = 36.1, natives.only = FALSE, native.status = TRUE, cultivated = TRUE) %>% dplyr::select(c(scrubbed_species_binomial,country)) %>% dplyr::rename(Species = scrubbed_species_binomial)
    })
} 


#Returns dataframe with true/false depending on species presence in the mediterranean basin
species_in_med <- function(df) {
  plant_names <- df %>% dplyr::pull(.,Species) %>% as.character()
  occurrence <- df %>% occurence_data(level="species") %>% dplyr::select(.,Species) %>% unique() %>% dplyr::pull()
  df_1 <- plant_names %in% occurrence %>% as.data.frame() %>% dplyr::rename(.,Occurs_in_med = .) %>% cbind(plant_names,.) 
}

Hive4_med_DSM <- Hive4_DSM_plants %>% species_in_med(.) %>% dplyr::group_by(Occurs_in_med) %>% dplyr::count() %>% tibble::add_column(.,Method = "DirectSM_H4")
Hive4_med_SM <- Hive4_SM_plants %>% species_in_med(.) %>% dplyr::group_by(Occurs_in_med) %>% dplyr::count() %>% tibble::add_column(.,Method = "SM_H4")
Hive5_med_DSM <- Hive5_DSM_plants %>% species_in_med(.) %>% dplyr::group_by(Occurs_in_med) %>% dplyr::count() %>% tibble::add_column(.,Method = "DirectSM_H5")
Hive5_med_SM <- Hive5_SM_plants %>% species_in_med(.) %>% dplyr::group_by(Occurs_in_med) %>% dplyr::count() %>% tibble::add_column(.,Method = "SM_H5")
Hive6_med_DSM <- Hive6_DSM_plants %>% species_in_med(.) %>% dplyr::group_by(Occurs_in_med) %>% dplyr::count() %>% tibble::add_column(.,Method = "DirectSM_H6")
Hive6_med_SM <- Hive6_SM_plants %>% species_in_med(.) %>% dplyr::group_by(Occurs_in_med) %>% dplyr::count() %>% tibble::add_column(.,Method = "SM_H6")
Hive7_med_DSM <- Hive7_DSM_plants %>% species_in_med(.) %>% dplyr::group_by(Occurs_in_med) %>% dplyr::count() %>% tibble::add_column(.,Method = "DirectSM_H7")
Hive7_med_SM <- Hive7_SM_plants %>% species_in_med(.) %>% dplyr::group_by(Occurs_in_med) %>% dplyr::count() %>% tibble::add_column(.,Method = "SM_H7")

data_med_presence <- rbind(Hive4_med_DSM,Hive4_med_SM,Hive5_med_DSM,Hive5_med_SM,Hive6_med_DSM,Hive6_med_SM,Hive7_med_DSM,Hive7_med_SM)
data_med_presence$Method <- factor(data_med_presence$Method, levels = c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6","DirectSM_H7","SM_H7"))


plot_med_presence <- ggplot() + geom_bar(aes(y = n, x = Method, fill= Occurs_in_med), data = data_med_presence, stat='identity', width=0.3, position = "fill") + theme_bw() + labs(y = "Present in the Mediterranean (%)", x="",title = "Plant species in the Mediterranean") + theme(text = element_text(size=12),axis.text.x = element_text(angle=45, hjust=1, size = 10)) + scale_fill_manual("Plant occurs in the Mediterranean", values=c("#ff9966","#3377ff")) + scale_y_continuous(labels = c(0,25,50,75,100)) + scale_x_discrete(labels = x_axis_labels)

ggsave(path = "C:/Users/user/Desktop/data_frames/comparison" ,plot = plot_med_presence, filename = "NEWer_species_in_the_mediterranean.pdf",device="pdf", height = 6)


#Getting sum abundance for family
sum_abudance_sig <- Relative_abundance_plants %>% filter(.,rownames(.) %in% rownames(resSig))

Sum_abundance_families <- sum_abudance_sig %>% dplyr::select(.,c("Family",(dplyr::select_if(.,is.numeric) %>% colnames()))) %>% dplyr::group_by(Family) %>%  dplyr::summarise_each(sum) %>% filter(rowSums(dplyr::select(., -Family)) > 0) %>% t(.) %>% as.data.frame(.) %>% janitor::row_to_names(.,row_number = 1) %>% tibble::rownames_to_column(var="Method") %>% reshape2::melt(., id = "Method")

Sum_abundance_families$value <- as.numeric(Sum_abundance_families$value)
Sum_abundance_families$Method <- factor(Sum_abundance_families$Method, levels = c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6","DirectSM_H7","SM_H7"))

Sum_abundance_families_plot = ggplot(Sum_abundance_families, aes(x = Method, y = variable)) + 
  geom_point(aes(size = value, fill = variable), alpha = 0.75, shape = 21, stroke = 0.5) +  labs( x= "", y = "", size = "Relative Abundance (%)", fill = "")  + 
  theme(legend.key=element_blank(), 
  axis.text.x = element_text(colour = "black", size = 12, face = "bold", angle = 90, vjust = 0.3, hjust = 1), 
  axis.text.y = element_text(colour = "black", face = "bold", size = 15), 
  legend.text = element_text(size = 10, face ="bold", colour ="black"), 
  legend.title = element_text(size = 12, face = "bold"), 
  panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1.2), 
  legend.position = "none") +  scale_y_discrete(limits = rev(levels(Sum_abundance_families$variable))) + scale_size_continuous(range = c(0,15)) + scale_fill_viridis_d() + scale_x_discrete(labels = x_axis_labels)

ggsave(path = "C:/Users/user/Desktop/data_frames/comparison" ,plot = Sum_abundance_families_plot, filename = "newer_sum_abundance_families_sig.pdf", device = "pdf")



#Getting sum abundance for genus
Sum_abundance_genus <- sum_abudance_sig %>% dplyr::select(.,c("Genus",(dplyr::select_if(.,is.numeric) %>% colnames()))) %>% dplyr::group_by(Genus) %>%  dplyr::summarise_each(sum) %>% filter(rowSums(dplyr::select(., -Genus)) > 0) %>% t(.) %>% as.data.frame(.) %>% janitor::row_to_names(.,row_number = 1) %>% tibble::rownames_to_column(var="Method") %>% reshape2::melt(., id = "Method")

Sum_abundance_genus$value <- as.numeric(Sum_abundance_genus$value)
Sum_abundance_genus$Method <- factor(Sum_abundance_genus$Method, levels = c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6","DirectSM_H7","SM_H7"))

Sum_abundance_genus_plot = ggplot(Sum_abundance_genus, aes(x = Method, y = variable)) + 
  geom_point(aes(size = value, fill = variable), alpha = 0.75, shape = 21, stroke = 0.5) +
  labs( x= "", y = "", size = "Relative Abundance (%)", fill = "")  + 
  theme(legend.key=element_blank(), 
  axis.text.x = element_text(colour = "black", size = 12, face = "bold", angle = 90, vjust = 0.3, hjust = 1), 
  axis.text.y = element_text(colour = "black", face = "bold", size = 15), 
  legend.text = element_text(size = 10, face ="bold", colour ="black"), 
  legend.title = element_text(size = 12, face = "bold"), 
  panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1.2), 
  legend.position = "none") +  scale_y_discrete(limits = rev(levels(Sum_abundance_genus$variable))) + scale_size_continuous(range=c(0,15)) + scale_fill_viridis_d() + scale_x_discrete(labels = x_axis_labels)

ggsave(path = "C:/Users/user/Desktop/data_frames/comparison" ,plot = Sum_abundance_genus_plot, filename = "NEWer_sum_abundance_genus_sig.pdf", device = "pdf")



#Get bubble plot per hive per method
#Convert species to genus

Hive4_conv_genus <- gsub("\\s*\\w*$", "", Hive4_plants$Species) %>% as.data.frame() %>% rename(., Genus = .) %>% cbind(Hive4_plants,.)
Hive5_conv_genus <- gsub("\\s*\\w*$", "", Hive5_plants$Species) %>% as.data.frame() %>% rename(., Genus = .) %>% cbind(Hive5_plants,.)
Hive6_conv_genus <- gsub("\\s*\\w*$", "", Hive6_plants$Species) %>% as.data.frame() %>% rename(., Genus = .) %>% cbind(Hive6_plants,.)
Hive7_conv_genus <- gsub("\\s*\\w*$", "", Hive7_plants$Species) %>% as.data.frame() %>% rename(., Genus = .) %>% cbind(Hive7_plants,.)

#Get colours per method

Hive4_DSM_conv_col <- Hive4_DSM_plants_genus %>% group_by(Genus,trait_value) %>% dplyr::count() %>% ungroup() %>% as.data.frame() %>% select(.,-n) %>% dplyr::full_join(.,select(Hive4_conv_genus,c("DirectSM_H4","Genus")), by = "Genus") %>% rename(Abundance = DirectSM_H4) %>% select(.,c("trait_value","Abundance")) %>% group_by(., trait_value) %>% summarise_at("Abundance",funs(sum)) %>% mutate_at("Abundance",~replace(., is.na(.), 0)) %>% mutate_at("Abundance",funs((./sum(.))*100)) %>% tibble::add_column(Method = c("DirectSM_H4")) %>% as.data.frame()

Hive4_SM_conv_col <- Hive4_SM_plants_genus %>% group_by(Genus,trait_value) %>% dplyr::count() %>% ungroup() %>% as.data.frame() %>% select(.,-n) %>% dplyr::full_join(.,select(Hive4_conv_genus,c("SM_H4","Genus")), by = "Genus") %>% rename(Abundance = SM_H4) %>% select(.,c("trait_value","Abundance")) %>% group_by(., trait_value) %>% summarise_at("Abundance",funs(sum)) %>% mutate_at("Abundance",~replace(., is.na(.), 0)) %>% mutate_at("Abundance",funs((./sum(.))*100)) %>% tibble::add_column(Method = c("SM_H4")) %>% as.data.frame()

Hive5_DSM_conv_col <- Hive5_DSM_plants_genus %>% group_by(Genus,trait_value) %>% dplyr::count() %>% ungroup() %>% as.data.frame() %>% select(.,-n) %>% dplyr::full_join(.,select(Hive5_conv_genus,c("DirectSM_H5","Genus")), by = "Genus") %>% rename(Abundance = DirectSM_H5) %>% select(.,c("trait_value","Abundance")) %>% group_by(., trait_value) %>% summarise_at("Abundance",funs(sum)) %>% mutate_at("Abundance",~replace(., is.na(.), 0)) %>% mutate_at("Abundance",funs((./sum(.))*100)) %>% tibble::add_column(Method = c("DirectSM_H5")) %>% as.data.frame()

Hive5_SM_conv_col <- Hive5_SM_plants_genus %>% group_by(Genus,trait_value) %>% dplyr::count() %>% ungroup() %>% as.data.frame() %>% select(.,-n) %>% dplyr::full_join(.,select(Hive5_conv_genus,c("SM_H5","Genus")), by = "Genus") %>% rename(Abundance = SM_H5) %>% select(.,c("trait_value","Abundance")) %>% group_by(., trait_value) %>% summarise_at("Abundance",funs(sum)) %>% mutate_at("Abundance",~replace(., is.na(.), 0)) %>% mutate_at("Abundance",funs((./sum(.))*100)) %>% tibble::add_column(Method = c("SM_H5")) %>% as.data.frame()

Hive6_DSM_conv_col <- Hive6_DSM_plants_genus %>% group_by(Genus,trait_value) %>% dplyr::count() %>% ungroup() %>% as.data.frame() %>% select(.,-n) %>% dplyr::full_join(.,select(Hive6_conv_genus,c("DirectSM_H6","Genus")), by = "Genus") %>% rename(Abundance = DirectSM_H6) %>% select(.,c("trait_value","Abundance")) %>% group_by(., trait_value) %>% summarise_at("Abundance",funs(sum)) %>% mutate_at("Abundance",~replace(., is.na(.), 0)) %>% mutate_at("Abundance",funs((./sum(.))*100)) %>% tibble::add_column(Method = c("DirectSM_H6")) %>% as.data.frame()

Hive6_SM_conv_col <- Hive6_SM_plants_genus %>% group_by(Genus,trait_value) %>% dplyr::count() %>% ungroup() %>% as.data.frame() %>% select(.,-n) %>% dplyr::full_join(.,select(Hive6_conv_genus,c("SM_H6","Genus")), by = "Genus") %>% rename(Abundance = SM_H6) %>% select(.,c("trait_value","Abundance")) %>% group_by(., trait_value) %>% summarise_at("Abundance",funs(sum)) %>% mutate_at("Abundance",~replace(., is.na(.), 0)) %>% mutate_at("Abundance",funs((./sum(.))*100)) %>% tibble::add_column(Method = c("SM_H6")) %>% as.data.frame()

Hive7_DSM_conv_col <- Hive7_DSM_plants_genus %>% group_by(Genus,trait_value) %>% dplyr::count() %>% ungroup() %>% as.data.frame() %>% select(.,-n) %>% dplyr::full_join(.,select(Hive7_conv_genus,c("DirectSM_H7","Genus")), by = "Genus") %>% rename(Abundance = DirectSM_H7) %>% select(.,c("trait_value","Abundance")) %>% group_by(., trait_value) %>% summarise_at("Abundance",funs(sum)) %>% mutate_at("Abundance",~replace(., is.na(.), 0)) %>% mutate_at("Abundance",funs((./sum(.))*100)) %>% tibble::add_column(Method = c("DirectSM_H7")) %>% as.data.frame()

Hive7_SM_conv_col <- Hive7_SM_plants_genus %>% group_by(Genus,trait_value) %>% dplyr::count() %>% ungroup() %>% as.data.frame() %>% select(.,-n) %>% dplyr::full_join(.,select(Hive7_conv_genus,c("SM_H7","Genus")), by = "Genus") %>% rename(Abundance = SM_H7) %>% select(.,c("trait_value","Abundance")) %>% group_by(., trait_value) %>% summarise_at("Abundance",funs(sum)) %>% mutate_at("Abundance",~replace(., is.na(.), 0)) %>% mutate_at("Abundance",funs((./sum(.))*100)) %>% tibble::add_column(Method = c("SM_H7")) %>% as.data.frame()

all_hives_conv_col <- rbind(Hive4_DSM_conv_col,Hive4_SM_conv_col,Hive5_DSM_conv_col,Hive5_SM_conv_col,Hive6_DSM_conv_col,Hive6_SM_conv_col,Hive7_DSM_conv_col,Hive7_SM_conv_col) %>% ungroup() %>% as.data.frame() %>% select(.,-Genus) %>% group_by(Method,trait_value) %>% summarise(number = sum(Abundance))
trial4 <- all_hives_conv_col %>% dplyr::select(.,-Genus)


all_hives_conv_col$Method <- factor(all_hives_conv_col$Method, levels = c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6","DirectSM_H7","SM_H7"))
all_hives_conv_col$Abundance <- as.numeric(all_hives_conv_col$Abundance)

all_hives_colours_pref = ggplot(all_hives_conv_col, aes(x = Method, y = trait_value)) + 
  geom_point(aes(size = Abundance, fill = trait_value), alpha = 0.8, shape = 21) +
  labs( x= "", y = "", size = "Relative Abundance (%)", fill = "")  + 
  theme(legend.key=element_blank(), 
  axis.text.x = element_text(colour = "black", size = 12, face = "bold", angle = 90, vjust = 0.3, hjust = 1), 
  axis.text.y = element_text(colour = "black", face = "bold", size = 11), 
  legend.text = element_text(size = 10, face ="bold", colour ="black"), 
  legend.title = element_text(size = 12, face = "bold"), 
  panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1.2), 
  legend.position = "none") +  scale_y_discrete() + scale_fill_viridis_d()

ggsave(path = "C:/Users/user/Desktop/data_frames/comparison" ,plot = all_hives_colours_pref, filename = "flower_colour_abundance_new.png")



# Extract flower colour per genus
Hive4_DSM_species_colours <- Hive4_DSM_plants %>% dplyr::group_by(trait_value) %>% dplyr::count()
Hive4_DSM_species_colours$Method <- c("DirectSM_H4")

Hive4_SM_species_colours <- Hive4_SM_plants %>% dplyr::group_by(trait_value) %>% dplyr::count()
Hive4_SM_species_colours$Method <- c("SM_H4")

Hive5_DSM_species_colours <- Hive5_DSM_plants %>% dplyr::group_by(trait_value) %>% dplyr::count()
Hive5_DSM_species_colours$Method <- c("DirectSM_H5")

Hive5_SM_species_colours <- Hive5_SM_plants %>% dplyr::group_by(trait_value) %>% dplyr::count()
Hive5_SM_species_colours$Method <- c("SM_H5")

Hive6_DSM_species_colours <- Hive6_DSM_plants %>% dplyr::group_by(trait_value) %>% dplyr::count()
Hive6_DSM_species_colours$Method <- c("DirectSM_H6")

Hive6_SM_species_colours <- Hive4_DSM_plants %>% dplyr::group_by(trait_value) %>% dplyr::count()
Hive6_SM_species_colours$Method <- c("SM_H6")

Hive7_DSM_species_colours <- Hive7_DSM_plants %>% dplyr::group_by(trait_value) %>% dplyr::count()
Hive7_DSM_species_colours$Method <- c("DirectSM_H7")

Hive7_SM_species_colours <- Hive7_SM_plants %>% dplyr::group_by(trait_value) %>% dplyr::count()
Hive7_SM_species_colours$Method <- c("SM_H7")

all_hives_colours_species <- rbind(Hive4_DSM_species_colours,Hive4_SM_species_colours,Hive5_SM_species_colours,Hive5_DSM_species_colours,Hive6_DSM_species_colours,Hive6_DSM_species_colours,Hive7_SM_species_colours,Hive7_DSM_species_colours)
all_hives_colours_species$Method <- factor(all_hives_colours_species$Method, levels = c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6","DirectSM_H7","SM_H7"))


color_bar_species <- ggplot(all_hives_colours_species, aes(x = Method , y = trait_value)) + 
  geom_point(aes(size = n,fill = trait_value), alpha = 0.75, shape = 21) +
  scale_size_continuous() + 
  labs(title ="Colour preference (Species)" , x= "", y = "", size = "Relative Abundance (%)", fill = "")  + 
  theme(legend.key=element_blank(), 
  axis.text.x = element_text(colour = "black", size = 12, face = "bold", angle = 90, vjust = 0.3, hjust = 1), 
  axis.text.y = element_text(colour = "black", face = "bold", size = 11), 
  legend.text = element_text(size = 10, face ="bold", colour ="black"), 
  legend.title = element_text(size = 12, face = "bold"), 
  panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1.2), 
  legend.position = "none") +  scale_y_discrete(limits = rev(levels(all_hives_colours_species$trait_value))) 

ggsave(path = "C:/Users/user/Desktop/data_frames/comparison" ,plot = color_bar_species, filename = "all_hives_colours_species.png")



# Extract flower colour per genus
Hive4_DSM_genus_colours <- Hive4_DSM_plants_genus %>% dplyr::group_by(trait_value) %>% dplyr::count()
Hive4_DSM_genus_colours$Method <- c("DirectSM_H4")

Hive4_SM_genus_colours <- Hive4_SM_plants_genus %>% dplyr::group_by(trait_value) %>% dplyr::count()
Hive4_SM_genus_colours$Method <- c("SM_H4")

Hive5_DSM_genus_colours <- Hive5_DSM_plants_genus %>% dplyr::group_by(trait_value) %>% dplyr::count()
Hive5_DSM_genus_colours$Method <- c("DirectSM_H5")

Hive5_SM_genus_colours <- Hive5_SM_plants_genus %>% dplyr::group_by(trait_value) %>% dplyr::count()
Hive5_SM_genus_colours$Method <- c("SM_H5")

Hive6_DSM_genus_colours <- Hive6_DSM_plants_genus %>% dplyr::group_by(trait_value) %>% dplyr::count()
Hive6_DSM_genus_colours$Method <- c("DirectSM_H6")

Hive6_SM_genus_colours <- Hive4_DSM_plants_genus %>% dplyr::group_by(trait_value) %>% dplyr::count()
Hive6_SM_genus_colours$Method <- c("SM_H6")

Hive7_DSM_genus_colours <- Hive7_DSM_plants_genus %>% dplyr::group_by(trait_value) %>% dplyr::count()
Hive7_DSM_genus_colours$Method <- c("DirectSM_H7")

Hive7_SM_genus_colours <- Hive7_SM_plants_genus %>% dplyr::group_by(trait_value) %>% dplyr::count()
Hive7_SM_genus_colours$Method <- c("SM_H7")

all_hives_colours <- rbind(Hive4_DSM_genus_colours,Hive4_SM_genus_colours,Hive5_SM_genus_colours,Hive5_DSM_genus_colours,Hive6_DSM_genus_colours,Hive6_DSM_genus_colours,Hive7_SM_genus_colours,Hive7_DSM_genus_colours)
all_hives_colours$Method <- factor(all_hives_colours$Method, levels = c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6","DirectSM_H7","SM_H7"))


color_bar <- ggplot(all_hives_colours, aes(x = Method , y = trait_value)) + 
  geom_point(aes(size = n,fill = trait_value), alpha = 0.75, shape = 21) +
  scale_size_continuous() + 
  labs(title ="Colour preference (Genus)" , x= "", y = "", size = "Relative Abundance (%)", fill = "")  + 
  theme(legend.key=element_blank(), 
  axis.text.x = element_text(colour = "black", size = 12, face = "bold", angle = 90, vjust = 0.3, hjust = 1), 
  axis.text.y = element_text(colour = "black", face = "bold", size = 11), 
  legend.text = element_text(size = 10, face ="bold", colour ="black"), 
  legend.title = element_text(size = 12, face = "bold"), 
  panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1.2), 
  legend.position = "none") +  scale_y_discrete(limits = rev(levels(all_hives_colours$trait_value))) 

ggsave(path = "C:/Users/user/Desktop/data_frames/comparison" ,plot = color_bar, filename = "all_hives_colours_genus.png")


# Create dataframe for ridgeline plot (library ggridges)
as.factor(Hive4_DSM_plants$flowering_begin_month)

rigidtry <- ggplot(some_data, aes(x = flowering_begin_month, y = Hive, fill = ..x..)) +
  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
  labs(title = 'Plant flowering begin per hive and method') + scale_fill_viridis() + theme_ipsum() + theme(legend.position="none",panel.spacing = unit(0.1, "lines"),strip.text.x = element_text(size = 8)) + scale_x_discrete(labels = c("January","February","March","April","May","June","July","August","September","October","November","December"))

rigidtry

hope13 <- Hive5_DSM_plants

months <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
month_idx <- match(as.character(Hive4_DSM_plants$flowering_begin_month),months)

return_ranges <- function(vector){
  return(as.numeric(vector[1]):(as.numeric(vector[1]) + as.numeric(vector[2])))
}

hope14 <- hope13 %>% mutate_at(c("flowering_begin_month","flowering_duration_months"),~replace(., is.na(.), 0)) %>% select(c("Species","flowering_begin_month","flowering_duration_months")) %>% filter(rowSums(select(.,-Species)) > 0)
hope13$flowering_begin_month <- as.numeric(hope13$flowering_begin_month)
hope13$flowering_duration_months <- as.numeric(hope13$flowering_duration_months)
hope15 <- hope14 %>% filter(rowSums(select(.,-Species)) > 0)
hope15$flowering_begin_month <- factor(hope15$flowering_begin_month, levels=c(1:12))


get_ranges <- function(df,dfx, Hive = is.numeric, Method = c("DirectSM_H","SM_H")){
y=paste0(Method,Hive)
df$flowering_begin_month <- as.numeric(df$flowering_begin_month)
df$flowering_duration_months <- as.numeric(df$flowering_duration_months)
df_1 <- df %>% mutate_at(c("flowering_begin_month","flowering_duration_months"),~replace(., is.na(.), 0)) %>% select(c("Species","flowering_begin_month","flowering_duration_months")) %>% filter(rowSums(select(.,-Species)) > 0)
df_1.1 <- dplyr::full_join(df_1,select(dfx,c(y,"Species"))) %>% rename(Abundance = y)
df_1.1$Abundance <- ceiling(df_1.1$Abundance)
df_1.2 <- df_1.1 %>% uncount(weights = Abundance) %>% mutate_all(., ~replace(.,is.na(.),0))
df_2 <- df_1.2 %>% select(.,-Species) %>% filter(rowSums(.) > 0)

df_2$flowering_begin_month <- factor(df_2$flowering_begin_month, levels=c(1:12))
df_3 <- df_2 %>% rename(ranges = flowering_begin_month) %>% select(ranges)
df_3$mechanism <- c("flowering_begin")
df_4 <- df_3 %>% select(ranges,mechanism)
ranges <- apply(df_2,1,return_ranges)
ranges <- unlist(ranges)
df_5 <- data.frame(table(ranges))
df_6 <- df_5 %>% uncount(weights = Freq) %>% remove_rownames()
df_6$mechanism <- c("flowering_duration")
rbind(df_4,df_6)}



Hive4_DSM_ranges <- Hive4_DSM_plants %>% get_ranges(df=.,dfx=Hive4_conv_genus,Hive="4", Method = "DirectSM_H")
Hive4_DSM_ranges$Method <- c("DirectSM_H4")

Hive4_SM_ranges <- Hive4_SM_plants %>% get_ranges(df=.,dfx=Hive4_conv_genus,Hive="4", Method = "SM_H")
Hive4_SM_ranges$Method <- c("SM_H4")

Hive5_DSM_ranges <- Hive5_DSM_plants %>% get_ranges(df=.,dfx=Hive5_conv_genus,Hive="5", Method = "DirectSM_H")
Hive5_DSM_ranges$Method <- c("DirectSM_H5")

Hive5_SM_ranges <- Hive5_SM_plants %>% get_ranges(df=.,dfx=Hive5_conv_genus,Hive="5", Method = "SM_H")
Hive5_SM_ranges$Method <- c("SM_H5")

Hive6_DSM_ranges <- Hive6_DSM_plants %>% get_ranges(df=.,dfx=Hive6_conv_genus,Hive="6", Method = "DirectSM_H")
Hive6_DSM_ranges$Method <- c("DirectSM_H6")

Hive6_SM_ranges <- Hive6_SM_plants %>% get_ranges(df=.,dfx=Hive6_conv_genus,Hive="6", Method = "SM_H")
Hive6_SM_ranges$Method <- c("SM_H6")

Hive7_DSM_ranges <- Hive7_DSM_plants %>% get_ranges(df=.,dfx=Hive7_conv_genus,Hive="7", Method = "DirectSM_H")
Hive7_DSM_ranges$Method <- c("DirectSM_H7")

Hive7_SM_ranges <- Hive7_SM_plants %>% get_ranges(df=.,dfx=Hive7_conv_genus,Hive="7", Method = "SM_H")
Hive7_SM_ranges$Method <- c("SM_H7")

all_hive_ranges <- rbind(Hive4_DSM_ranges,Hive4_SM_ranges,Hive5_DSM_ranges,Hive5_SM_ranges,Hive6_DSM_ranges,Hive6_SM_ranges,Hive7_DSM_ranges,Hive7_SM_ranges)

all_hive_ranges$ranges <- as.numeric(all_hive_ranges$ranges)
all_hive_ranges$Method <- factor(all_hive_ranges$Method, levels = c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6","DirectSM_H7","SM_H7"))


all_hives_rigidline <- ggplot(all_hive_ranges, aes(x = ranges, y = Method, fill=mechanism)) + geom_density_ridges(alpha = 0.3) + theme_bw() + scale_fill_manual("", values=c("#ff9966","#3377ff"), labels = c("Flowering begin (month)", "Flowering duration (months)"))

ggsave(path = "C:/Users/user/Desktop/data_frames/comparison" ,plot = all_hives_rigidline, filename = "ridgeline_allhives.png")

```

Now we will explore whether the Methods (DirectSM and SM) differ significantly regarding the number of Domains (including Streptophyta).

```{r}
get_Domain_totals <- function(df) {
  Bacteria <- df %>% filter(Superkingdom == "Bacteria") %>% dplyr::select_if(.,is.numeric) %>% colSums() %>% as.data.frame() %>% round(., digits = 2)
  Eukaryota <- df %>% filter(Superkingdom == "Eukaryota" & Phylum != "Streptophyta") %>% dplyr::select_if(.,is.numeric) %>% colSums() %>% as.data.frame() 
  Streptophyta <- df %>% filter(Phylum == "Streptophyta") %>% dplyr::select_if(.,is.numeric) %>% colSums() %>% as.data.frame() %>% round(., digits = 2)
  Viruses <- df %>% filter(Superkingdom == "Viruses") %>% dplyr::select_if(.,is.numeric) %>% colSums() %>% as.data.frame() %>% round(., digits = 2)
    Archaea <- df %>% filter(Superkingdom == "Archaea") %>% dplyr::select_if(.,is.numeric) %>% colSums() %>% as.data.frame() %>% round(., digits = 2)
    Unknown <- df %>% filter(Superkingdom == "Not found") %>% dplyr::select_if(.,is.numeric) %>% colSums() %>% as.data.frame() %>% round(., digits = 2)
 bound1 <- cbind(Bacteria,Eukaryota,Streptophyta,Viruses,Archaea, Unknown) %>% tibble::rownames_to_column(var="Method")
 colnames(bound1) <- c("Method","Bacteria","Eukaryota","Streptophyta","Viruses","Archaea","Unknown");
 return(bound1)
}

#Without Hive 7: Convert NAs to Not found
Counts_with_taxonomy_no_Hive6$Phylum = factor(Counts_with_taxonomy_no_Hive7$Phylum, levels = c(levels(Counts_with_taxonomy_no_Hive7$Phylum), "Not found"))
Counts_with_taxonomy_no_Hive7$Phylum[is.na(Counts_with_taxonomy_no_Hive7$Phylum)] = "Not found"
Counts_with_taxonomy_no_Hive7$Superkingdom = factor(Counts_with_taxonomy_no_Hive7$Superkingdom, levels = c(levels(Counts_with_taxonomy_no_Hive7$Superkingdom), "Not found"))
Counts_with_taxonomy_no_Hive7$Superkingdom[is.na(Counts_with_taxonomy_no_Hive7$Superkingdom)] = "Not found"

Overall_table_no_Hive7 <- get_Domain_totals(Counts_with_taxonomy_no_Hive7) 
for_test_no_Hive7 <- Overall_table %>% tibble::column_to_rownames(var = "Method") %>% t() %>% as.data.frame()

#With Hive 7: Convert NAs to Not found
Counts_with_taxonomy_with_Hive7$Phylum = factor(Counts_with_taxonomy_with_Hive7$Phylum, levels = c(levels(Counts_with_taxonomy_with_Hive7$Phylum), "Not found"))
Counts_with_taxonomy_with_Hive7$Phylum[is.na(Counts_with_taxonomy_with_Hive7$Phylum)] = "Not found"
Counts_with_taxonomy_with_Hive7$Superkingdom = factor(Counts_with_taxonomy_with_Hive7$Superkingdom, levels = c(levels(Counts_with_taxonomy_with_Hive7$Superkingdom), "Not found"))
Counts_with_taxonomy_with_Hive7$Superkingdom[is.na(Counts_with_taxonomy_with_Hive7$Superkingdom)] = "Not found"

Overall_table_with_Hive7 <- get_Domain_totals(Counts_with_taxonomy_with_Hive7) 
for_test_with_Hive7 <- Overall_table_with_Hive7 %>% tibble::column_to_rownames(var = "Method") %>% t() %>% as.data.frame()

#With Hive 7 filtered: Convert NAs to Not found
Counts_with_taxonomy_with_Hive7_filtered$Phylum = factor(Counts_with_taxonomy_with_Hive7_filtered$Phylum, levels = c(levels(Counts_with_taxonomy_with_Hive7_filtered$Phylum), "Not found"))
Counts_with_taxonomy_with_Hive7_filtered$Phylum[is.na(Counts_with_taxonomy_with_Hive7_filtered$Phylum)] = "Not found"
Counts_with_taxonomy_with_Hive7_filtered$Superkingdom = factor(Counts_with_taxonomy_with_Hive7_filtered$Superkingdom, levels = c(levels(Counts_with_taxonomy_with_Hive7_filtered$Superkingdom), "Not found"))
Counts_with_taxonomy_with_Hive7_filtered$Superkingdom[is.na(Counts_with_taxonomy_with_Hive7_filtered$Superkingdom)] = "Not found"

Overall_table_with_Hive7_filtered <- get_Domain_totals(Counts_with_taxonomy_with_Hive7_filtered) 
for_test_with_Hive7_filtered <- Overall_table_with_Hive7_filtered %>% tibble::column_to_rownames(var = "Method") %>% t() %>% as.data.frame()

tempt <- Counts_with_taxonomy_with_Hive7_filtered %>% filter(Superkingdom == "Bacteria") %>% dplyr::select_if(.,is.numeric) %>% colSums() %>% as.data.frame() %>% round(., digits = 2) 

get_p_values_paired_t_test <- function(df){
  Hive_4_test <- t.test(df$DirectSM_H4,df$SM_H4, paired = TRUE) %>% .[["p.value"]] %>% as.data.frame() 
  Hive_5_test <- t.test(df$DirectSM_H5,df$SM_H5, paired = TRUE) %>% .[["p.value"]] %>% as.data.frame() 
  Hive_6_test <- t.test(df$DirectSM_H6,df$SM_H6, paired = TRUE) %>% .[["p.value"]] %>% as.data.frame() 
  Hive_7_test <- t.test(df$DirectSM_H7,df$SM_H7, paired = TRUE) %>% .[["p.value"]] %>% as.data.frame()
  bound2 <- cbind(Hive_4_test,Hive_5_test,Hive_6_test,Hive_7_test)
  colnames(bound2) <- c("H4","H5","H6","H7");
  return(bound2)
}
  
pvalues_no_Hive7 <- get_p_values_paired_t_test(Overall_table_no_Hive7)
pvalues_with_Hive7 <- get_p_values_paired_t_test(for_test_with_Hive7)
pvalues_with_Hive7_filtered <- get_p_values_paired_t_test(for_test_with_Hive7_filtered)

sums_domains_no_Hive7 <- Overall_table_with_Hive7 %>% column_to_rownames(var = "Method")
sums_domains_with_hive7 <- rowSums(sums_domains_no_Hive7)
Overall_table2 <- cbind(Overall_table,sums)
```

Now we can plot the Domains (including Streptophyta)

```{r}
#Without Hive 7
plot_table_domains_no_Hive7 <- melt(Overall_table_no_Hive7, id.vars = "Method") %>% dplyr::rename(Domain = variable)
plot_table_domains_no_Hive7$Method <- factor(plot_table_domains_no_Hive7$Method, levels = c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6"))

#With Hive 7
plot_table_domains_with_Hive7 <- melt(Overall_table_with_Hive7, id.vars = "Method") %>% dplyr::rename(Domain = variable)
plot_table_domains_with_Hive7$Method <- factor(plot_table_domains_with_Hive7$Method, levels = c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6","DirectSM_H7","SM_H7"))

#With Hive 7 filtered
plot_table_domains_with_Hive7_filtered <- melt(Overall_table_with_Hive7_filtered, id.vars = "Method") %>% dplyr::rename(Domain = variable)
plot_table_domains_with_Hive7_filtered$Method <- factor(plot_table_domains_with_Hive7_filtered$Method, levels = c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6","DirectSM_H7","SM_H7"))


barplot_domains_hives_no_Hive7_normalised <- ggplot(plot_table_domains_no_Hive7, aes(x=Method, y= value, fill=Domain)) + geom_bar(stat = "identity") + theme_bw() + scale_fill_manual(values=c("#ff9966","#3377ff","#00e600","#e6e600", "#8a8a5c","#8d32a8")) + labs(y = "Relative abundance (%)", x="") + theme(text = element_text(size=15),axis.text.x = element_text(angle=45, hjust=1, size = 10)) 
ggsave(path = "C:/Users/user/Desktop/data_frames/comparison" ,plot = barplot_domains_hives_no_Hive7_normalised, filename = "barplot_domains_hives_no_Hive7_normalised.png")

barplot_domains_hives_with_Hive7_normalised <- ggplot(plot_table_domains_with_Hive7, aes(x=Method, y= value, fill=Domain)) + geom_bar(stat = "identity") + theme_bw() + scale_fill_manual(values=c("#ff9966","#3377ff","#00e600","#e6e600", "#8a8a5c","#8d32a8")) + labs(y = "Relative abundance (%)", x="") + theme(text = element_text(size=15),axis.text.x = element_text(angle=45, hjust=1, size = 10)) 
ggsave(path = "C:/Users/user/Desktop/data_frames/comparison" ,plot = barplot_domains_hives_with_Hive7_normalised, filename = "NEW_barplot_domains_hives_with_Hive7_normalised.png")


barplot_domains_hives_with_Hive7_normalised_filtered <- ggplot(plot_table_domains_with_Hive7_filtered, aes(x=Method, y= value, fill=Domain)) + geom_bar(stat = "identity", position= "fill") + theme_bw() + scale_fill_manual(values=c("#ff9966","#3377ff","#00e600","#e6e600", "#8a8a5c","#8d32a8")) + labs(y = "Relative abundance (%)", x="") + theme(text = element_text(size=15),axis.text.x = element_text(angle=45, hjust=1, size = 10)) 
ggsave(path = "C:/Users/user/Desktop/data_frames/comparison" ,plot = barplot_domains_hives_with_Hive7_normalised_filtered, filename = "barplot_domains_hives_with_Hive7_normalised_filtered.png")
```

Now we can extract the plants and construct plots to visualise how many plants each method (or both) have identified.

```{r}
Relative_abundance_plants_no_Hive7 <- Counts_with_taxonomy_no_Hive7 %>% tibble::rownames_to_column(var = "Taxonomic_ID") %>% filter(Phylum == "Streptophyta",) %>% tibble::column_to_rownames("Taxonomic_ID")

Relative_abundance_plants_with_Hive7 <- Counts_with_taxonomy_with_Hive7 %>% tibble::rownames_to_column(var = "Taxonomic_ID") %>% filter(Phylum == "Streptophyta",) %>% tibble::column_to_rownames("Taxonomic_ID")

Relative_abundance_plants_with_Hive7_filtered <- Counts_with_taxonomy_with_Hive7_filtered %>% tibble::rownames_to_column(var = "Taxonomic_ID") %>% filter(Phylum == "Streptophyta",) %>% tibble::column_to_rownames("Taxonomic_ID")


Hive4_comparison <- Relative_abundance_plants_with_Hive7 %>% tibble::rownames_to_column(var="Taxonomic_ID") %>% select(c("Taxonomic_ID","DirectSM_H4","SM_H4")) %>% mutate(Absence = case_when(DirectSM_H4 == 0 & SM_H4 != 0 ~  "Only DSM", DirectSM_H4 != 0 & SM_H4 == 0 ~  "Only SM",DirectSM_H4 != 0 & SM_H4 != 0 ~  "Both")) %>% filter(!is.na(Absence)) %>% tibble::column_to_rownames(var="Taxonomic_ID") %>% mutate(Only_DSM = sum(.$Absence == "Only DSM")) %>%  mutate(Only_SM = sum(.$Absence == "Only SM")) %>%  mutate(Both = sum(.$Absence == "Both"))

Hive4_barplot <- c("Hive 4",sum(Hive4_comparison$Absence == "Only DSM"),sum(Hive4_comparison$Absence == "Only SM"),sum(Hive4_comparison$Absence == "Both"))
Hive5_barplot <- c("Hive 5",sum(Hive5_comparison$Absence == "Only DSM"),sum(Hive5_comparison$Absence == "Only SM"),sum(Hive5_comparison$Absence == "Both"))
Hive6_barplot <- c("Hive 6",sum(Hive6_comparison$Absence == "Only DSM"),sum(Hive6_comparison$Absence == "Only SM"),sum(Hive6_comparison$Absence == "Both"))
Hive7_barplot <- c("Hive 7",sum(Hive7_comparison$Absence == "Only DSM"),sum(Hive7_comparison$Absence == "Only SM"),sum(Hive7_comparison$Absence == "Both"))


data_method_to_reshape <- rbind(Hive4_barplot,Hive5_barplot,Hive6_barplot,Hive7_barplot) %>% as.data.frame() %>% remove_rownames() %>% dplyr::rename(Hive = V1) %>% dplyr::rename(Only_DSM = V2) %>% dplyr::rename(Only_SM = V3) %>% dplyr::rename(Both = V4)


data_method_per_hive <- melt(data_method_to_reshape, id.vars = "Hive") %>% dplyr::rename(Method = variable)
data_method_per_hive$value = as.numeric(data_method_per_hive$value)

plot_table_domains$Method <- factor(plot_table_domains$Method, levels = c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6"))


Hive5_comparison <- Relative_abundance_plants_with_Hive7 %>% tibble::rownames_to_column(var="Taxonomic_ID") %>% select(c("Taxonomic_ID","DirectSM_H5","SM_H5")) %>% mutate(Absence = case_when(DirectSM_H5 == 0 & SM_H5 != 0 ~  "Only DSM", DirectSM_H5 != 0 & SM_H5 == 0 ~  "Only SM",DirectSM_H5 != 0 & SM_H5 != 0 ~  "Both")) %>% filter(!is.na(Absence)) %>% tibble::column_to_rownames(var="Taxonomic_ID") %>% mutate(Hive = rep("Hive 5", length(Absence)))
Hive5_barplot <- select(Hive4_comparison, c("Absence","Hive"))

Hive6_comparison <- Relative_abundance_plants_with_Hive7 %>% tibble::rownames_to_column(var="Taxonomic_ID") %>% select(c("Taxonomic_ID","DirectSM_H6","SM_H6")) %>% mutate(Absence = case_when(DirectSM_H6 == 0 & SM_H6 != 0 ~  "Only DSM", DirectSM_H6 != 0 & SM_H6 == 0 ~  "Only SM",DirectSM_H6 != 0 & SM_H6 != 0 ~  "Both")) %>% filter(!is.na(Absence)) %>% tibble::column_to_rownames(var="Taxonomic_ID") %>% mutate(Hive = rep("Hive 6", length(Absence)))
Hive6_barplot <- select(Hive4_comparison, c("Absence","Hive"))


Hive7_comparison <- Relative_abundance_plants_with_Hive7 %>% tibble::rownames_to_column(var="Taxonomic_ID") %>% select(c("Taxonomic_ID","DirectSM_H7","SM_H7")) %>% mutate(Absence = case_when(DirectSM_H7 == 0 & SM_H7 != 0 ~  "Only DSM", DirectSM_H7 != 0 & SM_H7 == 0 ~  "Only SM",DirectSM_H7 != 0 & SM_H7 != 0 ~  "Both")) %>% filter(!is.na(Absence)) %>% tibble::column_to_rownames(var="Taxonomic_ID") %>% mutate(Hive = rep("Hive 7", length(Absence)))
Hive7_barplot <- select(Hive4_comparison, c("Absence","Hive"))


barplot_comparison_method_per_hive <- ggplot(data_method_per_hive, aes(x=Hive, y=value, fill=Method)) + geom_bar(position = "fill",stat = "identity") + theme_bw() 
barplot_comparison_method_per_hive


Hive4_comparison_filtered <- Relative_abundance_plants_with_Hive7_filtered %>% tibble::rownames_to_column(var="Taxonomic_ID") %>% select(c("Taxonomic_ID","DirectSM_H4","SM_H4")) %>% mutate(Presence = case_when(DirectSM_H4 == 0 & SM_H4 != 0 ~  "Only SM", DirectSM_H4 != 0 & SM_H4 == 0 ~  "Only DSM",DirectSM_H4 != 0 & SM_H4 != 0 ~  "Both")) %>% filter(!is.na(Presence)) %>% tibble::column_to_rownames(var="Taxonomic_ID") 

Hive5_comparison_filtered <- Relative_abundance_plants_with_Hive7_filtered %>% tibble::rownames_to_column(var="Taxonomic_ID") %>% select(c("Taxonomic_ID","DirectSM_H5","SM_H5")) %>% mutate(Presence = case_when(DirectSM_H5 == 0 & SM_H5 != 0 ~  "Only SM", DirectSM_H5 != 0 & SM_H5 == 0 ~  "Only DSM",DirectSM_H5 != 0 & SM_H5 != 0 ~  "Both")) %>% filter(!is.na(Presence)) %>% tibble::column_to_rownames(var="Taxonomic_ID") 

Hive6_comparison_filtered <- Relative_abundance_plants_with_Hive7_filtered %>% tibble::rownames_to_column(var="Taxonomic_ID") %>% select(c("Taxonomic_ID","DirectSM_H6","SM_H6")) %>% mutate(Presence = case_when(DirectSM_H6 == 0 & SM_H6 != 0 ~  "Only SM", DirectSM_H6 != 0 & SM_H6 == 0 ~  "Only DSM",DirectSM_H6 != 0 & SM_H6 != 0 ~  "Both")) %>% filter(!is.na(Presence)) %>% tibble::column_to_rownames(var="Taxonomic_ID") 


Hive7_comparison_filtered <- Relative_abundance_plants_with_Hive7_filtered %>% tibble::rownames_to_column(var="Taxonomic_ID") %>% select(c("Taxonomic_ID","DirectSM_H7","SM_H7")) %>% mutate(Presence = case_when(DirectSM_H7 == 0 & SM_H7 != 0 ~  "Only SM", DirectSM_H7 != 0 & SM_H7 == 0 ~  "Only DSM",DirectSM_H7 != 0 & SM_H7 != 0 ~  "Both")) %>% filter(!is.na(Presence)) %>% tibble::column_to_rownames(var="Taxonomic_ID") 





Hive4_barplot_filtered <- c("Hive 4",sum(Hive4_comparison_filtered$Presence == "Only DSM"),sum(Hive4_comparison_filtered$Presence == "Only SM"),sum(Hive4_comparison_filtered$Presence == "Both"))
Hive5_barplot_filtered <- c("Hive 5",sum(Hive5_comparison_filtered$Presence == "Only DSM"),sum(Hive5_comparison_filtered$Presence == "Only SM"),sum(Hive5_comparison_filtered$Presence == "Both"))
Hive6_barplot_filtered <- c("Hive 6",sum(Hive6_comparison_filtered$Presence == "Only DSM"),sum(Hive6_comparison_filtered$Presence == "Only SM"),sum(Hive6_comparison_filtered$Presence == "Both"))
Hive7_barplot_filtered <- c("Hive 7",sum(Hive7_comparison_filtered$Presence == "Only DSM"),sum(Hive7_comparison_filtered$Presence == "Only SM"),sum(Hive7_comparison_filtered$Presence == "Both"))

data_method_to_reshape_filtered <- rbind(Hive4_barplot_filtered,Hive5_barplot_filtered,Hive6_barplot_filtered,Hive7_barplot_filtered) %>% as.data.frame() %>% remove_rownames() %>% dplyr::rename(Hive = V1) %>% dplyr::rename(Only_DSM = V2) %>% dplyr::rename(Only_SM = V3) %>% dplyr::rename(Both = V4)


data_method_per_hive_filtered <- melt(data_method_to_reshape_filtered, id.vars = "Hive") %>% dplyr::rename(Method = variable)
data_method_per_hive_filtered$value = as.numeric(data_method_per_hive_filtered$value)

barplot_comparison_method_per_hive_filtered <- ggplot(data_method_per_hive_filtered, aes(x=Hive, y=value, fill=Method)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + labs(x="",y="Identified (%)") + scale_fill_manual(values = c("#ff9966","#3377ff","#00e600") ,labels = c("Only DirectSM","Only SM","Both")) + scale_y_continuous(labels = c(0,25,50,75,100)) + theme(text = element_text(size = 20))
barplot_comparison_method_per_hive_filtered

ggsave(path = "C:/Users/user/Desktop/data_frames/comparison" ,plot = barplot_comparison_method_per_hive_filtered, filename = "barplot_comparison_method_per_hive_with_Hive7_normalised_filtered.png", height = 7)



# Does population size correlate with domains?
direct_hives <- read.csv("C:/Users/user/Desktop/data_frames/comparison/direct_hives.csv")

correlations_direct <- ggcorr(direct_hives, method = c("everything","spearman"), label = TRUE) + labs(title = "Spearman correlation using DSM Domains")
ggsave(path = "C:/Users/user/Desktop/data_frames/comparison" ,plot = correlations_direct, filename = "correlations_direct_domains.png")


sm_hives <- read.csv("C:/Users/user/Desktop/data_frames/comparison/sm_hives.csv")
correlations_sm <- ggcorr(sm_hives, method = c("everything","spearman"), label = TRUE) + labs(title = "Spearman correlation using SM Domains")
ggsave(path = "C:/Users/user/Desktop/data_frames/comparison" ,plot = correlations_sm, filename = "correlations_sm_domains.png")

# Removing Hive 6 as it appeared very different

direct_hives_no_hive6 <- read.csv("C:/Users/user/Desktop/data_frames/comparison/direct_hives_no_hive6.csv")

correlations_direct_no_hive6 <- ggcorr(direct_hives_no_hive6, method = c("everything","spearman"), label = TRUE) + labs(title = "Spearman correlation using DSM Domains (No Hive 6)")
ggsave(path = "C:/Users/user/Desktop/data_frames/comparison" ,plot = correlations_direct_no_hive6, filename = "correlations_direct_domains_no_hive6.png")


sm_hives_no_hive6 <- read.csv("C:/Users/user/Desktop/data_frames/comparison/sm_hives_no_hive6.csv")
correlations_sm_no_hive6 <- ggcorr(sm_hives_no_hive6, method = c("everything","spearman"), label = TRUE) + labs(title = "Spearman correlation using SM Domains (No Hive 6)")
ggsave(path = "C:/Users/user/Desktop/data_frames/comparison" ,plot = correlations_sm_no_hive6, filename = "correlations_sm_domains_no_hive6.png")



```
Working with Bacteria
```{r}
Relative_abundance_bacteria <- Counts_with_taxonomy_with_Hive7_filtered %>% tibble::rownames_to_column(var = "Taxonomic_ID") %>% filter(Superkingdom == "Bacteria",) %>% tibble::column_to_rownames("Taxonomic_ID")

Relative_abundance_bact_nofilt <- Counts_with_taxonomy_with_Hive7 %>% tibble::rownames_to_column(var = "Taxonomic_ID") %>% filter(Superkingdom == "Bacteria",) %>% tibble::column_to_rownames("Taxonomic_ID")

Relative_abundance_bacteria_cutoff <- select(Relative_abundance_bact_nofilt,c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6","DirectSM_H7","SM_H7")) 
Relative_cutoff <- data.frame(Relative_abundance_bacteria_cutoff[which(apply(Relative_abundance_bacteria_cutoff, 1, function(x){length(which(x != 0))/length(x)}) == 1),]) %>% tibble::rownames_to_column(var = "Taxonomic_ID")
taxonomy_bact <- Relative_abundance_bact_nofilt %>% select(.,c("Phylum","Family","Genus","Species")) %>% tibble::rownames_to_column(var = "Taxonomic_ID") %>% inner_join(.,Relative_cutoff, by = "Taxonomic_ID")

taxonomy_bact_phylum <- taxonomy_bact %>% select(.,-c("Taxonomic_ID","Genus","Species","Family")) %>% group_by(.,Phylum) %>% summarise_all(sum) %>% as.data.frame() %>% t() %>% as.data.frame() %>% janitor::row_to_names(row_number = 1) %>% janitor::clean_names() %>% tibble::rownames_to_column(var="Method") %>% reshape2::melt(.,id.vars = "Method")
taxonomy_bact_phylum$value <- as.numeric(taxonomy_bact_phylum$value)
taxonomy_bact_phylum$Method <- factor(taxonomy_bact_phylum$Method, levels = c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6","DirectSM_H7","SM_H7"))

bact_phylum_plot <- ggplot(taxonomy_bact_phylum, aes(x=value, y=Method, fill=variable)) + geom_bar(position = "fill",stat = "identity", width = 0.4) + theme_bw() + scale_fill_viridis_d() + scale_x_continuous(labels = c(0,25,50,75,100)) + labs(x="Relative abundance (%)", y="", fill = "Phylum")
bact_phylum_plot

ggsave(plot=bact_phylum_plot, filename="bacteria_phylum_plot.png", path = "C:/Users/user/Desktop/data_frames/comparison")



bact_database <- read.csv("C:/Users/user/Desktop/bacteria_database.csv")
bact_database = rename(bact_database, Presence = Curator.Notes)
bact_database$Presence = as.character(bact_database$Presence)
bact_database_st <- bact_database %>% mutate("Presence" = case_when(str_detect(Presence,pattern = "hindgut") ~  "Hindgut", str_detect(Presence,pattern = "midgut") ~  "Midgut", str_detect(Presence,pattern = "stomach") ~  "Stomach", str_detect(Presence,pattern = "gut") ~  "Gut", str_detect(Presence,pattern = "bee bread and honey") ~  "Bee bread",str_detect(Presence,pattern = "bee bread") ~  "Bee bread",str_detect(Presence,pattern = "honey") ~  "Honey", str_detect(Presence,pattern = "Apis mellifera") ~  "Colony" ,TRUE ~ Presence))

mutate(event_type = case_when(
    str_detect(event_type, "Battle") ~ "Battle",
    str_detect(event_type, "Riots")  ~ "Riot",
    TRUE ~ event_type
    ))

```

hyhjy



```{r}
Relative_abundance_bacteria_phylum_per_sample <- Relative_abundance_bacteria %>% select(.,-c("Superkingdom","Kingdom","Order","Class","Genus","Species","Family")) %>% filter(rowSums(select(.,-Phylum)) > 0) %>% group_by(.,Phylum) %>% summarise_all(sum) %>% as.data.frame() %>% t() %>% as.data.frame() %>% janitor::row_to_names(row_number = 1) %>% janitor::clean_names() %>% tibble::rownames_to_column(var="Method") %>% reshape2::melt(.,id.vars = "Method")
Relative_abundance_bacteria_phylum_per_sample$value <- as.numeric(Relative_abundance_bacteria_phylum_per_sample$value)
Relative_abundance_bacteria_phylum_per_sample$Method <- factor(Relative_abundance_bacteria_phylum_per_sample$Method, levels = c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6","DirectSM_H7","SM_H7"))


bacteria_phylum_plot <- ggplot(Relative_abundance_bacteria_phylum_per_sample, aes(x=value, y=Method, fill=variable)) + geom_bar(position = "fill",stat = "identity", width = 0.4) + theme_bw() + scale_fill_viridis_d() + scale_x_continuous(labels = c(0,25,50,75,100)) + labs(x="Relative abundance (%)", y="", fill = "Phylum")
bacteria_phylum_plot

ggsave(plot=bacteria_phylum_plot, filename="bacteria_phylum_plot.png", path = "C:/Users/user/Desktop/data_frames/comparison")


#Family
Relative_abundance_bacteria_family_per_sample <- Relative_abundance_bacteria %>% select(.,-c("Superkingdom","Kingdom","Order","Class","Genus","Species","Phylum")) %>% filter(rowSums(select(.,-Family)) > 0.1) %>% group_by(.,Family) %>% summarise_all(sum) %>% as.data.frame() %>% tidyr::drop_na() %>% t() %>% as.data.frame() %>% janitor::row_to_names(row_number = 1) %>% tibble::rownames_to_column(var="Method") %>% reshape2::melt(.,id.vars = "Method")
Relative_abundance_bacteria_family_per_sample$value <- as.numeric(Relative_abundance_bacteria_family_per_sample$value)
Relative_abundance_bacteria_family_per_sample$Method <- factor(Relative_abundance_bacteria_family_per_sample$Method, levels = c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6","DirectSM_H7","SM_H7"))


bacteria_family_plot <- ggplot(Relative_abundance_bacteria_family_per_sample, aes(x=value, y=Method, fill=variable)) + geom_bar(position = "fill",stat = "identity", width = 0.4) + theme_bw() + scale_x_continuous(labels = c(0,25,50,75,100)) + theme(legend.position = "bottom") + labs(x="Relative abundance (%)", y="", fill = "Family") + scale_fill_viridis_d()
bacteria_family_plot

ggsave(plot=bacteria_family_plot, filename="bacteria_family_plot.png", path = "C:/Users/user/Desktop/data_frames/comparison", width = 10)


#Genus
Relative_abundance_bacteria_genus_per_sample <- Relative_abundance_bacteria %>% select(.,-c("Superkingdom","Kingdom","Order","Class","Family","Species","Phylum")) %>% filter(rowSums(select(.,-Genus)) > 0) %>% group_by(.,Genus) %>% summarise_all(sum) %>% as.data.frame() %>% tidyr::drop_na() %>% t() %>% as.data.frame() %>% janitor::row_to_names(row_number = 1) %>% tibble::rownames_to_column(var="Method") %>% reshape2::melt(.,id.vars = "Method")
Relative_abundance_bacteria_genus_per_sample$value <- as.numeric(Relative_abundance_bacteria_genus_per_sample$value)
Relative_abundance_bacteria_genus_per_sample$Method <- factor(Relative_abundance_bacteria_genus_per_sample$Method, levels = c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6","DirectSM_H7","SM_H7"))


bacteria_genus_plot <- ggplot(Relative_abundance_bacteria_genus_per_sample, aes(x=value, y=Method, fill=variable)) + geom_bar(position = "fill",stat = "identity", width = 0.4) + theme_bw() + scale_x_continuous(labels = c(0,25,50,75,100)) + theme(legend.position = "bottom") + labs(x="Relative abundance (%)", y="", fill = "Genus") + scale_fill_viridis_d()

ggsave(plot=bacteria_genus_plot, filename="bacteria_genus_plot.png", path = "C:/Users/user/Desktop/data_frames/comparison", width = 10)


#Specific genera
bacteria_genera <- c("Gilliamella","Snodgrassella","Bifidobacterium","Lactobacillus","Bartonella","Frischella")

bacteria_specific_species <- c("Snodgrassella alvi","Lactobacillus apis","Lactobacillus helsingborgensis","Lactobacillus melliventris","Lactobacillus Lactobacillus kullabergensis","Lactobacillus kimbladii","Lactobacillus mellis", "Lactobacillus mellifer","Gilliamella apicola","Gilliamella apis","Bifidobacterium asteroides","Bifidobacterium indicum","Bifidobacterium coryneforme","Bartonella apis","Frischella perrara","Commensalibacter intestini")


specific_genera <- Counts_with_taxonomy_with_Hive7 %>% filter(Genus %in% bacteria_genera)
specific_species <- Counts_with_taxonomy_with_Hive7 %>% filter(Species %in% bacteria_specific_species)

Relative_abundance_specific_species <- specific_species %>% select(.,-c("Superkingdom","Kingdom","Order","Class","Family","Genus","Phylum")) %>% filter(rowSums(select(.,-Species)) > 0) %>% group_by(.,Species) %>% summarise_all(sum) %>% as.data.frame() %>% tidyr::drop_na() %>% t() %>% as.data.frame() %>% janitor::row_to_names(row_number = 1) %>% tibble::rownames_to_column(var="Method") %>% reshape2::melt(.,id.vars = "Method")

Relative_abundance_specific_species$value <- as.numeric(Relative_abundance_specific_species$value)
Relative_abundance_specific_species$Method <- factor(Relative_abundance_specific_species$Method, levels = c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6","DirectSM_H7","SM_H7"))

bacteria_specific_species2 <- ggplot(Relative_abundance_specific_species, aes(x=Method, y=value, fill=variable)) + geom_bar(stat = "identity", width = 0.4) + theme_bw() + scale_y_continuous() + theme(legend.position = "bottom") + labs(y="Relative abundance (%)", x="", fill = "Species") 

ggsave(plot=bacteria_specific_species2, filename="bacteria_specific_species2.png", path = "C:/Users/user/Desktop/", width = 15)


Relative_abundance_specific_genus <- specific_genera %>% select(.,-c("Superkingdom","Kingdom","Order","Class","Family","Species","Phylum")) %>% filter(rowSums(select(.,-Genus)) > 0) %>% group_by(.,Genus) %>% summarise_all(sum) %>% as.data.frame() %>% tidyr::drop_na() %>% t() %>% as.data.frame() %>% janitor::row_to_names(row_number = 1) %>% tibble::rownames_to_column(var="Method") %>% reshape2::melt(.,id.vars = "Method")
Relative_abundance_specific_genus$value <- as.numeric(Relative_abundance_specific_genus$value)
Relative_abundance_specific_genus$Method <- factor(Relative_abundance_specific_genus$Method, levels = c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6","DirectSM_H7","SM_H7"))

bacteria_specific_genus <- ggplot(Relative_abundance_specific_genus, aes(x=Method, y=value, fill=variable)) + geom_bar(position = "fill",stat = "identity", width = 0.4) + theme_bw() + scale_y_continuous(labels = c(0,25,50,75,100)) + theme(legend.position = "bottom") + labs(y="Relative abundance (%)", x="", fill = "Genus") + scale_fill_viridis_d()

ggsave(plot=bacteria_specific_genus, filename="bacteria_specific_genus.png", path = "C:/Users/user/Desktop/data_frames/comparison")

bacteria_specific_genus

genus_without_lactobacillus <- specific_genera %>% select(.,-c("Superkingdom","Kingdom","Order","Class","Family","Species","Phylum")) %>% filter(rowSums(select(.,-Genus)) > 0) %>% group_by(.,Genus) %>% summarise_all(sum) %>% as.data.frame() %>% tidyr::drop_na() %>% filter(!str_detect(Genus,"Lactobacillus")) %>% t() %>% as.data.frame() %>% janitor::row_to_names(row_number = 1) %>% tibble::rownames_to_column(var="Method") %>% reshape2::melt(.,id.vars = "Method")
genus_without_lactobacillus$value <- as.numeric(genus_without_lactobacillus$value)
genus_without_lactobacillus$Method <- factor(genus_without_lactobacillus$Method, levels = c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6","DirectSM_H7","SM_H7"))

bacteria_wo_lact <- ggplot(genus_without_lactobacillus, aes(x=Method, y=value, fill=variable)) + geom_bar(position = "fill",stat = "identity", width = 0.4) + theme_bw() + scale_y_continuous(labels = c(0,25,50,75,100)) + theme(legend.position = "bottom") + labs(y="Relative abundance (%)", x="", fill = "Genus") + scale_fill_viridis_d()
bacteria_wo_lact

ggsave(plot=bacteria_wo_lact, filename="bacteria_wo_lact.png", path = "C:/Users/user/Desktop/data_frames/comparison")

# Keep only the Direct Methods
only_sm_wo_lact <- genus_without_lactobacillus %>% filter(!str_detect(Method,"Direct"))
only_sm_wo_lact$Method <- factor(only_sm_wo_lact$Method, levels = c("SM_H5","SM_H6","SM_H7","SM_H4"))
levels(only_sm_wo_lact$Method) <- c("May (H5)","July (H6)","July (H7)","November (H4)")


only_direct_wo_lact <- genus_without_lactobacillus %>% filter(str_detect(Method,"Direct"))
only_direct_wo_lact$Method <- factor(only_direct_wo_lact$Method, levels = c("DirectSM_H5","DirectSM_H6","DirectSM_H7","DirectSM_H4"))
levels(only_direct_wo_lact$Method) <- c("May (H5)","July (H6)","July (H7)","November (H4)")


direct <- ggplot(only_direct_wo_lact, aes(x=Method, y=value, fill=variable)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + scale_y_continuous(labels = c(0,25,50,75,100)) + theme(legend.position = "right", aspect.ratio = 1.5, text = element_text(size=15),axis.text.x = element_text(angle=45, hjust=1, size = 13), legend.title = element_text(size = 13)) + scale_fill_viridis_d() + labs(x= "",y="Relative abundance (%)", title = "Relative abundance of specific Genera", fill="Genus")

ggsave(direct,path="C:/Users/user/Desktop",filename="direct.png",width=10,height = 10)


sm_wo_lact <- ggplot(only_sm_wo_lact, aes(x=Method, y=value, fill=variable)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + scale_y_continuous(labels = c(0,25,50,75,100)) + theme(legend.position = "right", aspect.ratio = 1.5, text = element_text(size=15),axis.text.x = element_text(angle=45, hjust=1, size = 13), legend.title = element_text(size = 13)) + scale_fill_viridis_d() + labs(x= "",y="Relative abundance (%)", title = "Relative abundance of specific Genera", fill="Genus")

ggsave(sm_wo_lact,path="C:/Users/user/Desktop/data_frames/comparison",filename="sm_wo_lact.png",width=10,height = 10)


#Using absolute counts
bacteria_absolute <- Counts_with_taxonomy_with_Hive7_no_rel %>% tibble::rownames_to_column(var = "Taxonomic_ID") %>% filter(Superkingdom == "Bacteria",) %>% tibble::column_to_rownames("Taxonomic_ID")

bacteria_genera_abs <- c("Gilliamella","Snodgrassella","Bifidobacterium","Lactobacillus","Bartonella","Frischella")
specific_genera_abs <- bacteria_absolute %>% filter(Genus %in% bacteria_genera)

specific_genus_abs <- specific_genera_abs %>% select(.,-c("Superkingdom","Kingdom","Order","Class","Family","Species","Phylum")) %>% filter(rowSums(select(.,-Genus)) > 0) %>% group_by(.,Genus) %>% summarise_all(sum) %>% as.data.frame() %>% tidyr::drop_na() %>% t() %>% as.data.frame() %>% janitor::row_to_names(row_number = 1) %>% tibble::rownames_to_column(var="Method") %>% reshape2::melt(.,id.vars = "Method") %>% filter(!str_detect(variable,"Lactobacillus"))
specific_genus_abs$value <- as.numeric(specific_genus_abs$value)
specific_genus_abs$Method <- factor(specific_genus_abs$Method, levels = c("DirectSM_H4","SM_H4","DirectSM_H5","SM_H5","DirectSM_H6", "SM_H6","DirectSM_H7","SM_H7"))

bacteria_specific_genus_abs <- ggplot(specific_genus_abs, aes(x=Method, y=value, fill=variable)) + geom_bar(position = "fill",stat = "identity", width = 0.4) + theme_bw() + scale_y_continuous(labels = c(0,25,50,75,100)) + theme(legend.position = "right", aspect.ratio = 1.5, text = element_text(size=15),axis.text.x = element_text(angle=45, hjust=1, size = 13), legend.title = element_text(size = 13)) + scale_fill_viridis_d() + labs(x= "",y="Relative abundance (%)", title = "Relative abundance of specific Genera", fill="Genus")
bacteria_specific_genus_abs

```

weather data
```{r}

weather <- read.csv("C:/Users/user/Desktop/weather.csv")

weather$DAY <- as.Date(weather$DAY, format = "%d/%m/%Y")

temperature_plot <- ggplot(weather, aes(x = DAY, y = MEAN..TEMP)) + geom_line() + geom_ribbon(aes(x = DAY, ymax = HIGH, ymin = LOW), alpha = 0.6, fill = "tan2") + labs(x = "", y = "Temperature (°C)") + theme_bw() + geom_vline(xintercept = weather$DAY[121], size = 1.5, linetype = "dotted", color = "black") + geom_vline(xintercept = weather$DAY[182], size = 1.5, linetype = "dotted", color = "black") + geom_vline(xintercept = weather$DAY[305], size = 1.5, linetype = "dotted", color = "black") + annotate("text", x =  weather$DAY[111], y = 3, label = "Hive 5", angle = 90) + annotate("text", x =  weather$DAY[172], y = 3, label = "Hive 6 and 7", angle = 90) + annotate("text", x =  weather$DAY[295], y = 3, label = "Hive 4", angle = 90)
temperature_plot

ggsave(plot=temperature_plot, filename="temperature_plot.png",path="C:/Users/user/Desktop/data_frames/comparison", width = 9)

rain_plot <- ggplot(weather, aes(x = DAY, y = RAIN)) + geom_line(color="steelblue1") + theme_bw() + labs(x = "", y = "") + geom_vline(xintercept = weather$DAY[121], size = 1.5, linetype = "dotted", color = "black") + geom_vline(xintercept = weather$DAY[182], size = 1.5, linetype = "dotted", color = "black") + geom_vline(xintercept = weather$DAY[305], size = 1.5, linetype = "dotted", color = "black") + annotate("text", x =  weather$DAY[111], y = 60, label = "Hive 5", angle = 90) + annotate("text", x =  weather$DAY[172], y = 60, label = "Hive 6 and 7", angle = 90) + annotate("text", x =  weather$DAY[295], y = 60, label = "Hive 4", angle = 90) + labs(y="Rainfall (mm)")
rain_plot
ggsave(plot=rain_plot, filename="rain_plot.png",path="C:/Users/user/Desktop/data_frames/comparison", width = 9)


wind_plot <- ggplot(weather, aes(x = DAY, y = AVG.WIIND.SPEED)) + geom_line(color="orange4") + theme_bw() + labs(x = "", y = "Speed (km/h)") + geom_vline(xintercept = weather$DAY[121], size = 1.5, linetype = "dotted", color = "black") + geom_vline(xintercept = weather$DAY[182], size = 1.5, linetype = "dotted", color = "black") + geom_vline(xintercept = weather$DAY[305], size = 1.5, linetype = "dotted", color = "black")  + annotate("text", x =  weather$DAY[111], y = 25, label = "Hive 5", angle = 90) + annotate("text", x =  weather$DAY[172], y = 25, label = "Hive 6 and 7", angle = 90) + annotate("text", x =  weather$DAY[295], y = 25, label = "Hive 4", angle = 90)
wind_plot

ggsave(plot=wind_plot, filename="wind_plot.png",path="C:/Users/user/Desktop/data_frames/comparison", width = 9)


resh_weat <- weather %>% select(., c("DAY","AVG.WIIND.SPEED","RAIN","MEAN..TEMP")) %>% reshape2::melt(., id.vars = "DAY")
resh_weat$value <- as.numeric(resh_weat$value)
all_plot <- ggplot(resh_weat, aes(x = DAY, y = value, group = variable, color = variable)) + geom_line() + theme_bw() + labs(x = "", y = "")
all_plot


simulations_tree <- read.mega("C:/Users/user/Desktop/correcttree.nexus")


annotated_tree_simulations <- ggtree(simulations_tree) + geom_cladelabel(node=67, label="Eukaryota", align=T, fontsize=8, offset = 16) + geom_cladelabel(node=87, label="Bacteria", align=T, fontsize=8, offset = 16) + geom_cladelabel(node=66, label="Viruses", align=T, fontsize=8, offset = 16) + geom_tiplab(align = TRUE, offset = 1, label = gsub("_", " ", simulations_tree@phylo[["tip.label"]]), fontface="italic") + xlim(c(0,50)) + geom_balance(node=76, fill='green', color='white', alpha=0.3, extend=1) + geom_hilight(node=87, fill="brown", alpha = 0.2, extend = 5) + geom_hilight(node=67, fill="lightblue", alpha = 0.3, extend = 1) + geom_hilight(node=66, fill="violet", alpha = 0.2, extend = 21)

ggsave(plot=annotated_tree_simulations,filename="annotatedtree.png", height = 15, width = 11)
```


```{r}
  
organisms_simulation <- read.csv("C:/Users/user/Desktop/data_frames/simulation/organisms.csv")
organisms_simulation$Genome_size <- as.numeric(levels(organisms$Genome_size))[organisms$Genome_size]
neworganisms_simulation <- organisms_simulation[-1]
neworganisms_simulation$Genome_size[46] <- 22103.6
neworganisms_simulation$Genome_size <- log10(neworganisms_simulation$Genome_size)
neworganisms_simulation$Species <- gsub(" ", "_", neworganisms_simulation$Species, fixed = TRUE)


facet_tree_simulation <- ggtree(simulations_tree)

first_plot <- facet_plot(facet_tree_simulation, panel = "Genome size (Mb; log10)", data = organisms_simulation, aes(x=Genome_size), geom = geom_point) + xlim_expand(c(-3, 5), panel = "Genome size (Mb; log10)") + geom_tiplab(align = TRUE, parse = FALSE, size=3, label = gsub("_", " ", simulations_tree@phylo[["tip.label"]]), fontface="italic") + xlim_tree(c(0,350)) + theme_tree2() 
final_facet_tree_simulation <- first_plot + geom_facet(panel = "GC content (%)", data = organisms_simulation, aes(x=GC_count), geom = geom_point)

facet_widths(final_facet_tree_simulation, c(Tree = 0.5))
ggsave(plot=final_facet_tree_simulation, filename="treeplot2.png", height = 10, width = 8)

```



export files
```{r}
genus_counts_rounded <- round(Hives_normalised_counts_genus, digits = 0)
species_counts_rounded <- round(Hives_normalised_counts_species, digits = 0)



genus_with_taxonomy <- classification_phyloseq(genus_counts_rounded)
species_with_taxonomy <- classification_phyloseq(species_counts_rounded)


write.csv(genus_with_taxonomy, file = "C:/Users/user/Desktop/normalised_counts_genus_with_taxonomy.csv")
write.csv(species_with_taxonomy, file = "C:/Users/user/Desktop/normalised_counts_species_with_taxonomy.csv")


genus_rounded <- as.data.frame(genus_with_taxonomy) %>% select(.[,1:6]) round(), digits = 0)

```


```{r}
setwd("C:/Users/user/Desktop/data_frames/simulations")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_kraken2_mocks <- list.files(path = "C:/Users/user/Desktop/data_frames/simulations",pattern = "\\.tsv",full.names = T)

kraken2_files_mocks <- lapply(import_kraken2_mocks, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,-c(1)]
})

naming_list_kraken2_mocks <- list.files(path = "C:/Users/user/Desktop/data_frames/simulations",pattern = "\\.tsv")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

kraken2_files_mocks <- setNames(kraken2_files_mocks, substring(naming_list_kraken2_mocks, first  = 1, last = nchar(naming_list_kraken2_mocks) -4))

kraken2_files_mocks = lapply(kraken2_files_mocks,setNames,kraken2_output_names)

kraken2_files_mocks = lapply(kraken2_files_mocks,arrange, Taxonomic_ID)


# Optionally add the relative abundance as well
kraken2_files_mocks = lapply(kraken2_files_mocks, function(df) {
  df$Relative_abundance = df$Sample_reads / df[2,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,2] * 100;
  return(df)
})

kraken2_files_mocks_filtered <- kraken2_files_mocks %>% lapply(filter, Taxonomic_ID %in% names_filtering_mocks)

kraken2_files_mocks_filtered_genus <- lapply(kraken2_files_mocks_filtered,"[" , c("Taxonomic_ID","Sample_reads"))
kraken2_files_mocks_filtered_species <- lapply(kraken2_files_mocks_filtered, "[", c("Taxonomic_ID","Relative_abundance"))


Hives_no_Hive7_genus <- lapply(names(kraken2_files_filter_no_Hive7_genus), function(x){
  colnames(kraken2_files_filter_no_Hive7_genus[[x]]) <- c(x,"Taxonomic_ID")
  kraken2_files_filter_no_Hive7_genus[[x]]
})
names(Hives_no_Hive7_genus) <- names(kraken2_files_filter_no_Hive7_genus) 

Mocks_species <- lapply(names(kraken2_files_mocks_filtered_species), function(x){
  colnames(kraken2_files_mocks_filtered_species[[x]]) <- c("Taxonomic_ID",x)
  kraken2_files_mocks_filtered_species[[x]]
})
names(Mocks_species) <- names(kraken2_files_mocks_filtered_species) 


Hives_comparison_no_Hive7_genus <- Hives_no_Hive7_genus %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.),0))

Mocks_species_combined <- Mocks_species %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))


import_composition <- list.files(path = "C:/Users/user/Desktop/data_frames/simulations",pattern = "\\.txt",full.names = T)
variable_names_compositions <- c("Taxonomic_ID", "File_name","True_reads")


Mocks_composition <- lapply(import_composition, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE,
              stringsAsFactors = FALSE)
})

naming_list_compositions <- list.files(path = "C:/Users/user/Desktop/data_frames/simulations",pattern = "\\.txt")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

Mocks_composition <- setNames(Mocks_composition, substring(naming_list_compositions, first  = 1, last = nchar(naming_list_compositions) -4))

Mocks_composition = lapply(Mocks_composition,setNames,variable_names_compositions)


Mocks_compositions <- lapply(Mocks_composition, "[", c(1,3))

Mocks_compositions_2 <- lapply(names(Mocks_compositions), function(x){
  colnames(Mocks_compositions[[x]]) <- c("Taxonomic_ID",x)
  Mocks_compositions[[x]]
})
names(Mocks_compositions_2) <- names(Mocks_compositions) 

Mocks_compositions_combined <- Mocks_compositions_2 %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

Mocks_compositions_combined = Mocks_compositions_combined[-1,]
rownames(Mocks_compositions_combined) <- NULL

Mocks_compositions_combined <- column_to_rownames(Mocks_compositions_combined, var = "Taxonomic_ID")
indx <- sapply(Mocks_compositions_combined, is.character)
Mocks_compositions_combined[indx] <- lapply(Mocks_compositions_combined[indx], function(x) as.numeric(as.character(x)))
Mocks_compositions_combined = rownames_to_column(Mocks_compositions_combined, var = "Taxonomic_ID")

# Add relative abundance
Mocks_compositions_combined = mutate_if(Mocks_compositions_combined, is.numeric ,funs((./sum(.))*100))

# Now merge classified mocks with true composition
Mocks_compositions_combined$Taxonomic_ID = as.numeric(Mocks_compositions_combined$Taxonomic_ID)

# Mocks composition without Apis mellifera and Homo sapiens

Mocks_compositions_3 <- Mocks_compositions_2 %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

Mocks_compositions_3 = Mocks_compositions_3[-1,]
rownames(Mocks_compositions_3) <- NULL

Mocks_compositions_3 <- column_to_rownames(Mocks_compositions_3, var = "Taxonomic_ID")
indx <- sapply(Mocks_compositions_3, is.character)
Mocks_compositions_3[indx] <- lapply(Mocks_compositions_3[indx], function(x) as.numeric(as.character(x)))
Mocks_compositions_3 = rownames_to_column(Mocks_compositions_3, var = "Taxonomic_ID")
Mocks_compositions_4 <- Mocks_compositions_3 %>% filter(!Taxonomic_ID %in% c(9606,7460))

# Add relative abundance
Mocks_compositions_4 = mutate_if(Mocks_compositions_4, is.numeric ,funs((./sum(.))*100))

# Now merge classified mocks with true composition
Mocks_compositions_4$Taxonomic_ID = as.numeric(Mocks_compositions_4$Taxonomic_ID)

# Import clean mocks

setwd("C:/Users/user/Desktop/data_frames/simulations/clean")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_kraken2_mocks_clean <- list.files(path = "C:/Users/user/Desktop/data_frames/simulations/clean",pattern = "\\.tsv",full.names = T)

kraken2_files_mocks_clean <- lapply(import_kraken2_mocks_clean, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,-c(1)]
})

naming_list_kraken2_mocks_clean <- list.files(path = "C:/Users/user/Desktop/data_frames/simulations/clean",pattern = "\\.tsv")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

kraken2_files_mocks_clean <- setNames(kraken2_files_mocks_clean, substring(naming_list_kraken2_mocks_clean, first  = 1, last = nchar(naming_list_kraken2_mocks_clean) -4))

kraken2_files_mocks_clean = lapply(kraken2_files_mocks_clean,setNames,kraken2_output_names)

kraken2_files_mocks_clean = lapply(kraken2_files_mocks_clean,arrange, Taxonomic_ID)


# Optionally add the relative abundance as well
kraken2_files_mocks_clean = lapply(kraken2_files_mocks_clean, function(df) {
  df$Relative_abundance = df$Sample_reads / df[2,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,2] * 100;
  return(df)
})

names_filtering_clean <- Mocks_compositions_4$Taxonomic_ID

kraken2_files_mocks_filtered_clean <- kraken2_files_mocks_clean %>% lapply(filter, Taxonomic_ID %in% names_filtering_clean)

kraken2_files_mocks_filtered_clean_species <- lapply(kraken2_files_mocks_filtered_clean, "[", c("Taxonomic_ID","Relative_abundance"))

Mocks_clean_species <- lapply(names(kraken2_files_mocks_filtered_clean_species), function(x){
  colnames(kraken2_files_mocks_filtered_clean_species[[x]]) <- c("Taxonomic_ID",x)
  kraken2_files_mocks_filtered_clean_species[[x]]
})
names(Mocks_clean_species) <- names(kraken2_files_mocks_filtered_clean_species) 

Mocks_species_clean_combined <- Mocks_clean_species %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))


mocks_with_true_abundance <- dplyr::full_join(Mocks_species_combined, Mocks_compositions_combined, by ="Taxonomic_ID") %>% mutate_all(~replace(., is.na(.), 0))


mocks_clean_with_true_abundance <- dplyr::full_join(Mocks_compositions_4, Mocks_species_clean_combined, by = "Taxonomic_ID") %>% mutate_all(~replace(., is.na(.), 0))

rmse_evaluation <- function(df, expected, observed){ 
  require("dplyr")
  require("hydroGOF")
      rmse_value <- rmse(expected,observed)
      return(rmse_value)
}

trialfr <- mocks_with

Mock1 <- rmse_evaluation(mocks_with_true_abundance, mocks_with_true_abundance$Mock_1, mocks_with_true_abundance$Mock_1_composition)
Mock2 <- rmse_evaluation(mocks_with_true_abundance, mocks_with_true_abundance$Mock_2, mocks_with_true_abundance$Mock_2_composition)
Mock3 <- rmse_evaluation(mocks_with_true_abundance, mocks_with_true_abundance$Mock_3, mocks_with_true_abundance$Mock_3_composition)
Mock4 <- rmse_evaluation(mocks_with_true_abundance, mocks_with_true_abundance$Mock_4, mocks_with_true_abundance$Mock_4_composition)

Mock1_removed <- rmse_evaluation(mocks_clean_with_true_abundance, mocks_clean_with_true_abundance$Mock_1_composition, mocks_clean_with_true_abundance$unmatched_Mock_1_kraken2)
Mock2_removed <- rmse_evaluation(mocks_clean_with_true_abundance, mocks_clean_with_true_abundance$Mock_2_composition, mocks_clean_with_true_abundance$unmatched_Mock_2_kraken2)
Mock3_removed <- rmse_evaluation(mocks_clean_with_true_abundance, mocks_clean_with_true_abundance$Mock_3_composition, mocks_clean_with_true_abundance$unmatched_Mock_3_kraken2)
Mock4_removed <- rmse_evaluation(mocks_clean_with_true_abundance, mocks_clean_with_true_abundance$Mock_4_composition, mocks_clean_with_true_abundance$unmatched_Mock_4_kraken2)


depth_vs_contamination <- read.csv("C:/Users/user/Desktop/data_frames/simulations/rmse_anova.csv")
str(depth_vs_contamination)

aov.out = aov(RMSE ~ Depth * Host_contamination, data=depth_vs_contamination)
options(show.signif.stars=T)
summary(aov.out)
TukeyHSD(aov.out)
bartlett.test(RMSE ~ Depth * Host_contamination, data=depth_vs_contamination)

with(depth_vs_contamination, interaction.plot(x.factor = Depth, trace.factor = Host_contamination, response = RMSE, fun = "mean", type="b",legend = T))
  
ggboxplot(depth_vs_contamination, x = "Depth", y = "RMSE", color = "Host_contamination") + ylim(0,6)



names_filtering_mocks <- organisms$Taxid

vector1 <- as.data.frame(mocks_with_true_abundance$Mock_2)
vector2 <- as.data.frame(mocks_with_true_abundance$Mock_2_composition)

distancematrix <- as.data.frame(cbind(vector1,vector2))
distances <- rdist(distancematrix, metric = "euclidean", p = 2)
mean(distances)
library(reshape2)
distancesframe <- melt(as.matrix(distances), varnames = c("row", "col"))

euc.dist <- function(x1, x2) sqrt(sum((x1 - x2) ^ 2))


dist <- NULL
for(i in 1:nrow(vector1)) dist[i] <- euc.dist(vector1[i,],vector2[i,])
dist <- euc.dist(vector1,vector2)
mean(dist)

dist1 <- dplyr::dist
```



```{r}
setwd("C:/Users/user/Desktop/zerothreshold/")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_kraken2_bracken <- list.files(path = "C:/Users/user/Desktop/zerothreshold/",full.names = T, pattern = "\\.kraken2")

kraken2_files_bracken <- lapply(import_kraken2_bracken, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,c(-1)]
})

naming_list_kraken2_bracken <- list.files(path = "C:/Users/user/Desktop/zerothreshold/", pattern = "\\.kraken2")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

kraken2_files_bracken <- setNames(kraken2_files_bracken, substring(naming_list_kraken2_bracken, first  = 1, last = nchar(naming_list_kraken2_bracken) -8))

kraken2_files_bracken = lapply(kraken2_files_bracken,setNames,kraken2_output_names)

kraken2_files_bracken = lapply(kraken2_files_bracken,arrange, Taxonomic_ID)


# Optionally add the relative abundance as well
kraken2_files_bracken = lapply(kraken2_files_bracken, function(df) {
  df$Relative_abundance = df$Sample_reads / df[2,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,2] * 100;
  return(df)
})

names_filtering_clean <- Mocks_compositions_4$Taxonomic_ID

kraken2_files_bracken_filtered <- kraken2_files_bracken %>% lapply(filter, Taxonomic_ID %in% names_filtering_clean)

kraken2_files_bracken_filtered_abundance <- lapply(kraken2_files_bracken_filtered, "[", c("Taxonomic_ID","Relative_abundance"))

bracken_species <- lapply(names(kraken2_files_bracken_filtered_abundance), function(x){
  colnames(kraken2_files_bracken_filtered_abundance[[x]]) <- c("Taxonomic_ID",x)
  kraken2_files_bracken_filtered_abundance[[x]]
})
names(bracken_species) <- names(kraken2_files_bracken_filtered_abundance) 

bracken_species_combined <- bracken_species %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

setwd("C:/Users/user/Desktop/zerothreshold/realcomposition")


import_bracken_mocks <- list.files(path = "C:/Users/user/Desktop/zerothreshold/realcomposition",full.names = T)

bracken_mocks <- lapply(import_bracken_mocks, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = TRUE,
              strip.white = TRUE)
})

naming_list_bracken_mocks <- list.files(path = "C:/Users/user/Desktop/zerothreshold/realcomposition")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

bracken_mocks <- setNames(bracken_mocks, substring(naming_list_bracken_mocks, first  = 1, last = nchar(naming_list_bracken_mocks) -4))

bracken_mocks1 <- lapply(bracken_mocks, "[", c(1,3))

bracken_mocks2 <- lapply(names(bracken_mocks1), function(x){
  colnames(bracken_mocks1[[x]]) <- c("Taxonomic_ID",x)
  bracken_mocks1[[x]]
})
names(bracken_mocks2) <- names(bracken_mocks1) 

bracken_mocks_combined <- bracken_mocks2 %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))
bracken_mocks_ab <- bracken_mocks_combined %>% filter(!Taxonomic_ID %in% c(9606,7460))


bracken_mocks_abb <- bracken_mocks_ab %>% mutate_at(c("Mock_5_composition","Mock_6_composition","Mock_7_composition","Mock_8_composition"), funs((./sum(.))*100))


bracken_mocks_with_true <- dplyr::full_join(bracken_species_combined, bracken_mocks_abb, by ="Taxonomic_ID") %>% mutate_all(~replace(., is.na(.), 0))

Mock_5_005 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence005_unmatched_Mock_5_bracken, bracken_mocks_with_true$Mock_5_composition)
Mock_5_01 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence01_unmatched_Mock_5_bracken, bracken_mocks_with_true$Mock_5_composition)
Mock_5_02 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence02_unmatched_Mock_5_bracken, bracken_mocks_with_true$Mock_5_composition)
Mock_5_03 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence03_unmatched_Mock_5_bracken, bracken_mocks_with_true$Mock_5_composition)
Mock_5_04 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence04_unmatched_Mock_5_bracken, bracken_mocks_with_true$Mock_5_composition)
Mock_5_05 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence05_unmatched_Mock_5_bracken, bracken_mocks_with_true$Mock_5_composition)
Mock_5_06 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence06_unmatched_Mock_5_bracken, bracken_mocks_with_true$Mock_5_composition)
Mock_5_07 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence07_unmatched_Mock_5_bracken, bracken_mocks_with_true$Mock_5_composition)
Mock_5_08 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence08_unmatched_Mock_5_bracken, bracken_mocks_with_true$Mock_5_composition)
Mock_5_09 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence09_unmatched_Mock_5_bracken, bracken_mocks_with_true$Mock_5_composition)

Mock_6_005 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence005_unmatched_Mock_6_bracken, bracken_mocks_with_true$Mock_6_composition)
Mock_6_01 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence01_unmatched_Mock_6_bracken, bracken_mocks_with_true$Mock_6_composition)
Mock_6_02 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence02_unmatched_Mock_6_bracken, bracken_mocks_with_true$Mock_6_composition)
Mock_6_03 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence03_unmatched_Mock_6_bracken, bracken_mocks_with_true$Mock_6_composition)
Mock_6_04 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence04_unmatched_Mock_6_bracken, bracken_mocks_with_true$Mock_6_composition)
Mock_6_05 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence05_unmatched_Mock_6_bracken, bracken_mocks_with_true$Mock_6_composition)
Mock_6_06 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence06_unmatched_Mock_6_bracken, bracken_mocks_with_true$Mock_6_composition)
Mock_6_07 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence07_unmatched_Mock_6_bracken, bracken_mocks_with_true$Mock_6_composition)
Mock_6_08 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence08_unmatched_Mock_6_bracken, bracken_mocks_with_true$Mock_6_composition)
Mock_6_09 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence09_unmatched_Mock_6_bracken, bracken_mocks_with_true$Mock_6_composition)

Mock_7_005 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence005_unmatched_Mock_7_bracken, bracken_mocks_with_true$Mock_7_composition)
Mock_7_01 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence01_unmatched_Mock_7_bracken, bracken_mocks_with_true$Mock_7_composition)
Mock_7_02 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence02_unmatched_Mock_7_bracken, bracken_mocks_with_true$Mock_7_composition)
Mock_7_03 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence03_unmatched_Mock_7_bracken, bracken_mocks_with_true$Mock_7_composition)
Mock_7_04 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence04_unmatched_Mock_7_bracken, bracken_mocks_with_true$Mock_7_composition)
Mock_7_05 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence05_unmatched_Mock_7_bracken, bracken_mocks_with_true$Mock_7_composition)
Mock_7_06 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence06_unmatched_Mock_7_bracken, bracken_mocks_with_true$Mock_7_composition)
Mock_7_07 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence07_unmatched_Mock_7_bracken, bracken_mocks_with_true$Mock_7_composition)
Mock_7_08 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence08_unmatched_Mock_7_bracken, bracken_mocks_with_true$Mock_7_composition)
Mock_7_09 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence09_unmatched_Mock_7_bracken, bracken_mocks_with_true$Mock_7_composition)

Mock_8_005 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence005_Mock_8, bracken_mocks_with_true$Mock_8_composition)
Mock_8_01 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence01_bracken, bracken_mocks_with_true$Mock_8_composition)
Mock_8_02 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence02_bracken, bracken_mocks_with_true$Mock_8_composition)
Mock_8_03 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence03_bracken, bracken_mocks_with_true$Mock_8_composition)
Mock_8_04 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence04_bracken, bracken_mocks_with_true$Mock_8_composition)
Mock_8_05 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence05_bracken, bracken_mocks_with_true$Mock_8_composition)
Mock_8_06 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence06_bracken, bracken_mocks_with_true$Mock_8_composition)
Mock_8_07 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence07_bracken, bracken_mocks_with_true$Mock_8_composition)
Mock_8_08 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence08_bracken, bracken_mocks_with_true$Mock_8_composition)
Mock_8_09 <- rmse_evaluation(bracken_mocks_with_true, bracken_mocks_with_true$confidence09_bracken, bracken_mocks_with_true$Mock_8_composition)

allmocks <- mget(ls(pattern="^Mock_\\d+\\_")) %>% bind_cols() %>% t() %>% as.data.frame() %>% tibble::rownames_to_column(., var = "Sample")
allmocks$Mock <- rep(5:8, each=10)
allmocks$Confidence <- rep(c(0.05,seq(from=0.1,to=0.9,by=0.1)))
allmocks_new <- allmocks %>% rename(., RMSE = V1)


boxplot1 <- ggboxplot(allmocks_new, x = "Confidence", y = "RMSE", add = "jitter", color = "Confidence", palette = get_palette("npg",10)) + theme_minimal() + ylim(0,8) + rremove("legend") + theme(text = element_text(size=15))

ggsave(plot=boxplot1,filename="boxplot_rmse.png", width = 12)

anova_mocks <- allmocks_new
anova_mocks$Confidence <- as.factor(anova_mocks$Confidence)
res.aov <- aov(RMSE ~ Confidence, data = anova_mocks)
# Summary of the analysis
summary(res.aov)
TukeyHSD(res.aov)


onlyspeciesbracken <- kraken2_files_bracken %>% lapply(filter, Rank_code == "S")
numberofspecies <- as.data.frame(sapply(onlyspeciesbracken, nrow)) %>% tibble::rownames_to_column(var = "Sample")
numberofspecies$Mock <- c(8,rep(5:7))
numberofspecies$Confidence <- rep(c(0.05,seq(from=0.1,to=0.9,by=0.1)), each=4)
numberofspecies_new <- numberofspecies %>% rename(., Number_of_species = names(numberofspecies[2])) %>% select(., -Sample)
numberofspecies_new$Mock <- factor(numberofspecies_new$Mock)
#
numberofspecies_all_mocks <- rbind(numberofspecies_new,numberofspecies_previous_new)

dataplotomocks <- ggline(numberofspecies_all_mocks, "Confidence", "Number_of_species",
   linetype = "Mock", shape = "Mock",
   color = "Mock") + geom_hline(yintercept = 64, linetype = "dashed") + theme_bw() + labs(x="Confidence",y="Number of species") + theme(text = element_text(size=15))

ggsave(plot=dataplotomocks,filename="number_of_species_per_confidence.png", width = 13)

onlyspeciesprevious <- kraken2_files_bracken2_previous %>% lapply(filter, Rank_code == "S")
numberofspecies_previous <- as.data.frame(sapply(onlyspeciesprevious, nrow)) %>% tibble::rownames_to_column(var = "Sample")
numberofspecies_previous$Mock <- c(rep(c("Plant","All","Others"), each = 10))
numberofspecies_previous$Confidence  <- rep(c(0.05,seq(from=0.1,to=0.9,by=0.1)))
numberofspecies_previous$Mock <- as.factor(numberofspecies_previous$Mock)
numberofspecies_previous_new <- numberofspecies_previous %>% rename(., Number_of_species = names(numberofspecies_previous[2])) %>% select(., -Sample)
numberofspecies_previous_new$Mock <- factor(numberofspecies_previous_new$Mock)



```

L2 distance vectors

```{r}
vector5005 <- as.data.frame(bracken_mocks_with_true$confidence005_unmatched_Mock_5_bracken)
vector5 <- as.data.frame(bracken_mocks_with_true$Mock_5_composition)
dist5005 <- NULL
for(i in 1:nrow(vector1)) dist[i] <- euc.dist(vector1[i,],vector2[i,])

vector5005 <- as.data.frame(bracken_mocks_with_true$confidence005_unmatched_Mock_5_bracken)
vector501 <- as.data.frame(bracken_mocks_with_true$confidence01_unmatched_Mock_5_bracken)
vector502 <- as.data.frame(bracken_mocks_with_true$confidence02_unmatched_Mock_5_bracken)
vector503 <- as.data.frame(bracken_mocks_with_true$confidence03_unmatched_Mock_5_bracken)
vector504 <- as.data.frame(bracken_mocks_with_true$confidence04_unmatched_Mock_5_bracken)
vector505 <- as.data.frame(bracken_mocks_with_true$confidence05_unmatched_Mock_5_bracken)
vector506 <- as.data.frame(bracken_mocks_with_true$confidence06_unmatched_Mock_5_bracken)
vector507 <- as.data.frame(bracken_mocks_with_true$confidence07_unmatched_Mock_5_bracken)
vector508 <- as.data.frame(bracken_mocks_with_true$confidence08_unmatched_Mock_5_bracken)
vector509 <- as.data.frame(bracken_mocks_with_true$confidence09_unmatched_Mock_5_bracken)

vector6005 <- as.data.frame(bracken_mocks_with_true$confidence005_unmatched_Mock_6_bracken)
vector601 <- as.data.frame(bracken_mocks_with_true$confidence01_unmatched_Mock_6_bracken)
vector602 <- as.data.frame(bracken_mocks_with_true$confidence02_unmatched_Mock_6_bracken)
vector603 <- as.data.frame(bracken_mocks_with_true$confidence03_unmatched_Mock_6_bracken)
vector604 <- as.data.frame(bracken_mocks_with_true$confidence04_unmatched_Mock_6_bracken)
vector605 <- as.data.frame(bracken_mocks_with_true$confidence05_unmatched_Mock_6_bracken)
vector606 <- as.data.frame(bracken_mocks_with_true$confidence06_unmatched_Mock_6_bracken)
vector607 <- as.data.frame(bracken_mocks_with_true$confidence07_unmatched_Mock_6_bracken)
vector608 <- as.data.frame(bracken_mocks_with_true$confidence08_unmatched_Mock_6_bracken)
vector609 <- as.data.frame(bracken_mocks_with_true$confidence09_unmatched_Mock_6_bracken)

vector7005 <- as.data.frame(bracken_mocks_with_true$confidence005_unmatched_Mock_7_bracken)
vector701 <- as.data.frame(bracken_mocks_with_true$confidence01_unmatched_Mock_7_bracken)
vector702 <- as.data.frame(bracken_mocks_with_true$confidence02_unmatched_Mock_7_bracken)
vector703 <- as.data.frame(bracken_mocks_with_true$confidence03_unmatched_Mock_7_bracken)
vector704 <- as.data.frame(bracken_mocks_with_true$confidence04_unmatched_Mock_7_bracken)
vector705 <- as.data.frame(bracken_mocks_with_true$confidence05_unmatched_Mock_7_bracken)
vector706 <- as.data.frame(bracken_mocks_with_true$confidence06_unmatched_Mock_7_bracken)
vector707 <- as.data.frame(bracken_mocks_with_true$confidence07_unmatched_Mock_7_bracken)
vector708 <- as.data.frame(bracken_mocks_with_true$confidence08_unmatched_Mock_7_bracken)
vector709 <- as.data.frame(bracken_mocks_with_true$confidence09_unmatched_Mock_7_bracken)


vector5 <- as.data.frame(bracken_mocks_with_true$Mock_5_composition)
dist5005 <- NULL
dist5005 <- euc.dist(vector5005,vector5)

vector5 <- as.data.frame(bracken_mocks_with_true$Mock_5_composition)
dist5005 <- NULL

```

```{r}
setwd("C:/Users/user/Desktop/data_frames/")

confidencedata <- read.csv("mocks5to7.csv")
confidencedata$Sample <- as.factor(confidencedata$Sample)

boxplot1 <- ggboxplot(confidencedata, x = "Confidence", y = "RMSE", add = "jitter", color = "Confidence", palette = get_palette("npg",10)) + theme_minimal() + ylim(0,8) + rremove("legend")


onlyspeciesbracken <- kraken2_files_bracken %>% lapply(filter, Rank_code == "S")
numberofspecies <- as.data.frame(sapply(onlyspeciesbracken, nrow))

dataplotspecies <- read.csv("C:/Users/user/Desktop/data_frames/simulations/bracken/transfer/plot_number_of_species.csv")
dataplotspecies$Sample <- factor(dataplotspecies$Sample)
dataplotomocks <- ggline(dataplotspecies, "Level", "Species",
   linetype = "Sample", shape = "Sample",
   color = "Sample") + geom_hline(yintercept = 64, linetype = "dashed") + theme_bw()

ggsave(plot=dataplotomocks,filename="dataplot2.png")
```

```{r}
kraken2_files_bracken_truefalse <- lapply(kraken2_files_bracken, function(x) {x$Presence <- ifelse("Taxonomic_ID" %in% names_filtering_clean, TRUE, FALSE); return(x)})


counting1 <- function(df) {
  taxids <- df %>% dplyr::pull(.,Taxonomic_ID) %>% as.character()
  df_1 <- taxids %in% names_filtering_clean %>% as.data.frame() %>% dplyr::rename(.,Presence = .) %>% cbind(taxids,.) 
}

kraken2_files_bracken_truefalse2 <- lapply(kraken2_files_bracken, counting1)


count_true_false <- function(df) {
  vector1 <- df[,2];
  return(sum(vector1))
}


kraken2_count_true_false <- lapply(kraken2_files_bracken_truefalse2, count_true_false) %>% as.data.frame() %>% t() %>% as.data.frame() %>% rownames_to_column(var = "Origin")
kraken2_species_per_sample <- lapply(kraken2_files_bracken_truefalse2, nrow) %>% as.data.frame() %>% t() %>% as.data.frame() %>% rownames_to_column(var = "Origin")


kraken2_count_total <- cbind(kraken2_count_true_false,kraken2_species_per_sample) %>% column_to_rownames(var="Origin")
kraken2_count_total <- kraken2_count_total[,-2] 
colnames(kraken2_count_total) <- c("Positive","Total")

kraken2_count_total$Positivevalue = kraken2_count_total$Positive/kraken2_count_total$Total
kraken2_count_total$Sensitivity = kraken2_count_total$Positive/(kraken2_count_total$Positive + (62 - kraken2_count_total$Positive))

kraken2_count_total$Mock <- c(8,rep(5:7))
kraken2_count_total$Confidence  <- rep(c(0.05,seq(from=0.1,to=0.9,by=0.1)), each=4)
kraken2_count_total$Mock <- as.factor(kraken2_count_total$Mock)

positivevalue <- ggline(kraken2_count_total, "Confidence", "Positivevalue",
   linetype = "Mock", shape = "Mock",
   color = "Mock") + theme_bw() + theme(text=element_text(size=15))

sensitivity <- ggline(kraken2_count_total, "Confidence", "Sensitivity",
   linetype = "Mock", shape = "Mock",
   color = "Mock") + theme_bw() + theme(text=element_text(size=15))

ggsave(plot=positivevalue,filename="ppv.png",width = 13)
ggsave(plot=sensitivity,filename="sensitivity.png",width = 13)


# previous mocks
previous_plants <- read.csv("C:/Users/user/Desktop/plants_id.csv")
previous_others <- read.csv("C:/Users/user/Desktop/others_id.csv")

previous_plants_id_species <- previous_plants[,1]
previous_plants_id_genus <- previous_plants[,3]
previous_others_species <- previous_others[,1]
previous_others_genus1 <- previous_others[,3]
previous_others_genus <- previous_others_genus1[-1]

kraken2_files_bracken_truefalse_previous <- lapply(kraken2_files_bracken2_previous, function(x) {x$Presence_Plant <- ifelse("Taxonomic_ID" %in% names_filtering_clean, TRUE, FALSE); return(x)})


counting1 <- function(df) {
  taxids <- df %>% dplyr::pull(.,Taxonomic_ID) %>% as.character()
  df_1 <- taxids %in% names_filtering_clean %>% as.data.frame() %>% dplyr::rename(.,Presence = .) %>% cbind(taxids,.) 
}

kraken2_files_bracken_truefalse2 <- lapply(kraken2_files_bracken, counting1)


count_true_false <- function(df) {
  vector1 <- df[,2];
  return(sum(vector1))
}


kraken2_count_true_false <- lapply(kraken2_files_bracken_truefalse2, count_true_false) %>% as.data.frame() %>% t() %>% as.data.frame() %>% rownames_to_column(var = "Origin")
kraken2_species_per_sample <- lapply(kraken2_files_bracken_truefalse2, nrow) %>% as.data.frame() %>% t() %>% as.data.frame() %>% rownames_to_column(var = "Origin")


kraken2_count_total <- cbind(kraken2_count_true_false,kraken2_species_per_sample) %>% column_to_rownames(var="Origin")
kraken2_count_total <- kraken2_count_total[,-2] 
colnames(kraken2_count_total) <- c("Positive","Total")

kraken2_count_total$Positivevalue = kraken2_count_total$Positive/kraken2_count_total$Total
kraken2_count_total$Sensitivity = kraken2_count_total$Positive/(kraken2_count_total$Positive + (62 - kraken2_count_total$Positive))

kraken2_count_total$Mock <- c(8,rep(5:7))
kraken2_count_total$Confidence  <- rep(c(0.05,seq(from=0.1,to=0.9,by=0.1)), each=4)
kraken2_count_total$Mock <- as.factor(kraken2_count_total$Mock)


```

repeat but for genus
```{r}
onlygenusbracken <- kraken2_files_bracken %>% lapply(filter, Rank_code == "G")
numberofgenera <- as.data.frame(sapply(onlygenusbracken, nrow)) %>% tibble::rownames_to_column(var = "Sample")
numberofgenera$Mock <- c(8,rep(5:7))
numberofgenera$Confidence <- rep(c(0.05,seq(from=0.1,to=0.9,by=0.1)), each=4)
numberofgenera_new <- numberofgenera %>% rename(., Number_of_genera = names(numberofgenera[2])) %>% select(., -Sample)
numberofgenera_new$Mock <- factor(numberofgenera_new$Mock)

datagenusmocks <- ggline(numberofgenera_new, "Confidence", "Number_of_genera",
   linetype = "Mock", shape = "Mock",
   color = "Mock") + geom_hline(yintercept = 43, linetype = "dashed") + theme_bw()

ggsave(plot=datagenusmocks,filename="dataplotgenus.png")

importgenus <- read.csv("C:/Users/user/Desktop/genuscomp/Mock_5_genus_composition.csv")
namesgenus <- importgenus[,1]

kraken2_files_bracken_genus_truefalse <- lapply(onlygenusbracken, function(x) {x$Presence <- ifelse("Taxonomic_ID" %in% namesgenus, TRUE, FALSE); return(x)})

counting1 <- function(df) {
  taxids <- df %>% dplyr::pull(.,Taxonomic_ID) %>% as.character()
  df_1 <- taxids %in% namesgenus %>% as.data.frame() %>% dplyr::rename(.,Presence = .) %>% cbind(taxids,.) 
}

kraken2_files_bracken_genus_truefalse2 <- lapply(kraken2_files_bracken_genus_truefalse, counting1)


count_true_false_genus <- function(df) {
  vector1 <- df[,2];
  return(sum(vector1))
}


kraken2_count_true_false_genus <- lapply(kraken2_files_bracken_genus_truefalse2, count_true_false_genus) %>% as.data.frame() %>% t() %>% as.data.frame() %>% rownames_to_column(var = "Origin")
kraken2_genus_per_sample <- lapply(kraken2_files_bracken_genus_truefalse2, nrow) %>% as.data.frame() %>% t() %>% as.data.frame() %>% rownames_to_column(var = "Origin")


kraken2_count_total_genus <- cbind(kraken2_count_true_false_genus,kraken2_genus_per_sample) %>% column_to_rownames(var = "Origin")
kraken2_count_total_genus <- kraken2_count_total_genus[,-2]
colnames(kraken2_count_total_genus) <- c("Positive","Total")

kraken2_count_total_genus$Positivevalue = kraken2_count_total_genus$Positive/kraken2_count_total_genus$Total
kraken2_count_total_genus$Sensitivity = kraken2_count_total_genus$Positive/(kraken2_count_total_genus$Positive + (43 - kraken2_count_total_genus$Positive))

kraken2_count_total_genus$Mock <- c(8,rep(5:7))
kraken2_count_total_genus$Confidence  <- rep(c(0.05,seq(from=0.1,to=0.9,by=0.1)), each=4)
kraken2_count_total_genus$Mock <- as.factor(kraken2_count_total_genus$Mock)

positivevalue_genus <- ggline(kraken2_count_total_genus, "Confidence", "Positivevalue",
   linetype = "Mock", shape = "Mock",
   color = "Mock") + theme_bw() +  theme(text=element_text(size=15))

sensitivity_genus <- ggline(kraken2_count_total_genus, "Confidence", "Sensitivity",
   linetype = "Mock", shape = "Mock",
   color = "Mock") + theme_bw() +  theme(text=element_text(size=15))

ggsave(plot=positivevalue_genus,filename="ppv_genus.png",width = 13)
ggsave(plot=sensitivity_genus,filename="sensitivity_genus.png",width = 13)


```

number of reads
```{r}
setwd("C:/Users/user/Desktop/zerothreshold/")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_kraken2_bracken <- list.files(path = "C:/Users/user/Desktop/zerothreshold/",full.names = T, pattern = "\\.kraken2")

kraken2_files_bracken_graph <- lapply(import_kraken2_bracken, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,c(-1)]
})

naming_list_kraken2_bracken <- list.files(path = "C:/Users/user/Desktop/zerothreshold/", pattern = "\\.kraken2")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

kraken2_files_bracken2 <- setNames(kraken2_files_bracken_graph, substring(naming_list_kraken2_bracken, first  = 1, last = nchar(naming_list_kraken2_bracken) -8))

kraken2_files_bracken2 = lapply(kraken2_files_bracken2,setNames,kraken2_output_names)

kraken2_files_bracken2 = lapply(kraken2_files_bracken2,arrange, Taxonomic_ID)

get_numbers_class <- function(df) {
  unclassified <- df[2,1]
  classified <- df[1,1]
  newdf <- cbind(unclassified,classified) %>% as.data.frame()
}

numbersdf <- lapply(kraken2_files_bracken2,get_numbers_class)
datarbind <- do.call(rbind.data.frame, numbersdf)
datarbind$Mock <- c(8,rep(5:7))
datarbind$Confidence  <- rep(c(0.05,seq(from=0.1,to=0.9,by=0.1)), each=4)
datarbind$Mock <- as.factor(datarbind$Mock)

classified <- ggline(datarbind, "Confidence", "classified",
   linetype = "Mock", shape = "Mock",
   color = "Mock") + theme_bw() + scale_y_continuous()

unclassified <- ggline(datarbind, "Confidence", "unclassified",
   linetype = "Mock", shape = "Mock",
   color = "Mock") + theme_bw()


```

previous mocks
```{r}
setwd("C:/Users/user/Desktop/reclassfied/")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_previous <- list.files(path = "C:/Users/user/Desktop/reclassfied/",full.names = T)

kraken2_files_bracken_previous <- lapply(import_previous, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,c(-1)]
})

naming_list_previous <- list.files(path = "C:/Users/user/Desktop/reclassfied")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

kraken2_files_bracken2_previous <- setNames(kraken2_files_bracken_previous, substring(naming_list_previous, first  = 1))

kraken2_files_bracken2_previous = lapply(kraken2_files_bracken2_previous,setNames,kraken2_output_names)

kraken2_files_bracken2_previous = lapply(kraken2_files_bracken2_previous,arrange, Taxonomic_ID)

get_numbers_class <- function(df) {
  unclassified <- df[2,1]
  classified <- df[1,1]
  newdf <- cbind(unclassified,classified) %>% as.data.frame()
}

numbersdf_previous <- lapply(kraken2_files_bracken2_previous,get_numbers_class)
datarbind_previous <- do.call(rbind.data.frame, numbersdf_previous)
datarbind_previous$Mock <- c(rep(c("Plant","All","Others"), each = 10))
datarbind_previous$Confidence  <- rep(c(0.05,seq(from=0.1,to=0.9,by=0.1)))
datarbind_previous$Mock <- as.factor(datarbind_previous$Mock)

all_mocks_data <- rbind(datarbind,datarbind_previous)

classified <- ggline(all_mocks_data, "Confidence", "classified",
   linetype = "Mock", shape = "Mock",
   color = "Mock") + theme_bw() + scale_y_continuous() + theme(text = element_text(size=15))

ggsave(plot=classified,filename="classified_all_mocks_plot.png", width = 10)

unclassified <- ggline(datarbind, "Confidence", "unclassified",
   linetype = "Mock", shape = "Mock",
   color = "Mock") + theme_bw()


```

RMSE function
```{r}
rmse_evaluation <- function(df, expected, observed){ 
  require("dplyr")
  require("hydroGOF")
      rmse_value <- rmse(expected,observed)
      return(rmse_value)
}

xy <- matrix(0, nrow = 0, ncol = 1)    

get_rmse_eval <- function(df) {
    df_1 <- data.frame()
    for (f in 2:((ncol(df))-1)) {
    x <- rmse_evaluation(df,df[ncol(df)],df[f])
    df_1 <- rbind(df_1,x)
    }
    return(df_1)
}

rmse_trials <- get_rmse_eval(bracken_mocks_with_true)


```
NEW MOCKS
1. 23 vs 64 species
```{r}

setwd("C:/Users/user/Desktop/Mocks/A23")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_A23 <- list.files(path = "C:/Users/user/Desktop/Mocks/A23",full.names = T, pattern = "\\.kraken2")

A23_mock <- lapply(import_A23, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,c(-1)]
})

naming_list_A23 <- list.files(path = "C:/Users/user/Desktop/Mocks/A23", pattern = "\\.kraken2")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

A23_mock_files <- setNames(A23_mock, substring(naming_list_A23, first  = 1, last = nchar(naming_list_A23) -8))

A23_mock_files = lapply(A23_mock_files,setNames,kraken2_output_names)

A23_mock_files = lapply(A23_mock_files,arrange, Taxonomic_ID)


# Optionally add the relative abundance as well
A23_mock_files = lapply(A23_mock_files, function(df) {
  df$Relative_abundance = df$Sample_reads / df[2,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,2] * 100;
  return(df)
})

composition_A23 <- read.csv("C:/Users/user/Desktop/Mocks/Mock_A23.csv") 
composition_A23$True_relative_abundance <- (composition_A23$True_reads/sum(composition_A23$True_reads)) * 100
composition_A23 <- composition_A23[,-c(2,3)]
A23_filtering <- composition_A23$Taxonomic_ID

A23_filtered <- A23_mock_files %>% lapply(filter, Taxonomic_ID %in% A23_filtering)

A23_filtered_2 <- lapply(A23_filtered, "[", c(4,6))

A23_mock_final <- lapply(names(A23_filtered_2), function(x){
  colnames(A23_filtered_2[[x]]) <- c("Taxonomic_ID",x)
  A23_filtered_2[[x]]
})
names(A23_mock_final) <- names(A23_filtered_2) 


A23_confidence <- A23_mock_final %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

A23_mock_with_confidence <- merge(A23_confidence,composition_A23, by="Taxonomic_ID")
A23_mock_with_confidence$True_reads <- as.numeric(A23_mock_with_confidence$True_reads)

rmse_A23 <- get_rmse_eval(A23_mock_with_confidence)



setwd("C:/Users/user/Desktop/Mocks/B23")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_B23 <- list.files(path = "C:/Users/user/Desktop/Mocks/B23",full.names = T, pattern = "\\.kraken2")

B23_mock <- lapply(import_C23, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,c(-1)]
})

naming_list_B23 <- list.files(path = "C:/Users/user/Desktop/Mocks/B23", pattern = "\\.kraken2")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

B23_mock_files <- setNames(B23_mock, substring(naming_list_B23, first  = 1, last = nchar(naming_list_B23) -8))

B23_mock_files = lapply(B23_mock_files,setNames,kraken2_output_names)

B23_mock_files = lapply(B23_mock_files,arrange, Taxonomic_ID)


# Optionally add the relative abundance as well
B23_mock_files = lapply(B23_mock_files, function(df) {
  df$Relative_abundance = df$Sample_reads / df[2,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,2] * 100;
  return(df)
})

composition_B23 <- read.csv("C:/Users/user/Desktop/Mocks/Mock_C23.csv") 
composition_B23$True_relative_abundance <- (composition_B23$True_reads/sum(composition_B23$True_reads)) * 100
composition_B23 <- composition_B23[,-c(2,3)]
B23_filtering <- composition_B23$Taxonomic_ID

B23_filtered <- B23_mock_files %>% lapply(filter, Taxonomic_ID %in% A23_filtering)

B23_filtered_2 <- lapply(B23_filtered, "[", c(4,6))

B23_mock_final <- lapply(names(B23_filtered_2), function(x){
  colnames(B23_filtered_2[[x]]) <- c("Taxonomic_ID",x)
  B23_filtered_2[[x]]
})
names(B23_mock_final) <- names(B23_filtered_2) 


B23_confidence <- B23_mock_final %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

B23_mock_with_confidence <- merge(B23_confidence,composition_B23, by="Taxonomic_ID")

rmse_B23 <- get_rmse_eval(B23_mock_with_confidence)


setwd("C:/Users/user/Desktop/Mocks/C23")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_C23 <- list.files(path = "C:/Users/user/Desktop/Mocks/C23",full.names = T, pattern = "\\.kraken2")

C23_mock <- lapply(import_C23, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,c(-1)]
})

naming_list_C23 <- list.files(path = "C:/Users/user/Desktop/Mocks/C23", pattern = "\\.kraken2")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

C23_mock_files <- setNames(C23_mock, substring(naming_list_C23, first  = 1, last = nchar(naming_list_C23) -8))

C23_mock_files = lapply(C23_mock_files,setNames,kraken2_output_names)

C23_mock_files = lapply(C23_mock_files,arrange, Taxonomic_ID)


# Optionally add the relative abundance as well
C23_mock_files = lapply(C23_mock_files, function(df) {
  df$Relative_abundance = df$Sample_reads / df[2,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,2] * 100;
  return(df)
})

composition_C23 <- read.csv("C:/Users/user/Desktop/Mocks/Mock_C23.csv") 
composition_C23$True_relative_abundance <- (composition_C23$True_reads/sum(composition_C23$True_reads)) * 100
composition_C23 <- composition_C23[,-c(2,3)]
C23_filtering <- composition_C23$Taxonomic_ID

C23_filtered <- C23_mock_files %>% lapply(filter, Taxonomic_ID %in% A23_filtering)

C23_filtered_2 <- lapply(C23_filtered, "[", c(4,6))

C23_mock_final <- lapply(names(C23_filtered_2), function(x){
  colnames(C23_filtered_2[[x]]) <- c("Taxonomic_ID",x)
  C23_filtered_2[[x]]
})
names(C23_mock_final) <- names(C23_filtered_2) 


C23_confidence <- C23_mock_final %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

C23_mock_with_confidence <- merge(C23_confidence,composition_C23, by="Taxonomic_ID")

rmse_C23 <- get_rmse_eval(C23_mock_with_confidence)


setwd("C:/Users/user/Desktop/Mocks/A64")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_A64 <- list.files(path = "C:/Users/user/Desktop/Mocks/A64",full.names = T, pattern = "\\.kraken2")

A64_mock <- lapply(import_A64, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,c(-1)]
})

naming_list_A64 <- list.files(path = "C:/Users/user/Desktop/Mocks/A64", pattern = "\\.kraken2")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

A64_mock_files <- setNames(A64_mock, substring(naming_list_A64, first  = 1, last = nchar(naming_list_A64) -8))

A64_mock_files = lapply(A64_mock_files,setNames,kraken2_output_names)

A64_mock_files = lapply(A64_mock_files,arrange, Taxonomic_ID)


# Optionally add the relative abundance as well
A64_mock_files = lapply(A64_mock_files, function(df) {
  df$Relative_abundance = df$Sample_reads / df[2,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,2] * 100;
  return(df)
})

composition_A64 <- read.csv("C:/Users/user/Desktop/Mocks/Mock_A64.csv") 
composition_A64$True_relative_abundance <- (composition_A64$True_reads/sum(composition_A64$True_reads)) * 100
composition_A64 <- composition_A64[,-c(2,3)]
A64_filtering <- composition_A64$Taxonomic_ID

A64_filtered <- A64_mock_files %>% lapply(filter, Taxonomic_ID %in% A64_filtering)

A64_filtered_2 <- lapply(A64_filtered, "[", c(4,6))

A64_mock_final <- lapply(names(A64_filtered_2), function(x){
  colnames(A64_filtered_2[[x]]) <- c("Taxonomic_ID",x)
  A64_filtered_2[[x]]
})
names(A64_mock_final) <- names(A64_filtered_2) 


A64_confidence <- A64_mock_final %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

A64_mock_with_confidence <- merge(A64_confidence,composition_A64, by="Taxonomic_ID")

rmse_A64 <- get_rmse_eval(A64_mock_with_confidence)


setwd("C:/Users/user/Desktop/Mocks/B64")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_B64 <- list.files(path = "C:/Users/user/Desktop/Mocks/B64",full.names = T, pattern = "\\.kraken2")

B64_mock <- lapply(import_B64, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,c(-1)]
})

naming_list_B64 <- list.files(path = "C:/Users/user/Desktop/Mocks/B64", pattern = "\\.kraken2")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

B64_mock_files <- setNames(B64_mock, substring(naming_list_B64, first  = 1, last = nchar(naming_list_B64) -8))

B64_mock_files = lapply(B64_mock_files,setNames,kraken2_output_names)

B64_mock_files = lapply(B64_mock_files,arrange, Taxonomic_ID)


# Optionally add the relative abundance as well
B64_mock_files = lapply(B64_mock_files, function(df) {
  df$Relative_abundance = df$Sample_reads / df[2,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,2] * 100;
  return(df)
})

composition_B64 <- read.csv("C:/Users/user/Desktop/Mocks/Mock_B64.csv") 
composition_B64$True_relative_abundance <- (composition_B64$True_reads/sum(composition_B64$True_reads)) * 100
composition_B64 <- composition_B64[,-c(2,3)]
B64_filtering <- composition_B64$Taxonomic_ID

B64_filtered <- B64_mock_files %>% lapply(filter, Taxonomic_ID %in% B64_filtering)

B64_filtered_2 <- lapply(B64_filtered, "[", c(4,6))

B64_mock_final <- lapply(names(B64_filtered_2), function(x){
  colnames(B64_filtered_2[[x]]) <- c("Taxonomic_ID",x)
  B64_filtered_2[[x]]
})
names(B64_mock_final) <- names(B64_filtered_2) 


B64_confidence <- B64_mock_final %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

B64_mock_with_confidence <- merge(B64_confidence,composition_B64, by="Taxonomic_ID")

rmse_B64 <- get_rmse_eval(B64_mock_with_confidence)


setwd("C:/Users/user/Desktop/Mocks/C64")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_C64 <- list.files(path = "C:/Users/user/Desktop/Mocks/C64",full.names = T, pattern = "\\.kraken2")

C64_mock <- lapply(import_C64, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,c(-1)]
})

naming_list_C64 <- list.files(path = "C:/Users/user/Desktop/Mocks/C64", pattern = "\\.kraken2")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

C64_mock_files <- setNames(C64_mock, substring(naming_list_C64, first  = 1, last = nchar(naming_list_C64) -8))

C64_mock_files = lapply(C64_mock_files,setNames,kraken2_output_names)

C64_mock_files = lapply(C64_mock_files,arrange, Taxonomic_ID)


# Optionally add the relative abundance as well
C64_mock_files = lapply(C64_mock_files, function(df) {
  df$Relative_abundance = df$Sample_reads / df[2,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,2] * 100;
  return(df)
})

composition_C64 <- read.csv("C:/Users/user/Desktop/Mocks/Mock_C64.csv") 
composition_C64$True_relative_abundance <- (composition_C64$True_reads/sum(composition_C64$True_reads)) * 100
composition_C64 <- composition_C64[,-c(2,3)]
C64_filtering <- composition_C64$Taxonomic_ID

C64_filtered <- C64_mock_files %>% lapply(filter, Taxonomic_ID %in% C64_filtering)

C64_filtered_2 <- lapply(C64_filtered, "[", c(4,6))

C64_mock_final <- lapply(names(C64_filtered_2), function(x){
  colnames(C64_filtered_2[[x]]) <- c("Taxonomic_ID",x)
  C64_filtered_2[[x]]
})
names(C64_mock_final) <- names(C64_filtered_2) 


C64_confidence <- C64_mock_final %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

C64_mock_with_confidence <- merge(C64_confidence,composition_C64, by="Taxonomic_ID")

rmse_C64 <- get_rmse_eval(C64_mock_with_confidence)


```


MERGING THEM TOGETHER
```{r}
all_rmse_values <- cbind(rmse_A23,rmse_B23,rmse_C23,rmse_A64,rmse_B64,rmse_C64)
colnames(all_rmse_values) <- c("A23","B23","C23","A64","B64","C64")
all_rmse_values$Confidence <- c(seq(0,1, by=0.1))
for_plotting <- reshape2::melt(all_rmse_values, id = "Confidence")
for_plotting$Species_nr <- c(rep(c(23,64), each = 33))
for_plotting$Species_nr <- as.factor(for_plotting$Species_nr)
colnames(for_plotting) <- c("Confidence","Mock","RMSE","Species_nr")

boxplot2 <- ggboxplot(for_plotting, x = "Confidence", y = "RMSE", add = "jitter", color = "Species_nr", palette = get_palette("npg",11)) + theme_minimal() + ylim(0,8) + theme(text = element_text(size=15)) 

boxplot3 <- ggpar(boxplot2, legend.title = "Number of species")

ggsave(plot = boxplot3, filename = "RMSE_all_new_mocks.png")
```


number of species
```{r}
species_64 <- c(A64_mock_files,B64_mock_files,C64_mock_files)
species_23 <- c(A23_mock_files,B23_mock_files,C23_mock_files)

numberspecies64 <- species_64 %>% lapply(filter, Rank_code == "S")
numberspecies641 <- as.data.frame(sapply(numberspecies64, nrow)) %>% tibble::rownames_to_column(var = "Sample")
numberspecies641$Mock <- rep(c("A64","B64","C64"),each=11)
numberspecies641$Confidence <- rep(seq(from=0.0,to=1,by=0.1))
numberspecies641_new <- numberspecies641 %>% rename(., Number_of_species = names(numberspecies641[2])) %>% select(., -Sample)
numberspecies641_new$Mock <- factor(numberspecies641$Mock)

numberspecies23 <- species_23 %>% lapply(filter, Rank_code == "S")
numberspecies231 <- as.data.frame(sapply(numberspecies23, nrow)) %>% tibble::rownames_to_column(var = "Sample")
numberspecies231$Mock <- rep(c("A23","B23","C23"),each=11)
numberspecies231$Confidence <- rep(seq(from=0.0,to=1,by=0.1))
numberspecies231_new <- numberspecies231 %>% rename(., Number_of_species = names(numberspecies231[2])) %>% select(., -Sample)
numberspecies231_new$Mock <- factor(numberspecies231$Mock)

all_mocks_species <- rbind(numberspecies641_new,numberspecies231_new)

all_mocks_species_plot <- ggline(all_mocks_species, "Confidence", "Number_of_species",
   linetype = "Mock", shape = "Mock",
   color = "Mock") + geom_hline(yintercept = 64, linetype = "dashed") + theme_bw() + theme(text = element_text(size=15))
all_mocks_species_plot2 <- ggpar(all_mocks_species_plot, ylab = "Number of species identified")

ggsave(plot=all_mocks_species_plot2,filename="dataplotspecies_new_mocks.png")

```

Sensitivity for 23 vs 64
```{r}
counting_64_species <- function(df) {
  taxids <- df %>% dplyr::pull(.,Taxonomic_ID) %>% as.character()
  df_1 <- taxids %in% A64_filtering %>% as.data.frame() %>% dplyr::rename(.,Presence = .) %>% cbind(taxids,.) 
}

counting_23_species <- function(df) {
  taxids <- df %>% dplyr::pull(.,Taxonomic_ID) %>% as.character()
  df_1 <- taxids %in% A23_filtering %>% as.data.frame() %>% dplyr::rename(.,Presence = .) %>% cbind(taxids,.) 
}

count_true_false_species <- function(df) {
  vector1 <- df[,2];
  return(sum(vector1))
}

return_sensitivity_and_ppv_64 <- function(lyst) {
  df_true_false <- lapply(lyst, counting_64_species)
  df_truefalse_count <- lapply(df_true_false, count_true_false_species) %>% as.data.frame() %>% t() %>% as.data.frame() %>% rownames_to_column(var = "Origin") %>% rename(., True_species = V1)
  df_species_per_sample <- lapply(df_true_false, nrow) %>% as.data.frame() %>% t() %>% as.data.frame() %>% rownames_to_column(var = "Origin") %>% rename(., Total_species = V1)

  df_truefalse_count_total <- cbind(df_truefalse_count,df_species_per_sample) %>% column_to_rownames(var = "Origin")
  df_truefalse_count_total <- df_truefalse_count_total[,-2]
  colnames(df_truefalse_count_total) <- c("Positive","Total")

  df_truefalse_count_total$Positivevalue = df_truefalse_count_total$Positive/df_truefalse_count_total$Total
  df_truefalse_count_total$Sensitivity = df_truefalse_count_total$Positive/(df_truefalse_count_total$Positive + (64 - df_truefalse_count_total$Positive));
  return(df_truefalse_count_total)
}

return_sensitivity_and_ppv_23 <- function(lyst) {
  df_true_false <- lapply(lyst, counting_23_species)
  df_truefalse_count <- lapply(df_true_false, count_true_false_species) %>% as.data.frame() %>% t() %>% as.data.frame() %>% rownames_to_column(var = "Origin") %>% rename(., True_species = V1)
  df_species_per_sample <- lapply(df_true_false, nrow) %>% as.data.frame() %>% t() %>% as.data.frame() %>% rownames_to_column(var = "Origin") %>% rename(., Total_species = V1)

  df_truefalse_count_total <- cbind(df_truefalse_count,df_species_per_sample) %>% column_to_rownames(var = "Origin")
  df_truefalse_count_total <- df_truefalse_count_total[,-2]
  colnames(df_truefalse_count_total) <- c("Positive","Total")

  df_truefalse_count_total$Positivevalue = df_truefalse_count_total$Positive/df_truefalse_count_total$Total
  df_truefalse_count_total$Sensitivity = df_truefalse_count_total$Positive/(df_truefalse_count_total$Positive + (23 - df_truefalse_count_total$Positive));
  return(df_truefalse_count_total)
}


A64_sens_ppv <- return_sensitivity_and_ppv_64(A64_mock_files)
B64_sens_ppv <- return_sensitivity_and_ppv_64(B64_mock_files)
C64_sens_ppv <- return_sensitivity_and_ppv_64(C64_mock_files)

A23_sens_ppv <- return_sensitivity_and_ppv_23(A23_mock_files)
B23_sens_ppv <- return_sensitivity_and_ppv_23(B23_mock_files)
C23_sens_ppv <- return_sensitivity_and_ppv_23(C23_mock_files)

all_mocks_sens_ppv <- rbind(A64_sens_ppv,B64_sens_ppv,C64_sens_ppv,A23_sens_ppv,B23_sens_ppv,C23_sens_ppv)

all_mocks_sens_ppv$Confidence <- c(seq(0,1, by=0.1))
all_mocks_sens_ppv$Mock <- rep(c("A64","B64","C64","A23","B23","C23"), each=11)
all_mocks_sens_ppv$Species_nr <- c(rep(c(64,23), each = 33))
to_reshape_df <- all_mocks_sens_ppv[,-c(1,2,6)]
ppv_plotting <- reshape2::melt(to_reshape_df, id = c("Confidence","Species_nr"), measure.vars = "Positivevalue")
sens_plotting <- reshape2::melt(to_reshape_df, id = c("Confidence","Species_nr"), measure.vars = "Sensitivity")

ggpar(sens_all_mocks, xlim = c(0,1), ylim = c(0,1))

ppv_all_mocks <- ggscatter(ppv_plotting, x = "Confidence", y = "value",
   add = "loess", conf.int = TRUE, color = "Species_nr", palette = get_palette("npg",2)) + ylab("P.P.V")
sens_all_mocks <- ggscatter(sens_plotting, x = "Confidence", y = "value",
   add = "loess", conf.int = TRUE, color = "Species_nr", palette = get_palette("npg",2)) + ylab("Sensitivity")
ppv_all_mocks2 <- ggpar(ppv_all_mocks, legend.title = "Number of species per sample")
sens_all_mocks2 <- ggpar(sens_all_mocks, legend.title = "Number of species per sample")

ggsave(plot=ppv_all_mocks2,filename="ppv_all_mocks.png",width = 13)
ggsave(plot=sens_all_mocks2,filename="sens_all_mocks.png",width = 13)

```

Get classified

```{r}
classified_and_percentage <- function(df) {
  number_classified <- df[2,1]
  percent_classified <- (df[2,1]/(df[2,1]+df[1,1]))*100
  rbind(number_classified,percent_classified)
}


A64_class <- lapply(A64_mock_files,classified_and_percentage)
A64_df <- do.call(rbind,A64_class) %>% as.data.frame() %>% rename(., Value = V1)
A64_df$Type <- rep(c("Classified","Percent"))
A64_df$Confidence <- rep(seq(from=0.0, to = 1.0, by=0.1), each=2)
rownames(A64_df) <- NULL
A64_df$Species_nr <- 64
A64_df$Mock <- rep("A64")


total_class_percent <- function(y, species.nr = is.numeric) {
  class <- lapply(y,classified_and_percentage)
  y_df <- do.call(rbind,class) %>% as.data.frame() %>% rename(., Value = V1)
  y_df$Type <- rep(c("Classified","Percent"))
  y_df$Confidence <- rep(seq(from=0.0, to = 1.0, by=0.1), each=2)
  rownames(y_df) <- NULL
  y_df$Species_nr <- species.nr;
  return(y_df)
}

A64_total <- total_class_percent(A64_mock_files, species.nr = 64)
B64_total <- total_class_percent(B64_mock_files, species.nr = 64)
C64_total <- total_class_percent(C64_mock_files, species.nr = 64)

A23_total <- total_class_percent(A23_mock_files, species.nr = 23)
B23_total <- total_class_percent(B23_mock_files, species.nr = 23)
C23_total <- total_class_percent(C23_mock_files, species.nr = 23)

all_mocks_classified_percent <- rbind(A64_total,B64_total,C64_total,A23_total,B23_total,C23_total)
all_mocks_classified_percent$Species_nr <- as.factor(all_mocks_classified_percent$Species_nr)

all_mocks_classified_only <- all_mocks_classified_percent %>% filter(., Type == "Classified")
all_mocks_percent_only <- all_mocks_classified_percent %>% filter(., Type == "Percent")

classified_all_mocks <- ggscatter(all_mocks_classified_only, x = "Confidence", y = "Value",
   add = "loess", conf.int = TRUE, color = "Species_nr", palette = get_palette("npg",2)) + ylab("Classified reads")
classified_all_mocks2 <- ggpar(classified_all_mocks,legend.title = "Number of species per sample")

ggsave(plot=classified_all_mocks2, filename="classified_reads_all_mocks.png")

percent_all_mocks <- ggscatter(all_mocks_percent_only, x = "Confidence", y = "Value",
   add = "loess", conf.int = TRUE, color = "Species_nr", palette = get_palette("npg",2)) + ylab("Classified reads (%)")
percent_all_mocks2 <- ggpar(percent_all_mocks,legend.title = "Number of species per sample", ylim = c(0,100))

ggsave(plot=percent_all_mocks2, filename="percent_classified_reads_all_mocks.png")

```

library size comparison. We will use the previous library from A64/B64/C64

```{r}
setwd("C:/Users/user/Desktop/Mocks/A8M")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_A8M <- list.files(path = "C:/Users/user/Desktop/Mocks/A8M",full.names = T, pattern = "\\.kraken2")

A8M_mock <- lapply(import_A8M, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,c(-1)]
})

naming_list_A8M <- list.files(path = "C:/Users/user/Desktop/Mocks/A8M", pattern = "\\.kraken2")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

A8M_mock_files <- setNames(A8M_mock, substring(naming_list_A8M, first  = 1, last = nchar(naming_list_A8M) -8))

A8M_mock_files = lapply(A8M_mock_files,setNames,kraken2_output_names)

A8M_mock_files = lapply(A8M_mock_files,arrange, Taxonomic_ID)


# Optionally add the relative abundance as well
A8M_mock_files = lapply(A8M_mock_files, function(df) {
  df$Relative_abundance = df$Sample_reads / df[2,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,2] * 100;
  return(df)
})

composition_A8M <- read.csv("C:/Users/user/Desktop/Mocks/Mock_A8M.csv") 
composition_A8M$True_relative_abundance <- (composition_A8M$True_reads/sum(composition_A8M$True_reads)) * 100
composition_A8M <- composition_A8M[,-c(2,3)]
A8M_filtering <- composition_A8M$Taxonomic_ID

A8M_filtered <- A8M_mock_files %>% lapply(filter, Taxonomic_ID %in% A8M_filtering)

A8M_filtered_2 <- lapply(A8M_filtered, "[", c(4,6))

A8M_mock_final <- lapply(names(A8M_filtered_2), function(x){
  colnames(A8M_filtered_2[[x]]) <- c("Taxonomic_ID",x)
  A8M_filtered_2[[x]]
})
names(A8M_mock_final) <- names(A8M_filtered_2) 


A8M_confidence <- A8M_mock_final %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

A8M_mock_with_confidence <- merge(A8M_confidence,composition_A8M, by="Taxonomic_ID")

rmse_A8M <- get_rmse_eval(A8M_mock_with_confidence)


setwd("C:/Users/user/Desktop/Mocks/B8M")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_B8M <- list.files(path = "C:/Users/user/Desktop/Mocks/B8M",full.names = T, pattern = "\\.kraken2")

B8M_mock <- lapply(import_B8M, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,c(-1)]
})

naming_list_B8M <- list.files(path = "C:/Users/user/Desktop/Mocks/B8M", pattern = "\\.kraken2")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

B8M_mock_files <- setNames(B8M_mock, substring(naming_list_B8M, first  = 1, last = nchar(naming_list_B8M) -8))

B8M_mock_files = lapply(B8M_mock_files,setNames,kraken2_output_names)

B8M_mock_files = lapply(B8M_mock_files,arrange, Taxonomic_ID)


# Optionally add the relative abundance as well
B8M_mock_files = lapply(B8M_mock_files, function(df) {
  df$Relative_abundance = df$Sample_reads / df[2,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,2] * 100;
  return(df)
})

composition_B8M <- read.csv("C:/Users/user/Desktop/Mocks/Mock_B8M.csv") 
composition_B8M$True_relative_abundance <- (composition_B8M$True_reads/sum(composition_B8M$True_reads)) * 100
composition_B8M <- composition_B8M[,-c(2,3)]
B8M_filtering <- composition_B8M$Taxonomic_ID

B8M_filtered <- B8M_mock_files %>% lapply(filter, Taxonomic_ID %in% B8M_filtering)

B8M_filtered_2 <- lapply(B8M_filtered, "[", c(4,6))

B8M_mock_final <- lapply(names(B8M_filtered_2), function(x){
  colnames(B8M_filtered_2[[x]]) <- c("Taxonomic_ID",x)
  B8M_filtered_2[[x]]
})
names(B8M_mock_final) <- names(B8M_filtered_2) 


B8M_confidence <- B8M_mock_final %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

B8M_mock_with_confidence <- merge(B8M_confidence,composition_B8M, by="Taxonomic_ID")
rmse_B8M <- get_rmse_eval(B8M_mock_with_confidence)

setwd("C:/Users/user/Desktop/Mocks/C8M")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_C8M <- list.files(path = "C:/Users/user/Desktop/Mocks/C8M",full.names = T, pattern = "\\.kraken2")

C8M_mock <- lapply(import_C8M, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,c(-1)]
})

naming_list_C8M <- list.files(path = "C:/Users/user/Desktop/Mocks/C8M", pattern = "\\.kraken2")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

C8M_mock_files <- setNames(C8M_mock, substring(naming_list_C8M, first  = 1, last = nchar(naming_list_C8M) -8))

C8M_mock_files = lapply(C8M_mock_files,setNames,kraken2_output_names)

C8M_mock_files = lapply(C8M_mock_files,arrange, Taxonomic_ID)


# Optionally add the relative abundance as well
C8M_mock_files = lapply(C8M_mock_files, function(df) {
  df$Relative_abundance = df$Sample_reads / df[2,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,2] * 100;
  return(df)
})

composition_C8M <- read.csv("C:/Users/user/Desktop/Mocks/Mock_C8M.csv") 
composition_C8M$True_relative_abundance <- (composition_C8M$True_reads/sum(composition_C8M$True_reads)) * 100
composition_C8M <- composition_C8M[,-c(2,3)]
C8M_filtering <- composition_C8M$Taxonomic_ID

C8M_filtered <- C8M_mock_files %>% lapply(filter, Taxonomic_ID %in% C8M_filtering)

C8M_filtered_2 <- lapply(C8M_filtered, "[", c(4,6))

C8M_mock_final <- lapply(names(C8M_filtered_2), function(x){
  colnames(C8M_filtered_2[[x]]) <- c("Taxonomic_ID",x)
  C8M_filtered_2[[x]]
})
names(C8M_mock_final) <- names(C8M_filtered_2) 


C8M_confidence <- C8M_mock_final %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

C8M_mock_with_confidence <- merge(C8M_confidence,composition_C8M, by="Taxonomic_ID")
rmse_C8M <- get_rmse_eval(C8M_mock_with_confidence)

all_rmse_values_library_size <- cbind(rmse_A64,rmse_B64,rmse_C64,rmse_A8M,rmse_B8M,rmse_C8M)
colnames(all_rmse_values_library_size) <- c("A64","B64","C64","A8M","B8M","C8M")
all_rmse_values_library_size$Confidence <- c(seq(0,1, by=0.1))
all_rmse_values_library_size_plotting <- reshape2::melt(all_rmse_values_library_size, id = "Confidence")
all_rmse_values_library_size_plotting$Library_size <- c(rep(c(1,8), each = 33))
all_rmse_values_library_size_plotting$Library_size <- as.factor(all_rmse_values_library_size_plotting$Library_size)
colnames(all_rmse_values_library_size_plotting) <- c("Confidence","Mock","RMSE","Library_size")

boxplot4 <- ggboxplot(all_rmse_values_library_size_plotting, x = "Confidence", y = "RMSE", add = "jitter", color = "Library_size", palette = get_palette("npg",11)) + ylim(0,4) + theme(text = element_text(size=15))

boxplot5 <- ggpar(boxplot4, legend.title = "Library size (Million reads)")

ggsave(plot = boxplot5, filename = "RMSE_library_size.png")

```

number of species
```{r}
species_64 <- c(A64_mock_files,B64_mock_files,C64_mock_files)

numberspecies64 <- species_64 %>% lapply(filter, Rank_code == "S")
numberspecies641 <- as.data.frame(sapply(numberspecies64, nrow)) %>% tibble::rownames_to_column(var = "Sample")
numberspecies641$Mock <- rep(c("A64","B64","C64"),each=11)
numberspecies641$Confidence <- rep(seq(from=0.0,to=1,by=0.1))
numberspecies641_new <- numberspecies641 %>% rename(., Number_of_species = names(numberspecies641[2])) %>% select(., -Sample)
numberspecies641_new$Mock <- factor(numberspecies641$Mock)

species_8m <- c(A8M_mock_files,B8M_mock_files,C8M_mock_files)
numberspecies8m <- species_8m %>% lapply(filter, Rank_code == "S")
numberspecies8m1 <- as.data.frame(sapply(numberspecies8m, nrow)) %>% tibble::rownames_to_column(var = "Sample")
numberspecies8m1$Mock <- rep(c("A8M","B8M","C8M"),each=11)
numberspecies8m1$Confidence <- rep(seq(from=0.0,to=1,by=0.1))
numberspecies8m1_new <- numberspecies8m1 %>% rename(., Number_of_species = names(numberspecies8m1[2])) %>% select(., -Sample)
numberspecies8m1_new$Mock <- factor(numberspecies8m1$Mock)

all_mocks_species_library_size <- rbind(numberspecies641_new,numberspecies8m1_new)

all_mocks_species_plot_library_size <- ggline(all_mocks_species_library_size, "Confidence", "Number_of_species",
   linetype = "Mock", shape = "Mock",
   color = "Mock") + geom_hline(yintercept = 64, linetype = "dashed") + theme_bw() + theme(text = element_text(size=15))
all_mocks_species_plot_library_size2 <- ggpar(all_mocks_species_plot_library_size, ylab = "Number of species identified")

ggsave(plot=all_mocks_species_plot_library_size2,filename="dataplotspecies_new_mocks_library_size.png")

```

Sensitivity for 23 vs 64
```{r}
counting_64_species <- function(df) {
  taxids <- df %>% dplyr::pull(.,Taxonomic_ID) %>% as.character()
  df_1 <- taxids %in% A64_filtering %>% as.data.frame() %>% dplyr::rename(.,Presence = .) %>% cbind(taxids,.) 
}

count_true_false_species <- function(df) {
  vector1 <- df[,2];
  return(sum(vector1))
}


A64_sens_ppv <- return_sensitivity_and_ppv_64(A64_mock_files)
B64_sens_ppv <- return_sensitivity_and_ppv_64(B64_mock_files)
C64_sens_ppv <- return_sensitivity_and_ppv_64(C64_mock_files)

A8M_sens_ppv <- return_sensitivity_and_ppv_64(A8M_mock_files)
B8M_sens_ppv <- return_sensitivity_and_ppv_64(B8M_mock_files)
C8M_sens_ppv <- return_sensitivity_and_ppv_64(C8M_mock_files)

all_mocks_sens_ppv_library_size <- rbind(A64_sens_ppv,B64_sens_ppv,C64_sens_ppv,A8M_sens_ppv,B8M_sens_ppv,C8M_sens_ppv)

all_mocks_sens_ppv_library_size$Confidence <- c(seq(0,1, by=0.1))
all_mocks_sens_ppv_library_size$Mock <- rep(c("A64","B64","C64","A8M","B8M","C8M"), each=11)
all_mocks_sens_ppv_library_size$Library_size <- c(rep(c(1,8), each = 33))
all_mocks_sens_ppv_library_size$Library_size <- as.factor(all_mocks_sens_ppv_library_size$Library_size)
to_reshape_df_library_size <- all_mocks_sens_ppv_library_size[,-c(1,2,6)]
ppv_plotting_library_size <- reshape2::melt(to_reshape_df_library_size, id = c("Confidence","Library_size"), measure.vars = "Positivevalue")
sens_plotting_library_size <- reshape2::melt(to_reshape_df_library_size, id = c("Confidence","Library_size"), measure.vars = "Sensitivity")


ppv_all_mocks_library_size <- ggscatter(ppv_plotting_library_size, x = "Confidence", y = "value",
   add = "loess", conf.int = TRUE, color = "Library_size", palette = get_palette("npg",2)) + ylab("P.P.V")
sens_all_mocks_library_size <- ggscatter(sens_plotting_library_size, x = "Confidence", y = "value",
   add = "loess", conf.int = TRUE, color = "Library_size", palette = get_palette("npg",2)) + ylab("Sensitivity")
ppv_all_mocks_library_size2 <- ggpar(ppv_all_mocks_library_size, legend.title = "Library size (Million reads)")
sens_all_mocks_library_size2 <- ggpar(sens_all_mocks_library_size, legend.title = "Library size (Million reads)")

ggsave(plot=ppv_all_mocks_library_size2,filename="ppv_all_mocks_library_size.png",width = 13)
ggsave(plot=sens_all_mocks_library_size2,filename="sens_all_mocks_library_size.png",width = 13)
```

classified library size

```{r}

classified_and_percentage <- function(df) {
  number_classified <- df[2,1]
  percent_classified <- (df[2,1]/(df[2,1]+df[1,1]))*100
  rbind(number_classified,percent_classified)
}


total_class_percent_library_size <- function(y, species.nr = is.numeric, library.size = is.numeric) {
  class <- lapply(y,classified_and_percentage)
  y_df <- do.call(rbind,class) %>% as.data.frame() %>% rename(., Value = V1)
  y_df$Type <- rep(c("Classified","Percent"))
  y_df$Confidence <- rep(seq(from=0.0, to = 1.0, by=0.1), each=2)
  rownames(y_df) <- NULL
  y_df$Species_nr <- species.nr
  y_df$Library_size <- library.size;
  return(y_df)
}

A64_total_lib <- total_class_percent_library_size(A64_mock_files, species.nr = 64, library.size = 1)
B64_total_lib <- total_class_percent_library_size(B64_mock_files, species.nr = 64, library.size = 1)
C64_total_lib <- total_class_percent_library_size(C64_mock_files, species.nr = 64, library.size = 1)

A8M_total <- total_class_percent_library_size(A8M_mock_files, species.nr = 64, library.size = 8)
B8M_total <- total_class_percent_library_size(B8M_mock_files, species.nr = 64, library.size = 8)
C8M_total <- total_class_percent_library_size(C8M_mock_files, species.nr = 64, library.size = 8)

all_mocks_classified_percent_library_size <- rbind(A64_total_lib,B64_total_lib,C64_total_lib,A8M_total,B8M_total,C8M_total)
all_mocks_classified_percent_library_size$Library_size <- as.factor(all_mocks_classified_percent_library_size$Library_size)

all_mocks_classified_only_library_size <- all_mocks_classified_percent_library_size %>% filter(., Type == "Classified")
all_mocks_percent_only_library_size <- all_mocks_classified_percent_library_size %>% filter(., Type == "Percent")

classified_all_mocks_library_size <- ggscatter(all_mocks_classified_only_library_size, x = "Confidence", y = "Value",
   add = "loess", conf.int = TRUE, color = "Library_size", palette = get_palette("npg",2)) + ylab("Classified reads")
classified_all_mocks2_library_size <- ggpar(classified_all_mocks_library_size,legend.title = "Library size (Million reads)")

ggsave(plot=classified_all_mocks2_library_size, filename="classified_reads_all_mocks_library_size.png")

scattertry <- ggscatter(all_mocks_classified_only_library_size, x = "Confidence", y = "Value",
   add = "loess", conf.int = TRUE, color = "Library_size", palette = get_palette("npg",2)) + ylab("Classified reads")+ stat_compare_means(label = "p.signif", method = "t.test", ref.group = ".all.")
  

ggsave(plot = boxplot_rmse_fragment, filename = "RMSE_fragment_size_with_stat.png")



percent_all_mocks_library_size <- ggscatter(all_mocks_percent_only_library_size, x = "Confidence", y = "Value",
   add = "loess", conf.int = TRUE, color = "Library_size", palette = get_palette("npg",2)) + ylab("Classified reads (%)")
percent_all_mocks2_library_size <- ggpar(percent_all_mocks_library_size,legend.title = "Library size (Million reads)", ylim = c(0,100))

ggsave(plot=percent_all_mocks2_library_size, filename="percent_classified_reads_all_mocks.png")

```


Fragment size

```{r}
setwd("C:/Users/user/Desktop/Mocks/A200")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_A200 <- list.files(path = "C:/Users/user/Desktop/Mocks/A200",full.names = T, pattern = "\\.kraken2")

A200_mock <- lapply(import_A200, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,c(-1)]
})

naming_list_A200 <- list.files(path = "C:/Users/user/Desktop/Mocks/A200", pattern = "\\.kraken2")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

A200_mock_files <- setNames(A200_mock, substring(naming_list_A200, first  = 1, last = nchar(naming_list_A200) -8))

A200_mock_files = lapply(A200_mock_files,setNames,kraken2_output_names)

A200_mock_files = lapply(A200_mock_files,arrange, Taxonomic_ID)


# Optionally add the relative abundance as well
A200_mock_files = lapply(A200_mock_files, function(df) {
  df$Relative_abundance = df$Sample_reads / df[2,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,2] * 100;
  return(df)
})

composition_A200 <- read.csv("C:/Users/user/Desktop/Mocks/Mock_A200.csv") 
composition_A200$True_relative_abundance <- (composition_A200$True_reads/sum(composition_A200$True_reads)) * 100
composition_A200 <- composition_A200[,-c(2,3)]
A200_filtering <- composition_A200$Taxonomic_ID

A200_filtered <- A200_mock_files %>% lapply(filter, Taxonomic_ID %in% A200_filtering)

A200_filtered_2 <- lapply(A200_filtered, "[", c(4,6))

A200_mock_final <- lapply(names(A200_filtered_2), function(x){
  colnames(A200_filtered_2[[x]]) <- c("Taxonomic_ID",x)
  A200_filtered_2[[x]]
})
names(A200_mock_final) <- names(A200_filtered_2) 


A200_confidence <- A200_mock_final %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

A200_mock_with_confidence <- merge(A200_confidence,composition_A200, by="Taxonomic_ID")

rmse_A200 <- get_rmse_eval(A200_mock_with_confidence)

setwd("C:/Users/user/Desktop/Mocks/B200")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_B200 <- list.files(path = "C:/Users/user/Desktop/Mocks/B200",full.names = T, pattern = "\\.kraken2")

B200_mock <- lapply(import_B200, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,c(-1)]
})

naming_list_B200 <- list.files(path = "C:/Users/user/Desktop/Mocks/B200", pattern = "\\.kraken2")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

B200_mock_files <- setNames(B200_mock, substring(naming_list_B200, first  = 1, last = nchar(naming_list_B200) -8))

B200_mock_files = lapply(B200_mock_files,setNames,kraken2_output_names)

B200_mock_files = lapply(B200_mock_files,arrange, Taxonomic_ID)


# Optionally add the relative abundance as well
B200_mock_files = lapply(B200_mock_files, function(df) {
  df$Relative_abundance = df$Sample_reads / df[2,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,2] * 100;
  return(df)
})

composition_B200 <- read.csv("C:/Users/user/Desktop/Mocks/Mock_B200.csv") 
composition_B200$True_relative_abundance <- (composition_B200$True_reads/sum(composition_B200$True_reads)) * 100
composition_B200 <- composition_B200[,-c(2,3)]
B200_filtering <- composition_B200$Taxonomic_ID

B200_filtered <- B200_mock_files %>% lapply(filter, Taxonomic_ID %in% B200_filtering)

B200_filtered_2 <- lapply(B200_filtered, "[", c(4,6))

B200_mock_final <- lapply(names(B200_filtered_2), function(x){
  colnames(B200_filtered_2[[x]]) <- c("Taxonomic_ID",x)
  B200_filtered_2[[x]]
})
names(B200_mock_final) <- names(B200_filtered_2) 


B200_confidence <- B200_mock_final %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

B200_mock_with_confidence <- merge(B200_confidence,composition_B200, by="Taxonomic_ID")

rmse_B200 <- get_rmse_eval(B200_mock_with_confidence)

setwd("C:/Users/user/Desktop/Mocks/C200")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_C200 <- list.files(path = "C:/Users/user/Desktop/Mocks/C200",full.names = T, pattern = "\\.kraken2")

C200_mock <- lapply(import_C200, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,c(-1)]
})

naming_list_C200 <- list.files(path = "C:/Users/user/Desktop/Mocks/C200", pattern = "\\.kraken2")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

C200_mock_files <- setNames(C200_mock, substring(naming_list_C200, first  = 1, last = nchar(naming_list_C200) -8))

C200_mock_files = lapply(C200_mock_files,setNames,kraken2_output_names)

C200_mock_files = lapply(C200_mock_files,arrange, Taxonomic_ID)


# Optionally add the relative abundance as well
C200_mock_files = lapply(C200_mock_files, function(df) {
  df$Relative_abundance = df$Sample_reads / df[2,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,2] * 100;
  return(df)
})

composition_C200 <- read.csv("C:/Users/user/Desktop/Mocks/Mock_C200.csv") 
composition_C200$True_relative_abundance <- (composition_C200$True_reads/sum(composition_C200$True_reads)) * 100
composition_C200 <- composition_C200[,-c(2,3)]
C200_filtering <- composition_C200$Taxonomic_ID

C200_filtered <- C200_mock_files %>% lapply(filter, Taxonomic_ID %in% C200_filtering)

C200_filtered_2 <- lapply(C200_filtered, "[", c(4,6))

C200_mock_final <- lapply(names(C200_filtered_2), function(x){
  colnames(C200_filtered_2[[x]]) <- c("Taxonomic_ID",x)
  C200_filtered_2[[x]]
})
names(C200_mock_final) <- names(C200_filtered_2) 


C200_confidence <- C200_mock_final %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

C200_mock_with_confidence <- merge(C200_confidence,composition_C200, by="Taxonomic_ID")

rmse_C200 <- get_rmse_eval(C200_mock_with_confidence)

setwd("C:/Users/user/Desktop/Mocks/A110")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_A110 <- list.files(path = "C:/Users/user/Desktop/Mocks/A110",full.names = T, pattern = "\\.kraken2")

A110_mock <- lapply(import_A110, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,c(-1)]
})

naming_list_A110 <- list.files(path = "C:/Users/user/Desktop/Mocks/A110", pattern = "\\.kraken2")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

A110_mock_files <- setNames(A110_mock, substring(naming_list_A110, first  = 1, last = nchar(naming_list_A110) -8))

A110_mock_files = lapply(A110_mock_files,setNames,kraken2_output_names)

A110_mock_files = lapply(A110_mock_files,arrange, Taxonomic_ID)


# Optionally add the relative abundance as well
A110_mock_files = lapply(A110_mock_files, function(df) {
  df$Relative_abundance = df$Sample_reads / df[2,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,2] * 100;
  return(df)
})

composition_A110 <- read.csv("C:/Users/user/Desktop/Mocks/Mock_A110.csv") 
composition_A110$True_relative_abundance <- (composition_A110$True_reads/sum(composition_A110$True_reads)) * 100
composition_A110 <- composition_A110[,-c(2,3)]
A110_filtering <- composition_A110$Taxonomic_ID

A110_filtered <- A110_mock_files %>% lapply(filter, Taxonomic_ID %in% A110_filtering)

A110_filtered_2 <- lapply(A110_filtered, "[", c(4,6))

A110_mock_final <- lapply(names(A110_filtered_2), function(x){
  colnames(A110_filtered_2[[x]]) <- c("Taxonomic_ID",x)
  A110_filtered_2[[x]]
})
names(A110_mock_final) <- names(A110_filtered_2) 


A110_confidence <- A110_mock_final %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

A110_mock_with_confidence <- merge(A110_confidence,composition_A110, by="Taxonomic_ID")

rmse_A110 <- get_rmse_eval(A110_mock_with_confidence)

setwd("C:/Users/user/Desktop/Mocks/B110")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_B110 <- list.files(path = "C:/Users/user/Desktop/Mocks/B110",full.names = T, pattern = "\\.kraken2")

B110_mock <- lapply(import_B110, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,c(-1)]
})

naming_list_B110 <- list.files(path = "C:/Users/user/Desktop/Mocks/B110", pattern = "\\.kraken2")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

B110_mock_files <- setNames(B110_mock, substring(naming_list_B110, first  = 1, last = nchar(naming_list_B110) -8))

B110_mock_files = lapply(B110_mock_files,setNames,kraken2_output_names)

B110_mock_files = lapply(B110_mock_files,arrange, Taxonomic_ID)


# Optionally add the relative abundance as well
B110_mock_files = lapply(B110_mock_files, function(df) {
  df$Relative_abundance = df$Sample_reads / df[2,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,2] * 100;
  return(df)
})

composition_B110 <- read.csv("C:/Users/user/Desktop/Mocks/Mock_B110.csv") 
composition_B110$True_relative_abundance <- (composition_B110$True_reads/sum(composition_B110$True_reads)) * 100
composition_B110 <- composition_B110[,-c(2,3)]
B110_filtering <- composition_B110$Taxonomic_ID

B110_filtered <- B110_mock_files %>% lapply(filter, Taxonomic_ID %in% B110_filtering)

B110_filtered_2 <- lapply(B110_filtered, "[", c(4,6))

B110_mock_final <- lapply(names(B110_filtered_2), function(x){
  colnames(B110_filtered_2[[x]]) <- c("Taxonomic_ID",x)
  B110_filtered_2[[x]]
})
names(B110_mock_final) <- names(B110_filtered_2) 


B110_confidence <- B110_mock_final %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

B110_mock_with_confidence <- merge(B110_confidence,composition_B110, by="Taxonomic_ID")

rmse_B110 <- get_rmse_eval(B110_mock_with_confidence)

setwd("C:/Users/user/Desktop/Mocks/C110")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_C110 <- list.files(path = "C:/Users/user/Desktop/Mocks/C110",full.names = T, pattern = "\\.kraken2")

C110_mock <- lapply(import_C110, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,c(-1)]
})

naming_list_C110 <- list.files(path = "C:/Users/user/Desktop/Mocks/C110", pattern = "\\.kraken2")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

C110_mock_files <- setNames(C110_mock, substring(naming_list_C110, first  = 1, last = nchar(naming_list_C110) -8))

C110_mock_files = lapply(C110_mock_files,setNames,kraken2_output_names)

C110_mock_files = lapply(C110_mock_files,arrange, Taxonomic_ID)


# Optionally add the relative abundance as well
C110_mock_files = lapply(C110_mock_files, function(df) {
  df$Relative_abundance = df$Sample_reads / df[2,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,2] * 100;
  return(df)
})

composition_C110 <- read.csv("C:/Users/user/Desktop/Mocks/Mock_C110.csv") 
composition_C110$True_relative_abundance <- (composition_C110$True_reads/sum(composition_C110$True_reads)) * 100
composition_C110 <- composition_C110[,-c(2,3)]
C110_filtering <- composition_C110$Taxonomic_ID

C110_filtered <- C110_mock_files %>% lapply(filter, Taxonomic_ID %in% C110_filtering)

C110_filtered_2 <- lapply(C110_filtered, "[", c(4,6))

C110_mock_final <- lapply(names(C110_filtered_2), function(x){
  colnames(C110_filtered_2[[x]]) <- c("Taxonomic_ID",x)
  C110_filtered_2[[x]]
})
names(C110_mock_final) <- names(C110_filtered_2) 


C110_confidence <- C110_mock_final %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

C110_mock_with_confidence <- merge(C110_confidence,composition_C110, by="Taxonomic_ID")

rmse_C110 <- get_rmse_eval(C110_mock_with_confidence)

all_rmse_values_fragment <- cbind(rmse_A110,rmse_B110,rmse_C110,rmse_A200,rmse_B200,rmse_C200)
colnames(all_rmse_values_fragment) <- c("A110","B110","C110","A200","B200","C200")
all_rmse_values_fragment$Confidence <- c(seq(0,1, by=0.1))
all_rmse_values_fragment_plotting <- reshape2::melt(all_rmse_values_fragment, id = "Confidence")
all_rmse_values_fragment_plotting$Fragment_size <- c(rep(c(110,200), each = 33))
all_rmse_values_fragment_plotting$Fragment_size <- as.factor(all_rmse_values_fragment_plotting$Fragment_size)
colnames(all_rmse_values_fragment_plotting) <- c("Confidence","Mock","RMSE","Fragment_size")

boxplot6 <- ggboxplot(all_rmse_values_fragment_plotting, x = "Confidence", y = "RMSE", add = "jitter", color = "Fragment_size", palette = get_palette("npg",11)) + theme_minimal() + ylim(0,6) + theme(text = element_text(size=15)) 

boxplot7 <- ggpar(boxplot6, legend.title = "Fragment size (bp)")

ggsave(plot = boxplot7, filename = "RMSE_fragment_size.png")

my_comparisons <- list(c("0","0.5"),c("0.6","0"),c("0.8","0"))

boxplot_rmse_fragment <- ggboxplot(all_rmse_values_fragment_plotting, x = "Confidence", y = "RMSE",
          color = "Fragment_size", palette = "jco") + ylim(0,4) +      # Add global p-value
  stat_compare_means(label = "p.signif", method = "t.test",
                     ref.group = ".all.")
boxplot_rmse_fragment <- ggpar(boxplot_rmse_fragment, legend.title = "Fragment size (bp)")

ggsave(plot = boxplot_rmse_fragment, filename = "RMSE_fragment_size_with_stat.png")

```


number of species fragment size
```{r}
species_110 <- c(A110_mock_files,B110_mock_files,C110_mock_files)
species_200 <- c(A200_mock_files,B200_mock_files,C200_mock_files)

numberspecies110 <- species_110 %>% lapply(filter, Rank_code == "S")
numberspecies1101 <- as.data.frame(sapply(numberspecies110, nrow)) %>% tibble::rownames_to_column(var = "Sample")
numberspecies1101$Mock <- rep(c("A110","B110","C110"),each=11)
numberspecies1101$Confidence <- rep(seq(from=0.0,to=1,by=0.1))
numberspecies1101_new <- numberspecies1101 %>% rename(., Number_of_species = names(numberspecies1101[2])) %>% select(., -Sample)
numberspecies1101_new$Mock <- factor(numberspecies1101$Mock)

numberspecies200 <- species_200 %>% lapply(filter, Rank_code == "S")
numberspecies2001 <- as.data.frame(sapply(numberspecies200, nrow)) %>% tibble::rownames_to_column(var = "Sample")
numberspecies2001$Mock <- rep(c("A200","B200","C200"),each=11)
numberspecies2001$Confidence <- rep(seq(from=0.0,to=1,by=0.1))
numberspecies2001_new <- numberspecies2001 %>% rename(., Number_of_species = names(numberspecies2001[2])) %>% select(., -Sample)
numberspecies2001_new$Mock <- factor(numberspecies2001$Mock)

all_mocks_species_fragment_size <- rbind(numberspecies1101_new,numberspecies2001_new)

all_mocks_species_plot_fragment_size <- ggline(all_mocks_species_fragment_size, "Confidence", "Number_of_species",
   linetype = "Mock", shape = "Mock",
   color = "Mock") + geom_hline(yintercept = 64, linetype = "dashed") + theme_bw() + theme(text = element_text(size=15))
all_mocks_species_plot_fragment_size2 <- ggpar(all_mocks_species_plot_fragment_size, ylab = "Number of species identified")

ggsave(plot=all_mocks_species_plot_fragment_size2,filename="dataplotspecies_new_mocks_fragment_size.png")

```

Sensitivity for fragment size
```{r}
counting_64_species <- function(df) {
  taxids <- df %>% dplyr::pull(.,Taxonomic_ID) %>% as.character()
  df_1 <- taxids %in% A64_filtering %>% as.data.frame() %>% dplyr::rename(.,Presence = .) %>% cbind(taxids,.) 
}

count_true_false_species <- function(df) {
  vector1 <- df[,2];
  return(sum(vector1))
}


A110_sens_ppv <- return_sensitivity_and_ppv_64(A110_mock_files)
B110_sens_ppv <- return_sensitivity_and_ppv_64(B110_mock_files)
C110_sens_ppv <- return_sensitivity_and_ppv_64(C110_mock_files)

A200_sens_ppv <- return_sensitivity_and_ppv_64(A200_mock_files)
B200_sens_ppv <- return_sensitivity_and_ppv_64(B200_mock_files)
C200_sens_ppv <- return_sensitivity_and_ppv_64(C200_mock_files)

all_mocks_sens_ppv_fragment_size <- rbind(A110_sens_ppv,B110_sens_ppv,C110_sens_ppv,A200_sens_ppv,B200_sens_ppv,C200_sens_ppv)

all_mocks_sens_ppv_fragment_size$Confidence <- c(seq(0,1, by=0.1))
all_mocks_sens_ppv_fragment_size$Mock <- rep(c("A110","B110","C110","A200","B200","C200"), each=11)
all_mocks_sens_ppv_fragment_size$Fragment_size <- c(rep(c(110,200), each = 33))
all_mocks_sens_ppv_fragment_size$Fragment_size <- as.factor(all_mocks_sens_ppv_fragment_size$Fragment_size)
to_reshape_df_fragment_size <- all_mocks_sens_ppv_fragment_size[,-c(1,2,6)]
ppv_plotting_fragment_size <- reshape2::melt(to_reshape_df_fragment_size, id = c("Confidence","Fragment_size"), measure.vars = "Positivevalue")
sens_plotting_fragment_size <- reshape2::melt(to_reshape_df_fragment_size, id = c("Confidence","Fragment_size"), measure.vars = "Sensitivity")

ppv_all_mocks_fragment_size <- ggscatter(ppv_plotting_fragment_size, x = "Confidence", y = "value",
   add = "loess", conf.int = TRUE, color = "Fragment_size", palette = get_palette("npg",2)) + ylab("P.P.V")
sens_all_mocks_fragment_size <- ggscatter(sens_plotting_fragment_size, x = "Confidence", y = "value",
   add = "loess", conf.int = TRUE, color = "Fragment_size", palette = get_palette("npg",2)) + ylab("Sensitivity")
ppv_all_mocks_fragment_size2 <- ggpar(ppv_all_mocks_fragment_size, legend.title = "Fragment size (bp)")
sens_all_mocks_fragment_size2 <- ggpar(sens_all_mocks_fragment_size, legend.title = "Fragment size (bp)")

ggsave(plot=ppv_all_mocks_fragment_size2,filename="ppv_all_mocks_fragment_size.png",width = 13)
ggsave(plot=sens_all_mocks_fragment_size2,filename="sens_all_mocks_fragment_size.png",width = 13)
```

classified fragment size
```{r}

classified_and_percentage <- function(df) {
  number_classified <- df[2,1]
  percent_classified <- (df[2,1]/(df[2,1]+df[1,1]))*100
  rbind(number_classified,percent_classified)
}


total_class_percent_fragment_size <- function(y, species.nr = is.numeric, fragment.size = is.numeric) {
  class <- lapply(y,classified_and_percentage)
  y_df <- do.call(rbind,class) %>% as.data.frame() %>% rename(., Value = V1)
  y_df$Type <- rep(c("Classified","Percent"))
  y_df$Confidence <- rep(seq(from=0.0, to = 1.0, by=0.1), each=2)
  rownames(y_df) <- NULL
  y_df$Species_nr <- species.nr
  y_df$Fragment_size <- fragment.size;
  return(y_df)
}

A110_total <- total_class_percent_fragment_size(A110_mock_files, species.nr = 64, fragment.size = 110)
B110_total <- total_class_percent_fragment_size(B110_mock_files, species.nr = 64, fragment.size = 110)
C110_total <- total_class_percent_fragment_size(C110_mock_files, species.nr = 64, fragment.size = 110)

A200_total <- total_class_percent_fragment_size(A200_mock_files, species.nr = 64, fragment.size = 200)
B200_total <- total_class_percent_fragment_size(B200_mock_files, species.nr = 64, fragment.size = 200)
C200_total <- total_class_percent_fragment_size(C200_mock_files, species.nr = 64, fragment.size = 200)


all_mocks_classified_percent_fragment_size <- rbind(A110_total,B110_total,A200_total,B200_total)
all_mocks_classified_percent_fragment_size$Fragment_size <- as.factor(all_mocks_classified_percent_fragment_size$Fragment_size)

all_mocks_classified_only_fragment_size <- all_mocks_classified_percent_fragment_size %>% filter(., Type == "Classified")
all_mocks_percent_only_fragment_size <- all_mocks_classified_percent_fragment_size %>% filter(., Type == "Percent")

classified_all_mocks_fragment_size <- ggscatter(all_mocks_classified_only_fragment_size, x = "Confidence", y = "Value",
   add = "loess", conf.int = TRUE, color = "Fragment_size", palette = get_palette("npg",2)) + ylab("Classified reads")
classified_all_mocks2_fragment_size <- ggpar(classified_all_mocks_fragment_size,legend.title = "Fragment size (bp)")

ggsave(plot=classified_all_mocks2_fragment_size, filename="classified_reads_all_mocks_fragment_size.png")

percent_all_mocks_fragment_size <- ggscatter(all_mocks_percent_only_fragment_size, x = "Confidence", y = "Value",
   add = "loess", conf.int = TRUE, color = "Fragment_size", palette = get_palette("npg",2)) + ylab("Classified reads (%)")
percent_all_mocks2_fragment_size <- ggpar(percent_all_mocks_fragment_size,legend.title = "Fragment size (bp)", ylim = c(0,100))

ggsave(plot=percent_all_mocks2_fragment_size, filename="percent_classified_reads_all_mocks_fragment_size.png")




```

Bracken evaluation
```{r}
setwd("C:/Users/user/Desktop/Mocks/bracken")

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

import_abundance_bracken <- list.files(path = "C:/Users/user/Desktop/Mocks/bracken",full.names = T, pattern = "\\.kraken2")

bracken_files_110 <- lapply(import_abundance_bracken, function(tble) {
   read.delim(file = tble, 
              sep = '\t',
              header = FALSE,
              strip.white = TRUE)[,c(-1)]
})

naming_list_bracken_110 <- list.files(path = "C:/Users/user/Desktop/Mocks/bracken", pattern = "\\.kraken2")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

bracken_110 <- setNames(bracken_files_110, substring(naming_list_bracken_110, first  = 1, last = nchar(naming_list_bracken_110) -8))

bracken_110 = lapply(bracken_110,setNames,kraken2_output_names)

bracken_110 = lapply(bracken_110,arrange, Taxonomic_ID)


# Optionally add the relative abundance as well
bracken_110 = lapply(bracken_110, function(df) {
  df$Relative_abundance = df$Sample_reads / df[1,1] * 100;
  df$Relative_abundance_rooted = df$Sample_rooted_reads / df[1,2] * 100;
  return(df)
})

composition_A110 <- read.csv("C:/Users/user/Desktop/Mocks/Mock_A110.csv") 
composition_A110$True_relative_abundance <- (composition_A110$True_reads/sum(composition_A110$True_reads)) * 100
composition_A110 <- composition_A110[,-c(2,3)]
A110_filtering <- composition_A110$Taxonomic_ID

bracken_110_filtered <- bracken_110 %>% lapply(filter, Taxonomic_ID %in% A110_filtering)

bracken_110_filtered_2 <- lapply(bracken_110_filtered, "[", c(4,6))

bracken_110_final <- lapply(names(bracken_110_filtered_2), function(x){
  colnames(bracken_110_filtered_2[[x]]) <- c("Taxonomic_ID",x)
  bracken_110_filtered_2[[x]]
})
names(bracken_110_final) <- names(bracken_110_filtered_2) 


bracken_110_final_2 <- bracken_110_final %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))

compositions_110 <- merge(composition_A110,composition_B110, by="Taxonomic_ID")
colnames(compositions_110) <- c("Taxonomic_ID","True_relative_abundance_A110","True_relative_abundance_B110")

bracken_110_final_all <- merge(bracken_110_final_2,compositions_110,by="Taxonomic_ID")


rmse_A110_bracken <- rmse_evaluation(bracken_110_final_all, bracken_110_final_all$True_relative_abundance_A110, bracken_110_final_all$`0.5_Mock_A110_bracken`)
rmse_B110_bracken <- rmse_evaluation(bracken_110_final_all, bracken_110_final_all$True_relative_abundance_B110, bracken_110_final_all$`0.5_Mock_B110_bracken`)

all_rmse_values_bracken <- cbind(as.data.frame(rmse_A110[6,1]),as.data.frame(rmse_B110[6,1]),rmse_A110_bracken,rmse_B110_bracken) %>% t() %>% as.data.frame()
rownames(all_rmse_values_bracken) <- c("A110","B110","A110_bracken","B110_bracken") 
all_rmse_values_bracken = all_rmse_values_bracken %>% rename(RMSE = V1) %>% rownames_to_column(., var = "Mock")
all_rmse_values_bracken$Type <- c("kraken2","kraken2","kraken2+bracken","kraken2+bracken")

boxplot8 <- ggboxplot(all_rmse_values_bracken, y = "RMSE", add = "point", color = "Type", palette = get_palette("npg",2)) + theme_minimal() + ylim(0,8) + theme(text = element_text(size=15)) 

boxplot9 <- ggpar(boxplot8, legend.title = "") + rremove("x.text") + rremove("xlab")

ggsave(plot = boxplot9, filename = "RMSE_bracken_yesno.png")

forttest <- c(all_rmse_values_bracken[1,2],all_rmse_values_bracken[2,2])
forttest_bracken <- c(all_rmse_values_bracken[3,2],all_rmse_values_bracken[4,2])

t.test(forttest,forttest_bracken)

get_percent_error <- function(x,observed,expected) {
  y <- (expected-observed)/expected
}

error_a110 <- get_percent_error(A110_mock_with_confidence,A110_mock_with_confidence$`0.5_Mock_A110`,A110_mock_with_confidence$True_relative_abundance)
error_b110 <- get_percent_error(B110_mock_with_confidence,B110_mock_with_confidence$`0.5_Mock_B110`,B110_mock_with_confidence$True_relative_abundance)

error_a110_bracken <- get_percent_error(bracken_110_final_all,bracken_110_final_all$`0.5_Mock_A110_bracken`,bracken_110_final_all$True_relative_abundance_A110)
error_b110_bracken <- get_percent_error(bracken_110_final_all,bracken_110_final_all$`0.5_Mock_B110_bracken`,bracken_110_final_all$True_relative_abundance_B110)

all_percent_errors <- cbind(error_a110,error_b110,error_a110_bracken,error_b110_bracken)

all_percent_errors_bracken <- reshape2::melt(all_percent_errors)
all_percent_errors_bracken$Type <- rep(c("kraken2","kraken2+bracken"), each = 112)

boxplot10 <- ggboxplot(all_percent_errors_bracken, y = "value", add = "point", color = "Type", palette = get_palette("npg",2)) + theme_minimal() + theme(text = element_text(size=15)) + labs(y = "% error")

boxplot11 <- ggpar(boxplot10, legend.title = "") + rremove("x.text") + rremove("xlab") 
ggsave(plot = boxplot11, filename = "percent_error_bracken.png")

boxplot12 <- ggboxplot(all_percent_errors_bracken, y = "value", add = "point", color = "Type", palette = get_palette("npg",2)) + ylim(-40,15) + theme_minimal() + theme(text = element_text(size=15)) + labs(y = "% error")

boxplot13 <- ggpar(boxplot12, legend.title = "") + rremove("x.text") + rremove("xlab") 
ggsave(plot = boxplot13, filename = "percent_error_bracken_zoom.png")

dataframeerror <- as.data.frame(all_percent_errors)
ab110 <- c(dataframeerror$error_a110,dataframeerror$error_b110)
ab110bracken <- c(dataframeerror$error_a110_bracken,dataframeerror$error_b110_bracken)
t.test(ab110,ab110bracken)
```

```{r}
get_totals_per_sample <- function(df) {
  classified <- df[2,1]
}

totals_classified <- lapply(kraken2_files,get_totals_per_sample)

count_after_filter <- Hives_comparison_species[,-1]
totals_filter <- apply(count_after_filter,2,sum) %>% as.data.frame()



get_reads_per_level <- function(df) {
  df_1 <-  sum(df$Sample_reads);
  return(df_1)
}

get_reads_percent_level <- function(df) {
  df_1 <- sum(df$Sample_reads)
}

family_per_sample <- lapply(kraken2_files_family,get_reads_per_level) %>% do.call(cbind,.) %>% as.data.frame()
genus_per_sample <-lapply(kraken2_files_genus,get_reads_per_level) %>% do.call(cbind,.) %>% as.data.frame()
species_per_sample <- lapply(kraken2_files_species,get_reads_per_level) %>% do.call(cbind,.) %>% as.data.frame()

all_reads_per_sample <- rbind(family_per_sample,genus_per_sample,species_per_sample)
all_reads_per_sample$Level <- c("Family","Genus","Species")


plants12 <- Relative_abundance_plants[,c(1:8,14)] %>% group_by(Family) %>% summarise_if(is.numeric, funs(sum))
plants12$Sum <- rowSums(plants12[,c(-1)])
plants12$Name <- ifelse(plants12$Sum > 0.5, plants12$Sum, 0)
plants12 = plants12 %>% filter(.,Name != 0)
  

ggplot(plants12, aes(x="", y=Name, fill=Family)) +
  geom_bar(stat="identity", width=1) +
  coord_polar("y", start=0)

 piechart1 <- ggpie(plants12, "Name", label = "Family",
      fill = "Family", color = "white",
       palette = get_palette("npg", 25) )

ggsave(plot=piechart1,filename="piechart.trial.png")

p <- plot_ly(plants12, labels = ~Family, values = ~Name, type = 'pie',textposition = 'outside',textinfo = 'label+percent') %>%
  layout(title = 'Most abundant (>0.5%) families',
         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
htmlwidgets::saveWidget(as_widget(p), "index.html")

```
