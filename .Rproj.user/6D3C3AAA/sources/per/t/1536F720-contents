---
title: "R Notebook"
output: html_notebook
---

This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code. 

Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*. 

```{r}
setwd("C:/users/User/Desktop/")

normalised_reads_import <- read.csv("Normalised_reads_confidence05.csv")
norm_reads <- select(normalised_reads_import, c(2:9,17))

#NOT THE SIGNIFICANTLY DIFF ONES
significant_species_import <- read.csv("significant.csv")
significant_species <- significant_species_import[,1]

norm_reads$Species <- as.character(norm_reads$Species)
norm_reads[521,9] <- "Streptomyces sp. S1D4-11"
norm_reads[902,9] <- "Mesorhizobium sp. NIBRBAC000500504"
norm_reads[1455,9] <- "Paracoccus sp. AK26"
norm_reads[1790,9] <- "Leifsonia sp. PS1209"
norm_reads[1791,9] <- "Acinetobacter sp. NEB149"
rownames(norm_reads) <- norm_reads$Species

norm_reads_no_sp <- norm_reads[,c(1:8)]


norm_reads_no_sp_mat <-t(norm_reads_no_sp)
norm_reads_no_sp_mat<-(norm_reads_no_sp_mat1+1)



norm_reads_no_sp_mat<-(norm_reads_no_sp_mat+1)
norm_reads_no_sp_mat<-log(norm_reads_no_sp_mat)
norm_reads_no_sp_mat_final <- as.data.frame(norm_reads_no_sp_mat)

method <- rep(c("DirectSM","SM"), each =4)
season <- rep(c("Autumn","Spring","Summer","Summer"), times=2)
hive <- rep(c("4","5","6","7"), times=2)

features <- cbind(method,season,hive)

#PCA 
PCAtable<-cbind(method,season, norm_reads_no_sp_mat_final)
PCA.res <- PCA(PCAtable, scale.unit=TRUE,ncp=5 ,graph = F,quali.sup=1: 2)
#ouput of PCA (this is important to call some output data from the PCA)
print(PCA.res)
#for example , Coordinates of variables on the principal components
#head(Wasp.PCA.res.1290$var$coord)
#For example, Contributions of the variables to the principal components
#head(Wasp.PCA.res.1290$contrib)

#Variances of the principal components and visualisation
eigenvalues <- PCA.res$eig
barplot(eigenvalues [, 2], names.arg=1:nrow(eigenvalues), 
        main = " ",
        xlab = "Principal Components",
        ylab = "Percentage of variances",
        col ="red3",
        ylim= c(0,30))

#correlation coefficient between variable and a dimension and performs a significance test (significantly correlated to the principal dimensions)
dimdesc(PCA.res, axes=c(1,2,3,4,5))



#TO DISPLAY INDIVIDUAL
#color the individual based on their ovaries
no.col <- 20 # the number of colours to use
# bin the ovaries
bins.ovaries <- seq(min(features$ovaries),max(features$ovaries), length.out=no.col)
# get bin number for each data value
binned.data.ovaries <- findInterval(features$ovaries, bins.ovaries)
# change size according to ovaries size
no.sizes <- 6
size.bin.ovaries <- findInterval(features$ovaries, seq(min(features$ovaries),max(features$ovaries), length.out=no.sizes))

### FINAL and LEGEND ####
#phase
concat.phase = cbind.data.frame(PCAtable[,1],PCA.res$ind$coord)
ellipse.coord.phase = coord.ellipse(concat.phase,bary=T)
plot.PCA(PCA.res,habillage=1,ellipse=ellipse.coord.phase,label="none",col.hab=c("black","red3"), invisible="quali", title= "DEG")
#nest
concat.nest = cbind.data.frame(PCAtable[,2],PCA.res$ind$coord)
ellipse.coord.nest = coord.ellipse(concat.nest,bary=T)
plot.PCA(PCA.res,habillage=2,ellipse=ellipse.coord.nest,cex=2,label="none",col.hab=c("red3","goldenrod2","forestgreen", "deepskyblue3", "midnightblue"), invisible="quali", title= "DEG")

### ggplot version ###
library(ggplot2)
library(magrittr)
library(data.table)
source("../../../../../../Nextcloud/Projects/Social behavior of wasps/Scripts/ggplot_theme.R")
ind.coord <- as.data.table(PCA.res$ind$coord) %>% .[, ID:=individual] %>% .[, Egg:=ovaries] %>% .[, Phase:= phase] %>% .[,Nest:=nest]

plot.PCA(PCA.res,habillage=1,ellipse=ellipse.coord.phase,label="none",col.hab=c("black","red3"), invisible="quali", title= "DEG")

ggplot(data=ind.coord, aes(x=Dim.1, y=Dim.2,))+geom_hline(yintercept = 0, linetype = "dashed")+geom_vline(xintercept = 0, linetype = "dashed")+geom_point(alpha=0.8)+theme(aspect.ratio = 1/2, legend.position = "none")+scale_size_continuous(range=c(0.5,3))+labs(x="PCA1 (40.8 %)", y="PCA2 (14.03 %)")+scale_shape_manual(values=c(16,17,3,7,8))

+scale_color_manual(values=c("black","red3"))

df <- PCA.res$var$cos2 #build the dataframe
options(scipen=100) # to turn off scientific notation options(scipen=0) to turn it back on
x<- sort(df, decreasing=T) # create a vector and sort with the hightest values of the column on the top
cutoff.value <- x[120] #create a cutoff value after the  first xx columns
cutoff.value
genes.by.dim <- apply(df, 2, function(x){rownames(df)[x>cutoff.value]})# extract the gene 
genes.by.dim$id <- rownames(genes.by.dim) #create database of the gene that contribute the most with their associated dim and export
contrib.most<-reshape2::melt(genes.by.dim)
colnames(contrib.most)[1] <- "ID" #rename colum by replace "value" by "probe"
PCA.contrib.most<-merge(contrib.most, norm_reads_no_sp_mat_final)
#to get the ID name


#Replot variable according to the gene that contribute the most
dim1 <- rownames(df)[df[,1] > cutoff.value]
dim2 <- rownames(df)[df[,2] > cutoff.value]
plot(PCA.res,axes=c(1, 2), cex=0.5, choix="var", shadow=TRUE, autoLab="auto",select= c(dim1), unselect=1, col.var="red3")

plot(PCA.res,axes=c(1, 2), cex=0.5, choix="var", shadow=TRUE, autoLab="auto",select= c(dim2), unselect=1, col.var="black")

library(ggforce)

radar <- as.data.table(PCA.res$var$coord, keep.rownames = TRUE) %>% .[rn %in% dim1 | rn %in% dim2, ]

ggplot()+geom_hline(yintercept = 0, linetype = "dashed")+geom_vline(xintercept = 0, linetype = "dashed")+geom_segment(data=radar, aes(x=Dim.1, y=Dim.2, color=rn %in% dim1), x=0,y=0,xend=radar$Dim.1,yend=radar$Dim.2,arrow=arrow(length=unit(0.2,"cm")))+xlim(c(-2,2))+ylim(c(-1,1))+theme(aspect.ratio = 1/2, legend.position = "none")+geom_circle(aes(x0=0, y0=0, r=1))



PCbiplot2 <- function(res.pca, x="Dim.1", y="Dim.2") {
  # res.pca being a PCA object
  x <-  rownames(PCA.res$var$cos2)[PCA.res$var$cos2[,1] > 500]
  y <- rownames(PCA.res$var$cos2)[PCA.res$var$cos2[,2] > 500]
  data <- data.frame(obsnames=row.names(PCA.res$ind$coord), PCA.res$ind$coord)
  plot <- ggplot(data, aes_string(x="Dim.1", y="Dim.2")) + geom_text(alpha=.4, size=3,     aes(label=obsnames))
  plot <- plot + geom_hline(yintercept = 0, size=.2) + geom_vline(xintercept = 0, size=.2)
  datapc <- data.frame(varnames=rownames(PCA.res$var$coord), PCA.res$var$coord)
  mult <- min(
    (max(data[,"Dim.2"]) - min(data[,"Dim.2"])/(max(datapc[,"Dim.2"])-min(datapc[,"Dim.2"]))),
    (max(data[,"Dim.1"]) - min(data[,"Dim.1"])/(max(datapc[,"Dim.1"])-min(datapc[,"Dim.1"])))
  )
  datapc <- transform(datapc,
                      v1 = .7 * mult * (get("Dim.1")),
                      v2 = .7 * mult * (get("Dim.2"))
  )
  plot <- plot + coord_equal() + geom_text(data=datapc, aes(x=v1, y=v2,     label=varnames), size = 0.01, vjust=1, color="black")
  plot <- plot + geom_segment(data=datapc, aes(x=0, y=0, xend=v1, yend=v2),     arrow=arrow(length=unit(0.2,"cm")), alpha=0.3, color="black")
  plot
}

bip <- PCA.Biplot(norm_reads_no_sp_mat_final, Scaling = 2, dimension = 2)
plot(bip, mode="s", margin=0.2)

proteindata <- data(Protein)


library(FactoMineR)
fit2 <- PCA(USArrests, graph=F)
PCbiplot2(PCA.res)

dim1 <- rownames(df)[df[,1] > cutoff.value]
dim2 <- rownames(df)[df[,2] > cutoff.value]
plot(PCA.res,axes=c(1, 2), cex=0.5, choix="var", shadow=TRUE, autoLab="auto",select= c(dim1), unselect=1, col.var="red3")
par(new=T)
plot(PCA.res,axes=c(1, 2), cex=0.5, choix="var", shadow=TRUE, autoLab="auto",select= c(dim2), unselect=1, col.var="black")

```

Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Ctrl+Alt+I*.

When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Ctrl+Shift+K* to preview the HTML file).

The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
