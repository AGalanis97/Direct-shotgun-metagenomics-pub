getwd()
#All non plant species 
nonplants<-read.csv("./Normalised_reads/normalised_methodseason_species.csv", header = TRUE)
nonplants<-nonplants[!grepl("Viridiplantae", nonplants$Kingdom),]

#filter species with less that 100 reads and export for manual and NCBI-based classification
nonplants$Sum<-rowSums(nonplants[3:10])
nonplantsfilt<-nonplants[!(rowSums(nonplants[3:10])<=100), ] # this threshold give the same distribution that with all read
write.table(nonplantsfilt, file = "nonplantsfilt.txt", sep = "\t",row.names = TRUE, col.names = NA)

#merge with Pavlopoulos analysis (NCBI search)
NCBI<-read_excel("./Non Plants/NCBI.xlsx")
NCBI<-NCBI[!grepl("Apis mellifera filamentous virus", NCBI$Species),]

#Differential non plant species across seasons (from Cluster analysis)
SeasonalDifCl1<-read.csv("./Figures/Figure_3/Cluster/Species_cluster_1.csv", header = TRUE)
SeasonalDifCl3<-read.csv("./Figures/Figure_3/Cluster/Species_cluster_3.csv", header = TRUE)
SeasonalDifCl4<-read.csv("./Figures/Figure_3/Cluster/Species_cluster_4.csv", header = TRUE)
SeasonalDifAll<-rbind(SeasonalDifCl1,SeasonalDifCl3,SeasonalDifCl4)
SeasonalDifAll<-SeasonalDifAll[!grepl("Viridiplantae", SeasonalDifAll$Kingdom),]
SeasonalDifAll<-SeasonalDifAll[,-(2:11)]
SeasonalDifAll<-merge(SeasonalDifAll,NCBI,by="Species")

myPalette <- brewer.pal(6, "Dark2") 

#plot distribution
All<-nonplants[!grepl("Apis mellifera filamentous virus", nonplants$Species),] #remove Am f virus
All<-data.frame(tapply(All$Sum, All$Superkingdom, FUN=sum))
pie (t(All), labels = c("Archaea","Bacteria","Eucaryote","Virus"))

Filter<-data.frame(tapply(NCBI$Sum, NCBI$Superkingdom, FUN=sum))
pie (t(Filter), labels = c("Bacteria","Eucaryote","NA","Virus"),col=myPalette,main="Non-plants superkindgoms distribution in honey")

Relationship <- data.frame(tapply(NCBI$Sum, NCBI$`Relation category`  , FUN=sum))
pie (t(Relationship), labels = c("Bacterial gut community","Host","Human cross contamination","Others","Pathogen","Unknown"),border="white", col=myPalette, main="Relationship of non-plant species with bees ")

Differential <- data.frame(tapply(SeasonalDifAll$Sum, SeasonalDifAll$`Relation category`  , FUN=sum))
pie (t(Differential), labels = c("Bacterial gut community","Host","Human cross contamination","Others","Pathogen","Unknown"),border="white", col=myPalette, main="Relationship of the seasonal specific non-plant species with bees ")








#Extract data of the known microbiota (from Kešnerová et al. 2019 and doi: 10.1186/s12864-015-1476-6)

Bartonella_sp <- nonplants[grepl("Bartonella", nonplants$Genus), ]
Bartonella_sp$Category<- c("Bartonella sp.")

Bifidobacterium_sp <- nonplants[grepl("Bifidobacterium", nonplants$Genus), ]
Bifidobacterium_sp$Category<- c("Bifidobacterium sp.")

Bombella_sp <-  nonplants[grepl("Bombella", nonplants$Genus), ]
Bombella_sp$Category<- c("Bombella sp.")

Frischellaperrara <- nonplants[grepl("Frischella perrara", nonplants$Species), ]
Frischellaperrara$Category<- c("Frischella perrara")

Gilliamellaapicola <- nonplants[grepl("Gilliamella apicola", nonplants$Species), ]
Gilliamellaapicola$Category<- c("Gilliamella apicola")

Lactobacilluskunkeei <- nonplants[grepl("Lactobacillus kunkeei", nonplants$Species), ]
Lactobacilluskunkeei$Category<- c("Lactobacillus kunkeei")

Lactobacillus_Firm4 <- nonplants[grepl("Lactobacillus mellis", nonplants$Species) | grepl("Lactobacillus mellifer", nonplants$Species) , ] #doi: 10.1186/s12864-015-1476-6
Lactobacillus_Firm4$Category<- c("Lactobacillus-Firm4") #not plot because of too lower reads

Lactobacillus_Firm5 <- nonplants[grepl("Lactobacillus apis", nonplants$Species) | grepl("Lactobacillus helsingborgensis", nonplants$Species)| grepl("Lactobacillus melliventris", nonplants$Species) | grepl("Lactobacillus kullabergensis", nonplants$Species)| grepl("Lactobacillus kimbladii", nonplants$Species) , ] #doi: 10.1186/s12864-015-1476-6
Lactobacillus_Firm5$Category<- c("Lactobacillus-Firm5")

Lactobacillus_Others <- nonplants[grepl("Lactobacillus sp. Fhon2N", nonplants$Species) | grepl("Lactobacillus apinorum", nonplants$Species)| grepl("Lactobacillus delbrueckii", nonplants$Species) | grepl("Liquorilactobacillus nageliis", nonplants$Species), ]  #Others Lactobacillus with more that 100 reads coverage
Lactobacillus_Others$Category<- c("Lactobacillus-Others")

Lonsdaleabritannica <- nonplants[grepl("Lonsdalea britannica", nonplants$Species), ]
Lonsdaleabritannica$Category<- c("Lonsdalea britannica")

Snodgrassellaalvi <- nonplants[grepl("Snodgrassella alvi", nonplants$Species), ]
Snodgrassellaalvi $Category<- c("Snodgrassella alvi ") #not plot because of too lower reads

microbiota<-rbind(Bartonella_sp,Bifidobacterium_sp,Bombella_sp,Frischellaperrara,Gilliamellaapicola,Lactobacilluskunkeei,Lactobacillus_Firm5,Lactobacillus_Others,Lonsdaleabritannica) 
#Because L. kunkeii dominate the DNA from microbiota, I remove it to clarify the barplots
microbiota_nokunkeei<-rbind(Bartonella_sp,Bifidobacterium_sp,Bombella_sp,Frischellaperrara,Gilliamellaapicola,Lactobacillus_Firm5,Lactobacillus_Others,Lonsdaleabritannica) 


#Abundance barplots
### ALL
p<-microbiota %>% 
  group_by(Category) %>% 
  summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
pp <- melt(p, id.vars="Category")
ppp <-pp %>% 
  group_by(Category) %>% 
  summarise(mean=mean(value), sd=sd(value))

ggplot(ppp, aes(reorder(Category,- mean), y=mean, fill=Category)) + 
  geom_bar(stat="identity", color="black", position=position_dodge(), fill="grey") +
  geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd),position = position_dodge(0.9), width = .3) +
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 45,hjust=1), 
        axis.line = element_line(colour = "black"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        panel.background = element_blank(),
        legend.position = "none") +
  xlab("Species") +
  ylab("Attributed reads") 


#### NO KUNKEII
pk<-microbiota_nokunkeei %>% 
  group_by(Category) %>% 
  summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
ppk <- melt(pk, id.vars="Category")
ggplot(ppk, aes(variable, value,fill=Category)) + 
  geom_bar(position="fill", stat="identity")+
  theme_minimal()+
  scale_fill_brewer(palette="Paired")+
  labs(title = "CORE and NON-CORE microbiota detected in Honey",
       subtitle = "(Excluding L. kunkeii)")



#Because others abundant bacteria were attributed as gut microbiota from the NCBI file and the differential analyses I decide to include them also in the microbiota database

Sodalis <- nonplants[grepl("Sodalis glossinidius", nonplants$Species) | grepl("Sodalis praecaptivus", nonplants$Species) , ] 
Sodalis$Category<- c("Sodalis")

Sodalisglossinidius <- nonplants[grepl("Sodalis glossinidius", nonplants$Species)  , ] 
Sodalisglossinidius$Category<- c("Sodalis glossinidius")

Sodalispraecaptivus <- nonplants[grepl("Sodalis praecaptivus", nonplants$Species)  , ] 
Sodalispraecaptivus$Category<- c("Sodalis praecaptivus")

Pantoeaagglomerans<-nonplants[grepl("Pantoea agglomerans", nonplants$Species) , ]
Pantoeaagglomerans$Category<- c("Pantoea agglomerans")

Leuconostocpseudomesenteroides<-nonplants[grepl("Leuconostoc pseudomesenteroides", nonplants$Species) , ]
Leuconostocpseudomesenteroides$Category<- c("Leuconostoc pseudomesenteroides")

Enterobacter_sp<-nonplants[grepl("Enterobacter sp. SA187", nonplants$Species) , ]
Enterobacter_sp$Category<- c("Enterobacter sp.")

Arsenophonusnasoniae<-nonplants[grepl("Arsenophonus nasoniae", nonplants$Species) , ]
Arsenophonusnasoniae$Category<- c("Arsenophonus nasoniae")

Parasaccharibacterapium<-nonplants[grepl("Parasaccharibacter apium", nonplants$Species) , ]
Parasaccharibacterapium$Category<- c("Parasaccharibacter apium")

Morganellamorganii<-nonplants[grepl("Morganella morganii", nonplants$Species) , ]
Morganellamorganii$Category<- c("Morganella morganii")

Klebsiellaoxytoca<-nonplants[grepl("Klebsiella oxytoca", nonplants$Species) , ]
Klebsiellaoxytoca$Category<- c("Klebsiella oxytoca")

microbiota_extended<-rbind(microbiota_nokunkeei,Sodalis, Pantoeaagglomerans,Leuconostocpseudomesenteroides,Enterobacter_sp,Arsenophonusnasoniae,Parasaccharibacterapium,Morganellamorganii,Klebsiellaoxytoca)
other_microbiota<-rbind(Sodalis,Pantoeaagglomerans,Leuconostocpseudomesenteroides,Enterobacter_sp,Arsenophonusnasoniae,Parasaccharibacterapium,Morganellamorganii,Klebsiellaoxytoca)

#### EXTENDED
pkext<-microbiota_extended %>% 
  group_by(Category) %>% 
  summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
ppkext <- melt(pkext, id.vars="Category")
ggplot(ppkext, aes(variable, value,fill=Category)) + 
  geom_bar(position="fill", stat="identity")+
  theme_minimal() +
  labs(title = "EXTENTED GUT MICROBIOTA")

#### OTHERS MICROBIOTA
pkother<-other_microbiota %>% 
  group_by(Category) %>% 
  summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
ppkother <- melt(pkother, id.vars="Category")
ggplot(ppkother, aes(variable, value,fill=Category)) + 
  geom_bar(position="fill", stat="identity")+
  theme_minimal()+
  scale_fill_brewer(palette="Paired")+
  labs(title = "OTHER MICROBIOTA")

### SEASONAL DIFF MICROBIOTA (all except frishella are autonm specific so I removed it for plotting purpose  )
Diff_microbiota<-rbind(Enterobacter_sp,Klebsiellaoxytoca,Leuconostocpseudomesenteroides,Sodalisglossinidius,Sodalispraecaptivus)#,Frischellaperrara
pkdiff<-Diff_microbiota %>% 
  group_by(Category) %>% 
  summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
ppkdiff <- melt(pkdiff, id.vars="Category")
ggplot(ppkdiff, aes(variable, value,fill=Category)) + 
  geom_bar(position="stack", stat="identity")+
  theme_minimal()+
  scale_fill_brewer(palette="Oranges")+
  facet_grid(Category~variable, scales="free", space="free_x")













functional<-read.csv("./Non Plants/functional_results_significant_bacteria.csv", header = TRUE)
Func_Sum<-functional %>% 
  group_by(Species) %>% 
  summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))

Functional_Reduced<- functional[grepl("Enterobacter sp. SA187", functional$Species) | grepl("Klebsiella oxytoca", functional$Species) | grepl("Leuconostoc pseudomesenteroides", functional$Species)| grepl("Sodalis glossinidius", functional$Species)| grepl("Sodalis praecaptivus", functional$Species) , ] 

Functional_Reduced<-Functional_Reduced[,-c(1:2,4:6,8:11,14)]

Func<- reshape2::melt(Functional_Reduced, id=c("GO_description","Species"))
colnames(Func)[3] <- "Method"
colnames(Func)[4] <- "Frequency"


Func_10 <- Func%>%
  mutate_if(sapply(Func, is.character), as.factor)%>%
  filter(!GO_description=="NO_NAME")%>%
  group_by(GO_description) %>%
  filter(n() == 10) #only GO terms present in the 5 species and both methods

summary(Func_10)

b<-Func_10 %>% 
  nest(data = c(Species, Method,Frequency)) %>% 
  mutate(model = map(data, ~anova(lm(Frequency ~ Species, .))), 
         tidy = map(model, broom::tidy)) %>% 
  select(GO_description, tidy) %>% 
  unnest(tidy)

b$significance<-ifelse(b$p.value<0.005,"significant","not sign.")  

#################################

#In order to perform statistical test across ALL GO, I need to attribute a zero value to the missing species
fill<-reshape2::dcast(Func, GO_description + Method ~ Species,value.var = "Frequency", fun.aggregate = mean)
fill[is.na(fill)] <- 0 #The missing value for certain GO corresponds to true zeros (no hits during alignments)

Func_all<- reshape2::melt(fill, id=c("GO_description","Method"))
colnames(Func_all)[3] <- "Species"
colnames(Func_all)[4] <- "Frequency"


Func_all_m <- Func_all %>%
  mutate_if(sapply(Func_all, is.character), as.factor)%>%
  filter(!GO_description=="NO_NAME")%>%
  group_by(GO_description) %>%
  filter(n() == 10) 

summary(Func_all_m)

#cube root transformation
#Func_all_m$Frequency<-sign(Func_all_m$Frequency) * abs(Func_all_m$Frequency)^(1/3)
#plotNormalHistogram(Func_all_m$Frequency)

#####CHOOSE#######



df <- tibble(x = c(1, 1, 1, 2, 2, 3), y = 1:6, z = 6:1)
# Note that we get one row of output for each unique combination of
# non-nested variables
df2 <- df %>% nest(data = c(y, z))

df %>%
  group_by(x, y) %>%
  summarise(data = list(cur_data())) %>%
  rowwise()


###### ANOVA
all_together <- as.data.frame(all_together)

d <- Func_all_m %>% group_nest(keep = T)
d1 <- d[d$GO_description == "DNA binding",]


group_vars(Func_all_m)

nest(data = c(species, method, freq))

gos <- Func_all_m$GO_description
method <- Func_all_m$Method
species <- Func_all_m$Species
freq <- Func_all_m$Frequency


all_together <- cbind(gos,method,species,freq)

Func_all_m$GO_description <- as.character(Func_all_m$GO_description)
Func_all_m$Method <- as.character(Func_all_m$Method)
Func_all_m$Species <- as.character(Func_all_m$Species)


  
  summarise(data = list(c(Species,Method,Frequency))) %>% rowwise()

levelda <- as.data.frame(levels(Func_all_m$GO_description))

c<-Func_all_m %>% 
  nest(data = c(Species, Method,Frequency)) %>% #nesting doesn't work, I can't fix it
  mutate(model = map(data, ~anova(lm(Frequency ~ Species, .))), 
         tidy = map(model, broom::tidy)) %>% 
  select(GO_description, tidy) %>% 
  unnest(tidy)

###### NON PARAMETRIC
c<-Func_all_m %>% 
  nest(data = c(Species, Method,Frequency)) %>% #nesting doesn't work, I can't fix it
  mutate(model = map(data, ~kruskal.test(Frequency ~ Species, .)), 
         tidy = map(model, broom::tidy)) %>% 
  select(GO_description, tidy) %>% 
  unnest(tidy)

#####CHOOSE#######

c$significance<-ifelse(c$p.value<0.005,"significant","not sign.")  


###### DATA CHECKS ######
anova <- aov(Frequency ~ Species , data = Func_all_m)
# Test for Homogeneity of variances (OK IF around red line)
plot(anova, 1)
# Second Test for Homogeneity of variances (OK if p value significatif)
leveneTest(Frequency ~ Species, data = Func_all_m)
# Test for Normality distribution (OK If most point follow the line)
plot(anova, 2)
# Second test for normality Extract the residuals
anova_residuals <- residuals(object = anova )
# Run Shapiro-Wilk test (OK if p value significatif)
#shapiro.test(x = anova_residuals ) #This test can't be applied to so many data


#### FINAL STAT, CLEAN and EXPORT TABLE ####

significant<-c%>% 
  filter(!term=="Residuals")

stat<-Func_all_m %>%
  group_by(GO_description, Species) %>%
  summarise(
    n=n(),
    mean = mean(Frequency, na.rm = TRUE),
    sd = sd(Frequency, na.rm = TRUE)
  )

stat1<-reshape2::dcast(stat, GO_description ~ Species,value.var = "mean")
colnames(stat1)[2] <- "Enterobacter sp. SA187 - Mean SM/DSM"
colnames(stat1)[3] <- "Klebsiella oxytoca - Mean SM/DSM"
colnames(stat1)[4] <- "Leuconostoc pseudomesenteroides - Mean SM/DSM"
colnames(stat1)[5] <- "Sodalis glossinidius - Mean SM/DSM"
colnames(stat1)[6] <- "Sodalis praecaptivus - Mean SM/DSM"
stat2<-reshape2::dcast(stat, GO_description ~ Species,value.var = "sd")
colnames(stat2)[2] <- "Enterobacter sp. SA187 - SD SM/DSM"
colnames(stat2)[3] <- "Klebsiella oxytoca - SD SM/DSM"
colnames(stat2)[4] <- "Leuconostoc pseudomesenteroides - SD SM/DSM"
colnames(stat2)[5] <- "Sodalis glossinidius - SD SM/DSM"
colnames(stat2)[6] <- "Sodalis praecaptivus - SD SM/DSM"

GO_sign<- merge(stat1,stat2,by="GO_description")
GO_sign<-merge(GO_sign,significant,by="GO_description")
write.table(GO_sign, "GO_significant2.txt", sep="\t", row.names = F)


solenndata <- read.table("./Non Plants/GO_significant.txt")



#make simple dataframe of 2 columns
df <- data.frame(name=c("a","b","b","c","c","c"), count=c(1,2,3,1,2,3))


#nest second column within dataframe
df2 <- df %>% nest(count)





#' Nest by one or more variables
#'
#' @description
#' \Sexpr[results=rd, stage=render]{lifecycle::badge("experimental")}
#'
#' `nest_by()` is closely related to [group_by()]. However, instead of storing
#' the group structure in the metadata, it is made explicit in the data,
#' giving each group key a single row along with a list-column of data frames
#' that contain all the other data.
#'
#' `nest_by()` returns a [rowwise] data frame, which makes operations on the
#' grouped data particularly elegant. See `vignette("rowwise")` for more
#' details.
#'
#' @details
#' Note that `df %>% nest_by(x, y)` is roughly equivalent to
#'
#' ```
#' df %>%
#'   group_by(x, y) %>%
#'   summarise(data = list(cur_data())) %>%
#'   rowwise()
#' ```
#'
#' If you want to unnest a nested data frame, you can either use
#' `tidyr::unnest()` or take advantage of `summarise()`s multi-row behaviour:
#'
#' ```
#' nested %>%
#'   summarise(data)
#' ```
#'
#' @return
#' A [rowwise] data frame. The output has the following properties:
#'
#' * The rows come from the underlying [group_keys()].
#' * The columns are the grouping keys plus one list-column of data frames.
#' * Data frame attributes are **not** preserved, because `nest_by()`
#'   fundamentally creates a new data frame.
#' @section Methods:
#' This function is a **generic**, which means that packages can provide
#' implementations (methods) for other classes. See the documentation of
#' individual methods for extra arguments and differences in behaviour.
#'
#' The following methods are currently available in loaded packages:
#' \Sexpr[stage=render,results=rd]{dplyr:::methods_rd("nest_by")}.
#'
#' @inheritParams group_by
#' @param .key Name of the list column
#' @param .keep Should the grouping columns be kept in the list column.
#' @return A tbl with one row per unique combination of the grouping variables.
#' The first columns are the grouping variables, followed by a list column of tibbles
#' with matching rows of the remaining columns.
#' @keywords internal
#' @export
#' @examples
#' # After nesting, you get one row per group
#' iris %>% nest_by(Species)
#' starwars %>% nest_by(species)
#'
#' # The output is grouped by row, which makes modelling particularly easy
#' models <- mtcars %>%
#'   nest_by(cyl) %>%
#'   mutate(model = list(lm(mpg ~ wt, data = data)))
#' models
#'
#' models %>% summarise(rsq = summary(model)$r.squared)
#' # This is particularly elegant with the broom functions
#' if (requireNamespace("broom", quietly = TRUE)) {
#'   models %>% summarise(broom::glance(model))
#'   models %>% summarise(broom::tidy(model))
#' }
#'
#' # Note that you can also summarise to unnest the data
#' models %>% summarise(data)
nest_by <- function(.data, ..., .key = "data", .keep = FALSE) {
  UseMethod("nest_by")
}

#' @export
nest_by.data.frame <- function(.data, ..., .key = "data", .keep = FALSE) {
  .data <- group_by(.data, ...)
  nest_by.grouped_df(.data, .key = .key, .keep = .keep)
}

#' @export
nest_by.grouped_df <- function(.data, ..., .key = "data", .keep = FALSE) {
  if (!missing(...)) {
    abort(c(
      "Can't re-group while nesting",
      i = "Either `ungroup()` first or don't supply arguments to `nest_by()"
    ))
  }
  
  vars <- group_vars(.data)
  keys <- group_keys(.data)
  keys <- mutate(keys, !!.key := group_split(.env$.data, .keep = .keep))
  rowwise(keys, tidyselect::all_of(vars))
}