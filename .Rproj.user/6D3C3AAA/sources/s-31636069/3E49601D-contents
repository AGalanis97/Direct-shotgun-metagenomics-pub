# Direct shotgun metagenomics captures species abundance of honey samples
# R script author: Anastasios Galanis, 2020
# This script will INSTALL packages that have not been previously installed. 
# If you do not wish to install new packages, please avoid running this script.

# This script will reproduce Supplementary Figures 4, 5, 6
# This script is written in R version 4.0.3

# Load or install (if not present) the required packages
if (!require('tidyverse')) install.packages('tidyverse'); library('tidyverse')
if (!require('ggplot2')) install.packages('ggplot2'); library('ggplot2')
if (!require('dplyr')) install.packages('dplyr'); library('dplyr')
if (!require('here')) install.packages('here'): library('here')
if (!require('taxonomizr')) install.packages('taxonomizr'); library('taxonomizr')

data_path <- "./Figures/Plant_genome/"
output_path <- "./Figures/Plant_genome/"


import_kraken2_files <- list.files(path = data_path, pattern = "\\.kraken2.txt",full.names = T)

kraken2_output_names <- c("Sample_rooted_reads", "Sample_reads","Rank_code","Taxonomic_ID","Name")

kraken2_files <- lapply(import_kraken2_files, function(tble) {
  read.delim(file = tble, 
             sep = '\t',
             header = FALSE,
             strip.white = TRUE)[,-c(1)]
})

naming_list <- list.files(path = data_path,pattern = "\\.kraken2.txt")

# This will name each element (or dataframe) of the list
# according to the filename it originated from.

kraken2_files <- setNames(kraken2_files, substring(naming_list, first  = 1, last = nchar(naming_list) -12))
kraken2_files = lapply(kraken2_files,setNames,kraken2_output_names)
kraken2_files = lapply(kraken2_files,arrange, Taxonomic_ID)

# We will add the classification information. Plase note that this will take a little while to generate so be patient!
classification_ranks <- function(df) {
  taxids <- df[,4]
  Phylum <- as.character(getTaxonomy(taxids, desiredTaxa = "phylum", 'nameNode.sqlite'))
  Kingdom <- as.data.frame(getTaxonomy(taxids, desiredTaxa = "kingdom", 'nameNode.sqlite'))
  Superkingdom <- as.data.frame(getTaxonomy(taxids, desiredTaxa = "superkingdom", 'nameNode.sqlite'))
  cbind(df, Phylum, Kingdom, Superkingdom)
}

kraken2_files = lapply(kraken2_files, classification_ranks)

# Filter out human and Drosophila contamination. For human contamination, the Chordata clade is removed to ensure that no false negatives appear.
kraken2_files_species <- kraken2_files %>% lapply(filter, Rank_code == "S") %>% lapply(filter, Name != "Drosophila melanogaster") %>% lapply(filter, is.na(Phylum)|Phylum != "Chordata")


kraken2_files_filter_species <- lapply(kraken2_files_species, "[", c(2,4))

# The functions below rename the columns.
Hives_species <- lapply(names(kraken2_files_filter_species), function(x){
  colnames(kraken2_files_filter_species[[x]]) <- c(x,"Taxonomic_ID")
  kraken2_files_filter_species[[x]]
})
names(Hives_species) <- names(kraken2_files_filter_species) 


Hives_comparison_species <- Hives_species %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% dplyr::select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))


real_abundance <- read.delim("./Figures/Plant_genome/new_mock_composition_plants.txt.txt")

real_abundance$Percent <- (real_abundance$Reads/sum(real_abundance$Reads))*100

colnames(Hives_comparison_species) <- c("Taxonomic_ID","Abundance")
Hives_comparison_species$Percent <- (Hives_comparison_species$Abundance/sum(Hives_comparison_species$Abundance))*100

Hives_species <- Hives_comparison_species[Hives_comparison_species$Taxonomic_ID %in% real_abundance$Taxonomic_ID,]

no_genome_corr <- Hives_species[,c(1,3)]
colnames(no_genome_corr)[2] <- c("No genome correction")

genome_correction <- inner_join(Hives_comparison_species,real_abundance, by="Taxonomic_ID")
genome_correction$RealGcorr <- genome_correction$Abundance/genome_correction$Genome_size
genome_correction$RealGcorr <- (genome_correction$RealGcorr/sum(genome_correction$RealGcorr))*100

genome_correction$Gcorr <- genome_correction$Reads/genome_correction$Genome_size
genome_correction$Gcorr <- (genome_correction$Gcorr/sum(genome_correction$Gcorr))*100


genome_corrected <- genome_correction[,c(1,8)]
colnames(genome_corrected)[2] <- c("Genome corrected")

real_abundance2 <- real_abundance[,c(3,5)]
colnames(real_abundance2)[2] <- c("Expected abundance")

data_for_plot <- full_join(real_abundance2,genome_corrected, by="Taxonomic_ID")
data_for_plot <- full_join(data_for_plot,no_genome_corr,by="Taxonomic_ID")



genome_corr <- ggscatter(data_for_plot, x="Genome corrected", y= "Expected abundance", size = 3) + stat_cor(size=7, label.x = 4, label.y = 18) + labs(x="Observed Abundance (%)", y="Expected Abundance (%)", title = "") + theme_bw(base_size = 15) + geom_abline(intercept = 0,slope=1.12) + theme(legend.text = element_text(size=10))

ggsave(genome_corr,filename = "genome_corrected.pdf")

no_genome_corr <- ggscatter(data_for_plot, x="No genome correction", y= "Expected abundance", size = 3) + stat_cor(size=7, label.x = 10, label.y = 18) + labs(x="Observed Abundance (%)", y="Expected Abundance (%)", title = "") + theme_bw(base_size = 15) + geom_abline(intercept = 0,slope=0.8) + theme(legend.text = element_text(size=10))

ggsave(no_genome_corr,filename = "no_genome_corrected.pdf")
