# Direct shotgun metagenomics captures species abundance of honey samples
# R script author: Anastasios Galanis, 2020
# This script will INSTALL packages that have not been previously installed. 
# If you do not wish to install new packages, please avoid running this script.

# This script will reproduce Figures X with the tree and differences in families
# This script is written in R version 3.6.3

# Load or install (if not present) the required packages
if (!require('tidyverse')) install.packages('tidyverse'); library('tidyverse')
if (!require('purrr')) install.packages('purrr'); library('purrr')
if (!require('taxonomizr')) install.packages('taxonomizr'); library('taxonomizr')
if (!require('here')) install.packages('here'): library('here')
# Taxonomizr will return the taxonomy for each species. However, this requires that a database is built locally (requires 60 GB of space).
# prepareDatabase('accessionTaxa.sql')
# This process will take over 3 hours on a regular laptop/PC. Othherwise, please consider dowloading the zipped file 
# from here: and simply unzip it in the cloned repository. Place it at the top level, honeyDSM-seq and not in the subfolders.
if (!require('DESeq2')) install.packages('DESeq2'); library('DESeq2')
if (!require('pheatmap')) install.packages('pheatmap'): library('pheatmap')
if (!require('ggtree')) install.packages('ggtree'): library('ggtree')


data_path <- "./Figures/Figure_3/Data_fig_3"

# Now we will build a figure that shows whether Families are overrepresented in DSM or SM
Hives_normalised_counts <- read.csv("./Figures/Figure_3/normalised_counts_family.csv")
Hives_normalised_counts <- Hives_normalised_counts[,-1]

# Round the reads
Rounded_counts <- Hives_normalised_counts %>% mutate_at(colnames(Hives_normalised_counts)[2:9], funs(round(.,digits = 0))) %>% column_to_rownames(var = "Taxonomic_ID")

classification_phyloseq <- function(df) {
  taxids <- rownames(df)
  Phylum <- as.character(getTaxonomy(taxids, desiredTaxa = "phylum", 'accessionTaxa.sql'))
  Superkingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "superkingdom", 'accessionTaxa.sql'))
  Kingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "kingdom", 'accessionTaxa.sql'))
  Class <- as.character(getTaxonomy(taxids, desiredTaxa = "class", 'accessionTaxa.sql'))
  Order <- as.character(getTaxonomy(taxids, desiredTaxa = "order", 'accessionTaxa.sql'))
  Family <- as.character(getTaxonomy(taxids,desiredTaxa = "family", 'accessionTaxa.sql'))
  Genus <- as.character(getTaxonomy(taxids,desiredTaxa = "genus", 'accessionTaxa.sql'))
  Species <- as.character(getTaxonomy(taxids,desiredTaxa = "species", 'accessionTaxa.sql'))
  cbind(df, Superkingdom, Kingdom, Phylum, Class, Order, Family, Genus, Species)
}


Rounded_counts_with_tax <- classification_phyloseq(Rounded_counts)


# Remove NAs from Superkingdom
Rounded_counts_with_tax <- Rounded_counts_with_tax %>% rownames_to_column(var="Taxonomic_ID") %>%  drop_na(Superkingdom)

# Subtract the abundance of DSM and SM to calculate their difference
Family_counts <- Rounded_counts_with_tax[,c(1:9)]
Family_counts$H4 <- Family_counts$DirectSM_H4 - Family_counts$SM_H4
Family_counts$H5 = Family_counts$DirectSM_H5 - Family_counts$SM_H5
Family_counts$H6 = Family_counts$DirectSM_H6 - Family_counts$SM_H6
Family_counts$H7 = Family_counts$DirectSM_H7 - Family_counts$SM_H7

differences <- Family_counts[,c(10:13)]

# Exoirt the names so that we can retrieve the tree.
# The csv file is uploaded in https://www.ncbi.nlm.nih.gov/Taxonomy/CommonTree/wwwcmt.cgi
# The resulting tree is downloaded as phylip format and then loaded on https://icytree.org
# Then it is downloaded as newick format. 
# The newick tree may need some editing to remove occurrences of this symbol -> ' (yes a single one)
ids <- as.data.frame(Rounded_counts_with_tax$Family)
colnames(ids) <- "ids"
write.table(ids,"./Figures/Figure_3/taxids_fam.csv",row.names = FALSE, col.names = FALSE)


# Import the tree
tree1 <- read.tree("./Figures/Figure_3/treefam.newick")

# generate a circular tree
circ <- ggtree(tree1, branch.length = "none", layout = "circular", ladderize = TRUE) + theme_tree()

# Create a dataframe with node numbers and their labels so that we can colour the domains later
node <- circ[["data"]][["node"]]
label <- circ[["data"]][["label"]]
node_table <- cbind(node,label)

# We create a dataframe that colours all nodes grey. Custom colour of gheatmap is black and I don't like it.
colouring <- data.frame(nodes=label,color = "grey")

# Attach the data to the tree
circ2 <- circ %<+% colouring + aes(color = I(color))

# Change the rownames of the dataframe so they match the tree
rownames(differences) <- tree1$tip.label


# Now we set an arbitrary limit of 10000 reads difference between the libraries. This should result in approximately 2% difference in abundance
differences[differences > 10000] <- 10000
differences[differences < -10000] <- -10000

# We can now build the heatmap
p2 <- gheatmap(circ2, differences, colnames_angle=0, colnames_offset_y = 0) + scale_fill_gradientn(colours =c("#440154FF","white","#FDE725FF"),breaks = c(-10000,0,10000), labels=c("SM","","DSM")) + theme(legend.position = "bottom", legend.title.align = 0.5) + guides(fill = guide_colourbar(barwidth = 5, ticks = FALSE, title = "Higher in:", title.position = "top"))

# Add annotation to the Domains as we've done so far 
p3 <- p2  + geom_cladelabel(node = 486, color ="#CC4678FF", align = T, label = "", barsize = 3) + geom_cladelabel(node = 543, color = "#73D055FF", align = T, label = "", barsize = 3, offset = 0) + geom_cladelabel(node = 578, color = "#0D0887FF", align = T, label = "", barsize = 3) + geom_cladelabel(node = 479, color = "#F0F921FF", align = T, label = "", barsize = 3) + geom_cladelabel(node = 575, color = "#ad05f5", align = T, label = "", barsize = 3)

ggsave(p3, filename="circlularplot.pdf", device = "pdf", width = 15, height = 15)



melt_dif <- reshape2::melt(differences)

melt_dif %>%
  ggplot( aes(x=variable, y=value, fill=variable)) +
  geom_boxplot() +
  scale_fill_viridis(discrete = TRUE, alpha=0.6) +
  geom_jitter(color="black", size=0.4, alpha=0.9) +
  theme(
    legend.position="none",
    plot.title = element_text(size=11)) 



ggplot(melt_dif, aes(x = value, y = variable, fill = variable)) +
  geom_density_ridges() +
  theme_ridges() + 
  theme(legend.position = "none")

sum(Rounded_counts$SM_H4 == 0)
