{"frames":[{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"as.data.frame(get_super_kingdom_or_plant(TaxonomicIDs_genus))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"get_super_kingdom_or_plant(TaxonomicIDs_genus)","line_number":0},{"character_number":3,"end_character_number":364,"end_line_number":3,"file":"","func":"ifelse(getTaxonomy(x, desiredTaxa = \"superkingdom\", \"nameNode.sqlite\") != \n    \"Eukaryota\", getTaxonomy(x, desiredTaxa = \"superkingdom\", \n    \"nameNode.sqlite\"), ifelse(getTaxonomy(x, desiredTaxa = \"kingdom\", \n    \"nameNode.sqlite\") == \"Viridiplantae\", getTaxonomy(x, desiredTaxa = \"kingdom\",  ...","line_number":3},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"getTaxonomy(x, desiredTaxa = \"superkingdom\", \"nameNode.sqlite\")","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"getParentNodes(currentIds[stillWorking], sqlFile)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"RSQLite::dbGetQuery(db, \"SELECT tmp.query.id, name,parent, rank FROM tmp.query LEFT OUTER JOIN nodes ON tmp.query.id=nodes.id LEFT OUTER JOIN names ON tmp.query.id=names.id WHERE names.scientific=1 OR names.scientific IS NULL\")","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"RSQLite::dbGetQuery(db, \"SELECT tmp.query.id, name,parent, rank FROM tmp.query LEFT OUTER JOIN nodes ON tmp.query.id=nodes.id LEFT OUTER JOIN names ON tmp.query.id=names.id WHERE names.scientific=1 OR names.scientific IS NULL\")","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":".local(conn, statement, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"dbSendQuery(conn, statement, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"dbSendQuery(conn, statement, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":".local(conn, statement, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"new(\"SQLiteResult\", sql = statement, ptr = result_create(conn@ptr, \n    statement), conn = conn, bigint = conn@bigint)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"initialize(value, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"initialize(value, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"result_create(conn@ptr, statement)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"stop(structure(list(message = \"no such table: nodes\", call = NULL, \n    cppstack = NULL), class = c(\"Rcpp::exception\", \"C++Error\", \n\"error\", \"condition\")))","line_number":0}],"message":"Error: no such table: nodes\n"}