# Create a function to make a scatter plot
scatterplot <- function(df, x, y) {
ggscatter(df, x="Observed_Abundance", y= "Expected_Abundance", color = "Taxonomic_Domain", size = 3, palette = c("#E6AB02","#8a8a5c","#7570B3","#1B9E77","#eb53a1")) + stat_cor(size=7, label.x = 4, label.y = 18) + labs(x="Observed Abundance (%)", y="Expected Abundance (%)", color = "Taxonomic Domain", title = "") + theme_bw(base_size = 15) + geom_abline(intercept = 0, slope =1) + theme(legend.text = element_text(size=10))
}
plot1 <- scatterplot(CCMetagen_community) + xlim(0,20) + ylim(0,20)
plot2 <- scatterplot(DIAMOND_community) + xlim(0,20) + ylim(0,20)
plot3 <- scatterplot(kraken2_community) + xlim(0,20) + ylim(0,20)
plot4 <- scatterplot(minimap2_community) + xlim(0,20) + ylim(0,20)
# Combine the scatter plots into one and edit legend before exporting the final one
final_scatterplot_no_export <- ggarrange(plot1,plot2,plot3,plot4, labels = c("A","B","C","D"),ncol = 2, nrow = 2, common.legend = TRUE, legend = "bottom")
final_scatterplot <- annotate_figure(final_scatterplot_no_export,  top = text_grob("Performance of tools on the community dataset", face = "bold", size = 14), bottom = text_grob("A: CCMetagen, B: DIAMOND, C: kraken2, D: minimap2"))
ggsave(path = "./Figures/Figure_2/", filename = "scatter_plot_performance.pdf", plot= final_scatterplot, height=8, width = 10, device = "pdf")
pca_biplots <- function(dds_rle_object, annotation, filename) {
# Prepare data
dds_object <- DESeq(dds_rle_object, test = "LRT", reduced = ~Method, full = ~Method+Season)
rld_object <- rlog(dds_object, blind=T)
mat <- assay(rld_object)
colnames(mat) <- str_replace(colnames(mat), pattern = "_", replacement = " ")
# ... and annotations
tmp_annot <- annotation
tmp_annot$Taxonomic_ID <- str_replace_all(tmp_annot$Taxonomic_ID, pattern = " ", replacement = "")
tmp_annot$Taxonomic_ID <- as.character(tmp_annot$Taxonomic_ID)
tmp_annot2 <- tmp_annot[match(rownames(mat),tmp_annot$Taxonomic_ID),]
annotation_biplot <- get_super_kingdom_or_plant(tmp_annot2$Taxonomic_ID)
annotation_biplot <- as.data.frame(annotation_biplot)
rownames(annotation_biplot) <- tmp_annot2$Taxonomic_ID
#Set rownames for mat
rownames(mat) <- tmp_annot2[,2]
# PCA time!
pca<-prcomp(t(mat))
# Export PC comeponents
eig <- fviz_eig(pca)
ggsave(plot = eig, filename = paste0(output_path,filename,"PC_components.pdf"))
# Biplot
biplot <- factoextra::fviz_pca_biplot(pca, repel = TRUE, select.var = list(contrib = 20),
col.ind = dds_object$Season, pointsize =2, geom.var = c("text","point"), geom.ind = c("arrow","text"),
fill.var = annotation_biplot$superkingdom, fill.ind = dds_object$Season, pointshape = 21) + scale_fill_manual(name = c("Domain"), breaks = c("Bacteria","Viridiplantae","Eukaryota","Viruses") ,labels = c("Bacteria","Viridiplantae","Eukaryota","Viruses"), values = c("#E6AB02","#1B9E77","#7570B3","#eb53a1")) + theme_minimal() + scale_color_manual(name=c("Season"), labels = c("May","July","November"), values = c("#5cb300","#e8df2a","#8f7c56"))
# this will increase the line width
biplot[["layers"]][[2]][["aes_params"]][["size"]] <- 1
to_export <- biplot + labs(x = paste("PC1:", paste0(round(eig[["data"]][["eig"]][1], digits = 1),"%")), y = paste("PC1:", paste0(round(eig[["data"]][["eig"]][2], digits = 1),"%")))
ggsave(to_export,filename = paste0(output_path,filename,"PCA_biplot.pdf"))
}
library(factoextra)
annotationrows_family_plot
pca_biplots(Hives_dds_RLE_species, annotation = generate_species_v2, filename = "species")
if (!require('tidyverse')) install.packages('tidyverse'); library('tidyverse')
if (!require('purrr')) install.packages('purrr'); library('purrr')
if (!require('taxonomizr')) install.packages('taxonomizr'); library('taxonomizr')
if (!require('here')) install.packages('here'): library('here')
if (!require('RColorBrewer')) install.packages('RColorBrewer'); library('RColorBrewer')
if (!require('pheatmap')) install.packages('pheatmap'): library('pheatmap')
if (!require('EnhancedVolcano')) BiocManager::install('EnhancedVolcano'): library('EnhancedVolcano')
if (!require("DEGreport")) BiocManager::install("DEGreport"): library('DEGreport')
if (!require('DESeq2')) install.packages('DESeq2'); library('DESeq2')
pca_biplots(Hives_dds_RLE_species, annotation = generate_species_v2, filename = "species")
data_path <- "./Figures/Figure_3/Data_fig_3"
output_path <- "./Output_data/Figure_3_output/"
# Vector with the column names of the kraken2 output
kraken2_output_names <- c("Reads_assigned_rooted_at_taxon", "Reads_assigned_directly_to_taxon","Rank_code","Taxonomic_ID","Name")
# Import the kraken2 output
import_kraken2_files <- list.files(path = data_path,pattern = "\\.kraken2",full.names = T)
kraken2_files <- lapply(import_kraken2_files, function(tble) {
read.delim(file = tble,
sep = '\t',
header = FALSE,
strip.white = TRUE)[,-c(1)]
})
naming_list <- list.files(path = data_path,pattern = "\\.kraken2")
# This will name each element (or dataframe) of the list
# according to the filename it originated from.
kraken2_files <- setNames(kraken2_files, substring(naming_list, first  = 1, last = nchar(naming_list) -8))
kraken2_files = lapply(kraken2_files,setNames,kraken2_output_names)
kraken2_files = lapply(kraken2_files,arrange, Taxonomic_ID)
# We will add the classification information. Plase note that this will take a little while to generate so be patient!
classification_ranks <- function(df) {
taxids <- df[,4]
Phylum <- as.character(getTaxonomy(taxids, desiredTaxa = "phylum", 'nameNode.sqlite'))
Kingdom <- as.data.frame(getTaxonomy(taxids, desiredTaxa = "kingdom", 'nameNode.sqlite'))
Superkingdom <- as.data.frame(getTaxonomy(taxids, desiredTaxa = "superkingdom", 'nameNode.sqlite'))
cbind(df, Phylum, Kingdom, Superkingdom)
}
kraken2_files = lapply(kraken2_files, classification_ranks)
# Filter out human and Drosophila contamination. For human contamination, the Chordata clade is removed to ensure that no false negatives appear.
kraken2_files_family <- kraken2_files %>% lapply(filter, Rank_code == "F") %>% lapply(filter, Name != "Drosophilidae") %>% lapply(filter, is.na(Phylum)|Phylum != "Chordata")
kraken2_files_genus <- kraken2_files %>% lapply(filter, Rank_code == "G") %>% lapply(filter, Name != "Drosophila") %>% lapply(filter, is.na(Phylum)|Phylum != "Chordata")
kraken2_files_species <- kraken2_files %>% lapply(filter, Rank_code == "S") %>% lapply(filter, Name != "Drosophila melanogaster") %>% lapply(filter, is.na(Phylum)|Phylum != "Chordata")
# This will generate a table with total reads per sample and level
kraken2_files_filter_genus <- lapply(kraken2_files_genus, "[", c(1,4))
kraken2_files_filter_species <- lapply(kraken2_files_species, "[", c(2,4))
kraken2_files_filter_family <- lapply(kraken2_files_family, "[", c(1,4))
# The functions below rename the columns.
Hives_genus <- lapply(names(kraken2_files_filter_genus), function(x){
colnames(kraken2_files_filter_genus[[x]]) <- c(x,"Taxonomic_ID")
kraken2_files_filter_genus[[x]]
})
names(Hives_genus) <- names(kraken2_files_filter_genus)
Hives_species <- lapply(names(kraken2_files_filter_species), function(x){
colnames(kraken2_files_filter_species[[x]]) <- c(x,"Taxonomic_ID")
kraken2_files_filter_species[[x]]
})
names(Hives_species) <- names(kraken2_files_filter_species)
Hives_family <- lapply(names(kraken2_files_filter_family), function(x){
colnames(kraken2_files_filter_family[[x]]) <- c(x,"Taxonomic_ID")
kraken2_files_filter_family[[x]]
})
names(Hives_family) <- names(kraken2_files_filter_family)
# The functions below collapse the list into a single data frame and all NA values are adjusted to 0
Hives_comparison_genus <- Hives_genus %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% dplyr::select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.),0))
Hives_comparison_species <- Hives_species %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% dplyr::select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))
Hives_comparison_family <- Hives_family %>% purrr::reduce(full_join, by = "Taxonomic_ID") %>% dplyr::select("Taxonomic_ID", everything()) %>% mutate_all(~replace(., is.na(.), 0))
hives_metadata <- read.csv("./Figures/Figure_3/Data_fig_3/metadata_hives.csv")
hives_metadata
Hives_dds_family <- DESeqDataSetFromMatrix(countData = Hives_comparison_family, colData = hives_metadata, design = ~Method + Season, tidy = TRUE)
Hives_dds_RLE_family <- estimateSizeFactors(Hives_dds_family,type = "ratio")
Hives_normalised_counts_family <- counts(Hives_dds_RLE_family, normalized = TRUE)
Hives_counts_vst_family <- varianceStabilizingTransformation(Hives_dds_RLE_family, blind = FALSE)
get_super_kingdom_or_plant <- function(x) {
ifelse(getTaxonomy(x, desiredTaxa = "superkingdom", sqlFile = 'nameNode.sqlite') != "Eukaryota", getTaxonomy(x, desiredTaxa = "superkingdom", sqlFile = 'nameNode.sqlite'), ifelse(getTaxonomy(x, desiredTaxa = "kingdom", sqlFile = 'nameNode.sqlite') == "Viridiplantae", getTaxonomy(x, desiredTaxa = "kingdom",sqlFile =  'nameNode.sqlite'), getTaxonomy(x, desiredTaxa = "superkingdom", sqlFile = 'nameNode.sqlite')))
}
# Create the heatmap
Hives_annotation <- as.data.frame(colData(Hives_dds_family))
TaxonomicIDs_family <- as.numeric(rownames((Hives_counts_vst_family)))
Taxid_taxonomy_family <- as.data.frame(get_super_kingdom_or_plant(TaxonomicIDs_family))
Taxonomic_IDs_dataframe_family <- as.data.frame(TaxonomicIDs_family)
annotationrows_family <- bind_cols(Taxid_taxonomy_family,Taxonomic_IDs_dataframe_family)
colnames(annotationrows_family) <- c("Domain", "Taxonomic_ID")
annotationrows_family <- tibble::column_to_rownames(annotationrows_family, var = "Taxonomic_ID")
ann_colors = list(
Domain = c(Bacteria = "#E6AB02", Viruses = "#eb53a1", Eukaryota = "#7570B3", Viridiplantae = "#1B9E77", Archaea = "#D95F02"),
Season = c(May = "#5cb300", July = "#e8df2a", November = "#8f7c56"))
ordered_counts_family <- order(rowMeans(counts(Hives_dds_RLE_family,normalized=TRUE)), decreasing=TRUE)
final_heatmap_family <- pheatmap(assay(Hives_counts_vst_family)[ordered_counts_family,],cluster_rows = FALSE, show_rownames = FALSE, clustering_distance_cols = "correlation", cluster_cols = TRUE, annotation_col = select(Hives_annotation,Season,Varroa,Population), annotation_row = annotationrows_family, annotation_colors = ann_colors[1:2], main = "Heatmap families", height = 20, scale = 'none')
ggsave(filename="heatmap_family.png", plot=final_heatmap_family, path = output_path)
final_heatmap_family <- pheatmap(assay(Hives_counts_vst_family)[ordered_counts_family,],cluster_rows = FALSE, show_rownames = FALSE, clustering_distance_cols = "correlation", cluster_cols = TRUE, annotation_col = select(Hives_annotation,Season), annotation_row = annotationrows_family, annotation_colors = ann_colors[1:2], main = "Heatmap families", height = 20, scale = 'none')
ggsave(filename="heatmap_family.png", plot=final_heatmap_family, path = output_path)
Hives_dds_genus <- DESeqDataSetFromMatrix(countData = Hives_comparison_genus, colData = hives_metadata, design = ~Method + Season, tidy = TRUE)
Hives_dds_RLE_genus <- estimateSizeFactors(Hives_dds_genus,type = "ratio")
Hives_normalised_counts_genus <- counts(Hives_dds_RLE_genus, normalized = TRUE)
Hives_counts_vst_genus <- varianceStabilizingTransformation(Hives_dds_RLE_genus, blind = FALSE)
Hives_annotation <- as.data.frame(colData(Hives_dds_genus))
TaxonomicIDs_genus <- as.numeric(rownames((Hives_counts_vst_genus)))
Taxid_taxonomy_genus <- as.data.frame(get_super_kingdom_or_plant(TaxonomicIDs_genus))
Taxonomic_IDs_dataframe_genus <- as.data.frame(TaxonomicIDs_genus)
annotationrows_genus <- bind_cols(Taxid_taxonomy_genus,Taxonomic_IDs_dataframe_genus)
colnames(annotationrows_genus) <- c("Domain", "Taxonomic_ID")
annotationrows_genus <- tibble::column_to_rownames(annotationrows_genus, var = "Taxonomic_ID")
ann_colors = list(
Domain = c(Bacteria = "#E6AB02", Viruses = "#eb53a1", Eukaryota = "#7570B3", Viridiplantae = "#1B9E77", Archaea = "#D95F02"),
Season = c(May = "#5cb300", July = "#e8df2a", November = "#8f7c56"))
ordered_counts_genus <- order(rowMeans(counts(Hives_dds_RLE_genus,normalized=TRUE)), decreasing=TRUE)
final_heatmap_genus <- pheatmap(assay(Hives_counts_vst_genus)[ordered_counts_genus,],cluster_rows = FALSE, show_rownames = FALSE, clustering_distance_cols = "correlation", cluster_cols = TRUE, annotation_col = select(Hives_annotation,"Season"), annotation_row = annotationrows_genus, annotation_colors = ann_colors[1:2], main = "Heatmap genera", height = 15)
ggsave(filename="heatmap_genus.png", plot=final_heatmap_genus, path =output_path)
Hives_dds_species <- DESeqDataSetFromMatrix(countData = Hives_comparison_species, colData = hives_metadata, design = ~Method + Season, tidy = TRUE)
Hives_dds_RLE_species <- estimateSizeFactors(Hives_dds_species,type = "ratio")
Hives_normalised_counts_species <- counts(Hives_dds_RLE_species, normalized = TRUE)
Hives_counts_vst_species <- varianceStabilizingTransformation(Hives_dds_RLE_species, blind = FALSE)
# Export the counts because it will be needed for the next figure
classification_deseq_export(normalised_reads = Hives_normalised_counts_species, path_filename = "./Figures/Figure_3/normalised_methodseason_species.csv")
Hives_annotation <- as.data.frame(colData(Hives_dds_species))
TaxonomicIDs_species <- as.numeric(rownames((Hives_counts_vst_species)))
Taxid_taxonomy_species <- as.data.frame(get_super_kingdom_or_plant(TaxonomicIDs_species))
Taxonomic_IDs_dataframe_species <- as.data.frame(TaxonomicIDs_species)
generate_species <- getTaxonomy(TaxonomicIDs_species,desiredTaxa = "species", 'nameNode.sqlite')
generate_species = as.data.frame(generate_species)
generate_species$species = as.character(generate_species$species)
generate_species_omit_na <- na.omit(generate_species)
generate_species_omit_na <- rownames_to_column(generate_species_omit_na, var = "Taxonomic_ID")
# 4 species were not identified and therefore we have to replace manually by looking up to the NCBI taxonomy database.
# I create a vector so that it is clear which Taxnomic IDs I am going to replace.
unidentified_species <- subset(generate_species,is.na(generate_species$species))
unidentified_species_vector <- rownames(unidentified_species)
unidentified_species_names_ncbi <- c("Streptomyces sp. WAC08241","Actinomadura sp. WMMB 499","Exaiptasia diaphana","Pseudomonas mediterranea","Xanthomonas hortorum pv. gardneri")
unidentified_species$species <- unidentified_species_names_ncbi
unidentified_species <- rownames_to_column(unidentified_species, var = "Taxonomic_ID")
# And now we will add them back to the original dataframe
generate_species_v2 <- rbind(generate_species_omit_na,unidentified_species)
annotationrows_species <- bind_cols(Taxid_taxonomy_species,Taxonomic_IDs_dataframe_species,generate_species_v2)
annotationrows_species <- annotationrows_species[,-c(2,3)]
colnames(annotationrows_species) <- c("Domain","Species")
annotationrows_species <- tibble::column_to_rownames(annotationrows_species, var = "Species")
ann_colors = list(
Domain = c(Bacteria = "#E6AB02", Viruses = "#eb53a1", Eukaryota = "#7570B3", Viridiplantae = "#1B9E77", Archaea = "#D95F02"),
Season = c(May = "#5cb300", July = "#e8df2a", November = "#8f7c56"))
rownames(Hives_counts_vst_species) <- generate_species_v2$species
rownames(annotationrows_species) <- generate_species_v2$species
ordered_counts_species <- order(rowMeans(counts(Hives_dds_RLE_species,normalized=TRUE)), decreasing=TRUE)[1:30]
final_heatmap_species <- pheatmap(assay(Hives_counts_vst_species)[ordered_counts_species,],clustering_distance_cols = "correlation", cluster_rows = FALSE, show_rownames = TRUE, cluster_cols = TRUE, annotation_col = select(Hives_annotation,Season), labels_col = c("DirectSM H4","DirectSM H5","DirectSM H6" ,"DirectSM H7","SM H4", "SM H5","SM H6","SM H7"), annotation_row = annotationrows_species, annotation_colors = ann_colors[1:2], height = 100, fontsize = 20)
ggsave(filename="top30_heatmap_species.pdf",device="pdf", plot=final_heatmap_species, height = 13, width = 15, path = output_path)
family_volcano_plot <- get_volcano_plot(Hives_dds_RLE_family, contrast = c('Method','Direct_SM','SM'), annotation = Taxid_taxonomy_family)
genus_volcano_plot <- get_volcano_plot(Hives_dds_RLE_genus, contrast = c('Method','Direct_SM','SM'), annotation = Taxid_taxonomy_genus)
species_volcano_plot <- get_volcano_plot(Hives_dds_RLE_species, contrast = c('Method','Direct_SM','SM'), annotation = Taxid_taxonomy_species)
extract_lfc_names <- function(volcano.plot,outputname) {
data_plot <- volcano.plot$data
taxids_data <- rownames(data_plot)
df_lfc_subset <- cbind(taxids_data,data_plot)
colnames(df_lfc_subset) <- c("Taxonomic_ID","log2fc")
df_lfc_subset <- subset(df_lfc, abs(df_lfc$log2fc) > 1)
taxids <- df_lfc_subset$Taxonomic_ID
Phylum <- as.character(getTaxonomy(taxids, desiredTaxa = "phylum",'nameNode.sqlite'))
Superkingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "superkingdom",'nameNode.sqlite'))
Kingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "kingdom", 'nameNode.sqlite'))
Class <- as.character(getTaxonomy(taxids, desiredTaxa = "class", 'nameNode.sqlite'))
Order <- as.character(getTaxonomy(taxids, desiredTaxa = "order", 'nameNode.sqlite'))
Family <- as.character(getTaxonomy(taxids,desiredTaxa = "family", 'nameNode.sqlite'))
Genus <- as.character(getTaxonomy(taxids,desiredTaxa = "genus", 'nameNode.sqlite'))
Species <- as.character(getTaxonomy(taxids,desiredTaxa = "species", sqlFile = 'nameNode.sqlite'))
df_lfc_export <- cbind(df_lfc_subset, Superkingdom, Kingdom, Phylum, Class, Order, Family, Genus, Species)
write.csv(df_lfc_export, file = outputname)
}
extract_lfc_names(family_volcano_plot,outputname = "./Output_data/Figure_3_output/family_lfc.csv")
extract_lfc_names(genus_volcano_plot,outputname = "./Output_data/Figure_3_output/genus_lfc.csv")
extract_lfc_names(species_volcano_plot,outputname = "./Output_data/Figure_3_output/species_lfc.csv")
# Save the MA plots
ggsave(plot = family_volcano_plot, filename = "volcano_plot_family.pdf", path = output_path)
ggsave(plot = genus_volcano_plot, filename = "volcano_plot_genus.pdf", path = output_path)
ggsave(plot = species_volcano_plot, filename = "volcano_plot_species.pdf", path = output_path)
plotDiffAbund <- function(colNums, DESeq_RLE_object, title, level = c("species","genus","family","order","phylum")) {
dds_object <- DESeq(DESeq_RLE_object, test = "LRT", reduced = ~Method, full = ~Method+Season)
rld <- rlog(dds_object, blind=F)
results <- subset(results(dds_object), padj < 0.05)
# make the lists
upgenes <- rownames(head(results[ order( results$log2FoldChange ), ], n=40))
downgenes <- rownames(head(results[ order( -results$log2FoldChange ), ], n=40))
# this gives us the rows we want
rows <- match(upgenes, row.names(rld))
mat <- assay(rld)[rows,c(1:8)]
mat <- mat - rowMeans(mat)
TaxonomicIDs_species <- as.numeric(rownames((mat)))
Taxid_taxonomy_species <- as.data.frame(get_super_kingdom_or_plant(TaxonomicIDs_species))
Taxonomic_IDs_dataframe_species <- as.data.frame(TaxonomicIDs_species)
generate_species <- getTaxonomy(TaxonomicIDs_species,desiredTaxa = level, sqlFile = 'nameNode.sqlite')
generate_species = as.data.frame(generate_species)
generate_species[,1] = as.character(generate_species[,1])
annotationrows_species1 <- bind_cols(Taxid_taxonomy_species,Taxonomic_IDs_dataframe_species,generate_species)
colnames(annotationrows_species1) <- c("Domain", "Taxonomic_ID", level)
annotationrows_species1 = annotationrows_species1[,-2]
annotationrows_species1 <- tibble::column_to_rownames(annotationrows_species1, var = level)
rownames(mat) <- generate_species[,1]
# the labels are hard coded at the moment :(
df <- as.data.frame(colData(rld)[c("Season")])
pheatmap(mat, fontsize=15, annotation_colors = ann_colors, annotation_row = annotationrows_species1, cluster_rows = FALSE, show_rownames = TRUE, height = 100, angle_col = "270", cluster_cols = TRUE, show_colnames = TRUE, border_color = NA, annotation_col = df, labels_col = c("DirectSM H4","DirectSM H5","DirectSM H6" ,"DirectSM H7","SM H4", "SM H5","SM H6","SM H7"), scale = 'row')
}
differentially_abundant_species <- plotDiffAbund(
DESeq_RLE_object =Hives_dds_RLE_species,
colNums = c(1:8),
level = "species")
differentially_abundant_genera <- plotDiffAbund(
DESeq_RLE_object =Hives_dds_RLE_genus,
colNums = c(1:8),
level = "genus")
differentially_abundant_families <- plotDiffAbund(
DESeq_RLE_object =Hives_dds_RLE_family,
colNums = c(1:8),
level = "family")
ggsave(plot= differentially_abundant_species,filename = "./Figures/Figure_3/significantly_abundant_species.pdf",device="pdf", height = 10, width = 14)
ggsave(plot= differentially_abundant_genera,filename = "./Figures/Figure_3/significantly_abundant_genera.pdf",device="pdf", height = 10, width = 14)
ggsave(plot= differentially_abundant_families,filename = "./Figures/Figure_3/significantly_abundant_families.pdf",device="pdf", height = 10, width = 14)
sig_res_LRT <- function(dds_object1, meta, replacegenes) {
dds_object2 <- DESeq(dds_object1, test = "LRT", reduced = ~Method, full = ~Method+Season)
res_LRT <- results(dds_object2)
sig <- res_LRT %>% data.frame() %>% rownames_to_column(var="Taxonomic_ID") %>% as_tibble() %>%  filter(padj < 0.05)
clustering <- sig %>% arrange(padj) %>% head(n=1000)
rld <- rlog(dds_object2, blind = F)
rld_mat <- assay(rld)
cluster_rlog <- cluster_rlog <- rld_mat[clustering$Taxonomic_ID, ]
meta$Method <- c("DirectSM","DirectSM","DirectSM","DirectSM","SM","SM","SM","SM")
results_deg <- degPatterns(cluster_rlog, metadata = meta, time = "Season", col="Method", minc = 3)
primary_plot <- degPlotCluster(results_deg$normalized, time = "Season", color = "Method", facet = T) + theme_bw() + scale_x_discrete(limits = c("May","July","November")) + scale_colour_brewer(type = "qual", palette = "Set1") + labs(title = "", y = "Z-score of abundance")
primary_plot$data$title <- str_replace(primary_plot$data$title, "genes", print(replacegenes));
return(primary_plot)
}
hives_metadata_new <- hives_metadata %>% column_to_rownames(var = "X")
family_sig_res <- sig_res_LRT(Hives_dds_RLE_family, meta = hives_metadata_new, replacegenes = "Families")
genus_sig_res <- sig_res_LRT(Hives_dds_RLE_genus, meta = hives_metadata_new, replacegenes = "Genera")
species_sig_res <- sig_res_LRT(Hives_dds_RLE_species, meta = hives_metadata_new, replacegenes = "Species")
ggsave(plot = family_sig_res, filename = "./Figures/Figure_3/DEGpattern_family.pdf", height = 4)
ggsave(plot = genus_sig_res, filename = "./Figures/Figure_3/DEGpattern_genus.pdf", height = 4)
ggsave(plot = species_sig_res, filename = "./Figures/Figure_3/DEGpattern_species.pdf", height = 4)
pca_biplots <- function(dds_rle_object, annotation, filename) {
# Prepare data
dds_object <- DESeq(dds_rle_object, test = "LRT", reduced = ~Method, full = ~Method+Season)
rld_object <- rlog(dds_object, blind=T)
mat <- assay(rld_object)
colnames(mat) <- str_replace(colnames(mat), pattern = "_", replacement = " ")
# ... and annotations
tmp_annot <- annotation
tmp_annot$Taxonomic_ID <- str_replace_all(tmp_annot$Taxonomic_ID, pattern = " ", replacement = "")
tmp_annot$Taxonomic_ID <- as.character(tmp_annot$Taxonomic_ID)
tmp_annot2 <- tmp_annot[match(rownames(mat),tmp_annot$Taxonomic_ID),]
annotation_biplot <- get_super_kingdom_or_plant(tmp_annot2$Taxonomic_ID)
annotation_biplot <- as.data.frame(annotation_biplot)
rownames(annotation_biplot) <- tmp_annot2$Taxonomic_ID
#Set rownames for mat
rownames(mat) <- tmp_annot2[,2]
# PCA time!
pca<-prcomp(t(mat))
# Export PC comeponents
eig <- fviz_eig(pca)
ggsave(plot = eig, filename = paste0(output_path,filename,"PC_components.pdf"))
# Biplot
biplot <- factoextra::fviz_pca_biplot(pca, repel = TRUE, select.var = list(contrib = 20),
col.ind = dds_object$Season, pointsize =2, geom.var = c("text","point"), geom.ind = c("arrow","text"),
fill.var = annotation_biplot$superkingdom, fill.ind = dds_object$Season, pointshape = 21) + scale_fill_manual(name = c("Domain"), breaks = c("Bacteria","Viridiplantae","Eukaryota","Viruses") ,labels = c("Bacteria","Viridiplantae","Eukaryota","Viruses"), values = c("#E6AB02","#1B9E77","#7570B3","#eb53a1")) + theme_minimal() + scale_color_manual(name=c("Season"), labels = c("May","July","November"), values = c("#5cb300","#e8df2a","#8f7c56"))
# this will increase the line width
biplot[["layers"]][[2]][["aes_params"]][["size"]] <- 1
to_export <- biplot + labs(x = paste("PC1:", paste0(round(eig[["data"]][["eig"]][1], digits = 1),"%")), y = paste("PC1:", paste0(round(eig[["data"]][["eig"]][2], digits = 1),"%")))
ggsave(to_export,filename = paste0(output_path,filename,"PCA_biplot.pdf"))
}
annotationrows_family_plot <- getTaxonomy(rownames(annotationrows_family),desiredTaxa = "family", 'nameNode.sqlite')
annotationrows_family_plot <- as.data.frame(annotationrows_family_plot) %>% rownames_to_column(var="Taxonomic_ID")
annotationrows_genus_plot <- getTaxonomy(rownames(annotationrows_genus),desiredTaxa = "genus", 'nameNode.sqlite')
annotationrows_genus_plot <- as.data.frame(annotationrows_genus_plot) %>% rownames_to_column(var="Taxonomic_ID")
annotationrows_genus_plot$genus <- as.character(annotationrows_genus_plot$genus)
# Raplce row 740 with Bacillus walking sticks because it is recognised as a duplicate
# Remember Bacillus is also a bacterium!
annotationrows_genus_plot[740,2] <- "Bacillus (walking stick)"
# Create the plots
pca_biplots(Hives_dds_RLE_species, annotation = generate_species_v2, filename = "species")
pca_biplots(Hives_dds_RLE_genus, annotation = annotationrows_genus_plot , filename = "genus")
pca_biplots(Hives_dds_RLE_family, annotation = annotationrows_family_plot , filename = "family")
ann_colors
differentially_abundant_species
ggsave(plot= differentially_abundant_species,filename = "./Figures/Figure_3/significantly_abundant_species.pdf",device="pdf", height = 10, width = 14)
ggsave(plot= differentially_abundant_genera,filename = "./Figures/Figure_3/significantly_abundant_genera.pdf",device="pdf", height = 10, width = 14)
ggsave(plot= differentially_abundant_families,filename = "./Figures/Figure_3/significantly_abundant_families.pdf",device="pdf", height = 10, width = 14)
if (!require('tidyverse')) install.packages('tidyverse'); library('tidyverse')
if (!require('purrr')) install.packages('purrr'); library('purrr')
if (!require('taxonomizr')) install.packages('taxonomizr'); library('taxonomizr')
if (!require('here')) install.packages('here'): library('here')
# Taxonomizr will return the taxonomy for each species. However, this requires that a database is built locally (requires 60 GB of space).
# prepareDatabase('nameNode.sqlite')
# This process will take over 3 hours on a regular laptop/PC. Othherwise, please consider dowloading the zipped file
# from here: and simply unzip it in the cloned repository. Place it at the top level, honeyDSM-seq and not in the subfolders.
if (!require('DESeq2')) install.packages('DESeq2'); library('DESeq2')
if (!require('pheatmap')) install.packages('pheatmap'): library('pheatmap')
if (!require('ggtree')) install.packages('ggtree'): library('ggtree')
data_path <- "./Figures/Figure_3/Data_fig_3"
# Import the tree
tree1 <- read.tree("./Figures/Figure_3/treefam.newick")
# generate a circular tree
circ <- ggtree(tree1, branch.length = "none", layout = "circular", ladderize = TRUE) + theme_tree()
# Create a dataframe with node numbers and their labels so that we can colour the domains later
node <- circ[["data"]][["node"]]
label <- circ[["data"]][["label"]]
node_table <- cbind(node,label)
# We create a dataframe that colours all nodes grey. Custom colour of gheatmap is black and I don't like it.
colouring <- data.frame(nodes=label,color = "grey")
# Attach the data to the tree
circ2 <- circ %<+% colouring + aes(color = I(color))
# Import the padj values
padj_values_family <- read.csv("./Figures/Figure_3/padj_family_method.csv") %>% select(.,padj)
rownames(padj_values_family) = tree1$tip.label
# We can now build the heatmap
p2 <- gheatmap(circ2, padj_values_family, colnames_angle=0, colnames_offset_y = 0, width = 0.3, colnames = F) + scale_fill_gradientn(colours =c("#CC0000","white","#5B8FF8"),breaks = c(0,1), labels=c("0","1"), limits=c(0,1)) + theme(legend.position = "bottom",legend.title.align = 0.5) + guides(fill = guide_colourbar(barwidth = 5, ticks = FALSE, title = "p-value (adjusted)", title.position = "top"))
# Add annotation to the Domains as we've done so far
p3 <- p2  + geom_cladelabel(node = 486, color ="#CC4678FF", align = T, label = "", barsize = 3) + geom_cladelabel(node = 543, color = "#73D055FF", align = T, label = "", barsize = 3, offset = 0) + geom_cladelabel(node = 578, color = "#0D0887FF", align = T, label = "", barsize = 3) + geom_cladelabel(node = 479, color = "#F0F921FF", align = T, label = "", barsize = 3) + geom_cladelabel(node = 575, color = "#ad05f5", align = T, label = "", barsize = 3)
p3
# We can now build the heatmap
p2 <- gheatmap(circ2, padj_values_family, colnames_angle=0, colnames_offset_y = 0, width = 0.3, colnames = F) + scale_fill_brewer(type="div", palette = "RdYlBu") + theme(legend.position = "bottom",legend.title.align = 0.5) + guides(fill = guide_colourbar(barwidth = 5, ticks = FALSE, title = "p-value (adjusted)", title.position = "top"))
p2
?scale_fill_brewer
# We can now build the heatmap
p2 <- gheatmap(circ2, padj_values_family, colnames_angle=0, colnames_offset_y = 0, width = 0.3, colnames = F) + scale_fill_brewer(palette = "RdYlBu") + theme(legend.position = "bottom",legend.title.align = 0.5) + guides(fill = guide_colourbar(barwidth = 5, ticks = FALSE, title = "p-value (adjusted)", title.position = "top"))
p2
brewer.pal(3, "RdYlBu")
brewer.pal(7, "RdYlBu")
# We can now build the heatmap
p2 <- gheatmap(circ2, padj_values_family, colnames_angle=0, colnames_offset_y = 0, width = 0.3, colnames = F) + scale_fill_gradientn(colours =c("#D73027","white","#4575B4"),breaks = c(0,1), labels=c("0","1"), limits=c(0,1)) + theme(legend.position = "bottom",legend.title.align = 0.5) + guides(fill = guide_colourbar(barwidth = 5, ticks = FALSE, title = "p-value (adjusted)", title.position = "top"))
p2
# We can now build the heatmap
p2 <- gheatmap(circ2, padj_values_family, colnames_angle=0, colnames_offset_y = 0, width = 0.1, colnames = F) + scale_fill_gradientn(colours =c("#D73027","white","#4575B4"),breaks = c(0,1), labels=c("0","1"), limits=c(0,1)) + theme(legend.position = "bottom",legend.title.align = 0.5) + guides(fill = guide_colourbar(barwidth = 5, ticks = FALSE, title = "p-value (adjusted)", title.position = "top"))
p2
padj_values_family
library(ggnewscale)
p4 <- p3 + new_scale_fill()
# Import data about log2fc
logfc_data <- read.csv("./Output_data/Figure_3_output/family_lfc.csv")
logfc_data
View(logfc_data)
logfc_data_select <- logfc_data %>% select(c("log2fc","Family"))
logfc_data_select
View(logfc_data_select)
View(logfc_data_select)
View(padj_values_family)
trial <- print(logfc_data$Family)
trial <- shQuote(logfc_data_select$Family)
trial <- as.data.frame(shQuote(logfc_data_select$Family))
View(trial)
logfc_data_select$Family <- shQuote(logfc_data_select$Family)
View(logfc_data_select)
families_not_lfc <- logfc_data_select$Family %in% tree1$tip.label
families_not_lfc <- subset(tree1$tip.label, !(tree1$tip.label %in% logfc_data_select$Family))
families_not_lfc <- as.data.frame(subset(tree1$tip.label, !(tree1$tip.label %in% logfc_data_select$Family)))
View(families_not_lfc)
logfc_data_select <- rbind(logfc_data_select,families_not_lfc)
logfc_data_select$Family <- rbind(logfc_data_select$Family,families_not_lfc)
View(families_not_lfc)
logfc_data_select$Family <- as.character(shQuote(logfc_data_select$Family))
View(logfc_data_select)
logfc_data_select$Family <- shQuote(logfc_data_select$Family)
View(logfc_data_select)
logfc_data <- read.csv("./Output_data/Figure_3_output/family_lfc.csv")
logfc_data_select <- logfc_data %>% select(c("log2fc","Family"))
logfc_data_select$Family <- shQuote(logfc_data_select$Family)
View(logfc_data_select)
families_not_lfc <- as.character((subset(tree1$tip.label, !(tree1$tip.label %in% logfc_data_select$Family))))
logfc_data_select$Family <- rbind(logfc_data_select$Family,families_not_lfc)
families_not_lfc <- as.data.frame(as.character((subset(tree1$tip.label, !(tree1$tip.label %in% logfc_data_select$Family)))))
View(families_not_lfc)
families_not_lfc <- as.data.frame((subset(tree1$tip.label, !(tree1$tip.label %in% logfc_data_select$Family))))
newtrial <- as.character(families_not_lfc)
newtrial <- as.character(families_not_lfc$`(subset(tree1$tip.label, !(tree1$tip.label %in% logfc_data_select$Family)))`)
newtrial
extract_lfc_names <- function(volcano.plot,outputname) {
data_plot <- volcano.plot$data
taxids_data <- rownames(data_plot)
df_lfc_subset <- cbind(taxids_data,data_plot)
colnames(df_lfc_subset) <- c("Taxonomic_ID","log2fc")
# df_lfc_subset <- subset(df_lfc, abs(df_lfc$log2fc) > 1)
taxids <- df_lfc_subset$Taxonomic_ID
Phylum <- as.character(getTaxonomy(taxids, desiredTaxa = "phylum",'nameNode.sqlite'))
Superkingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "superkingdom",'nameNode.sqlite'))
Kingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "kingdom", 'nameNode.sqlite'))
Class <- as.character(getTaxonomy(taxids, desiredTaxa = "class", 'nameNode.sqlite'))
Order <- as.character(getTaxonomy(taxids, desiredTaxa = "order", 'nameNode.sqlite'))
Family <- as.character(getTaxonomy(taxids,desiredTaxa = "family", 'nameNode.sqlite'))
Genus <- as.character(getTaxonomy(taxids,desiredTaxa = "genus", 'nameNode.sqlite'))
Species <- as.character(getTaxonomy(taxids,desiredTaxa = "species", sqlFile = 'nameNode.sqlite'))
df_lfc_export <- cbind(df_lfc_subset, Superkingdom, Kingdom, Phylum, Class, Order, Family, Genus, Species)
write.csv(df_lfc_export, file = outputname)
}
extract_lfc_names(family_volcano_plot,outputname = "./Output_data/Figure_3_output/family_lfc.csv")
extract_lfc_names(genus_volcano_plot,outputname = "./Output_data/Figure_3_output/genus_lfc.csv")
extract_lfc_names(species_volcano_plot,outputname = "./Output_data/Figure_3_output/species_lfc.csv")
# Import data about log2fc
logfc_data <- read.csv("./Output_data/Figure_3_output/family_lfc.csv")
View(logfc_data)
rownames(padj_values_family)
logfc_data_select <- logfc_data %>% select(c("log2fc","Family"))
logfc_data_select$Family <- shQuote(logfc_data_select$Family)
View(logfc_data_select)
logfc_data_select
tree1$tip.label
View(logfc_data)
View(logfc_data_select)
padj_values_family
padj_values_family <- read.csv("./Figures/Figure_3/padj_family_method.csv") %>% select(.,padj)
padj_values_family
logfc_data <- read.csv("./Output_data/Figure_3_output/family_lfc.csv")
View(logfc_data)
tree1$edge
tree1$Nnode
tree1$node.label
tree1$root.edge
View(logfc_data)
extract_lfc_names <- function(volcano.plot,outputname) {
data_plot <- volcano.plot$data
taxids_data <- rownames(data_plot)
df_lfc_subset <- cbind(taxids_data,data_plot)
colnames(df_lfc_subset) <- c("Taxonomic_ID","log2fc")
df_lfc_subset <- subset(df_lfc, abs(df_lfc$log2fc) > 1)
taxids <- df_lfc_subset$Taxonomic_ID
Phylum <- as.character(getTaxonomy(taxids, desiredTaxa = "phylum",'nameNode.sqlite'))
Superkingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "superkingdom",'nameNode.sqlite'))
Kingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "kingdom", 'nameNode.sqlite'))
Class <- as.character(getTaxonomy(taxids, desiredTaxa = "class", 'nameNode.sqlite'))
Order <- as.character(getTaxonomy(taxids, desiredTaxa = "order", 'nameNode.sqlite'))
Family <- as.character(getTaxonomy(taxids,desiredTaxa = "family", 'nameNode.sqlite'))
Genus <- as.character(getTaxonomy(taxids,desiredTaxa = "genus", 'nameNode.sqlite'))
Species <- as.character(getTaxonomy(taxids,desiredTaxa = "species", sqlFile = 'nameNode.sqlite'))
df_lfc_export <- cbind(df_lfc_subset, Superkingdom, Kingdom, Phylum, Class, Order, Family, Genus, Species)
write.csv(df_lfc_export, file = outputname)
}
extract_lfc_names(family_volcano_plot,outputname = "./Output_data/Figure_3_output/family_lfc.csv")
extract_lfc_names <- function(volcano.plot,outputname) {
data_plot <- volcano.plot$data
taxids_data <- rownames(data_plot)
df_lfc_subset <- cbind(taxids_data,data_plot)
colnames(df_lfc_subset) <- c("Taxonomic_ID","log2fc")
df_lfc_subset <- subset(df_lfc, abs(df_lfc$log2fc) > 1)
taxids <- df_lfc_subset$Taxonomic_ID
Phylum <- as.character(getTaxonomy(taxids, desiredTaxa = "phylum",'nameNode.sqlite'))
Superkingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "superkingdom",'nameNode.sqlite'))
Kingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "kingdom", 'nameNode.sqlite'))
Class <- as.character(getTaxonomy(taxids, desiredTaxa = "class", 'nameNode.sqlite'))
Order <- as.character(getTaxonomy(taxids, desiredTaxa = "order", 'nameNode.sqlite'))
Family <- as.character(getTaxonomy(taxids,desiredTaxa = "family", 'nameNode.sqlite'))
Genus <- as.character(getTaxonomy(taxids,desiredTaxa = "genus", 'nameNode.sqlite'))
Species <- as.character(getTaxonomy(taxids,desiredTaxa = "species", sqlFile = 'nameNode.sqlite'))
df_lfc_export <- cbind(df_lfc_subset, Superkingdom, Kingdom, Phylum, Class, Order, Family, Genus, Species)
write.csv(df_lfc_export, file = outputname)
}
extract_lfc_names(family_volcano_plot,outputname = "./Output_data/Figure_3_output/family_lfc.csv")
extract_lfc_names <- function(volcano.plot,outputname) {
data_plot <- volcano.plot$data
taxids_data <- rownames(data_plot)
df_lfc_subset <- cbind(taxids_data,data_plot)
colnames(df_lfc_subset) <- c("Taxonomic_ID","log2fc")
df_lfc_subset <- subset(df_lfc_subset, abs(df_lfc_subset$log2fc) > 1)
taxids <- df_lfc_subset$Taxonomic_ID
Phylum <- as.character(getTaxonomy(taxids, desiredTaxa = "phylum",'nameNode.sqlite'))
Superkingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "superkingdom",'nameNode.sqlite'))
Kingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "kingdom", 'nameNode.sqlite'))
Class <- as.character(getTaxonomy(taxids, desiredTaxa = "class", 'nameNode.sqlite'))
Order <- as.character(getTaxonomy(taxids, desiredTaxa = "order", 'nameNode.sqlite'))
Family <- as.character(getTaxonomy(taxids,desiredTaxa = "family", 'nameNode.sqlite'))
Genus <- as.character(getTaxonomy(taxids,desiredTaxa = "genus", 'nameNode.sqlite'))
Species <- as.character(getTaxonomy(taxids,desiredTaxa = "species", sqlFile = 'nameNode.sqlite'))
df_lfc_export <- cbind(df_lfc_subset, Superkingdom, Kingdom, Phylum, Class, Order, Family, Genus, Species)
write.csv(df_lfc_export, file = outputname)
}
extract_lfc_names(family_volcano_plot,outputname = "./Output_data/Figure_3_output/family_lfc.csv")
