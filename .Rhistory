getwd()
setwd("~/Figures/Figure_2/Data_fig_2/")
# Change the working directory to something reproducible
setwd(~/Figures/Figure_2/Data_fig_2/)
getwd()
setwd("./Figures")
getwd()
# Change the working directory to something reproducible
setwd("./Figures/Figure_2/Data_fig_2/")
setwd("./Figures/Figure_2/Data_fig_2/")
getwd()
setwd(..)
setwd(.)
setwd("..")
getwd()
setwd("./Figures/Figure_2/Data_fig_2/")
getwd()
if (!require('tidyverse')) install.packages('tidyverse'); library('tidyverse')
if (!require('stringr')) install.packages('stringr'); library('stringr')
if (!require('ggplot2')) install.packages('ggplot2'); library('ggplot2')
if (!require('ggsci')) install.packages('ggsci'); library('ggsci')
if (!require('here')) install.packages('here'); library('here')
getwd()
plant_species <- list.files(path = "./Data_fig_2", recursive = TRUE, pattern = "species_plants.csv")
plant_species <- list.files(path = "Figure_2/Data_fig_2", recursive = TRUE, pattern = "species_plants.csv")
plant_species <- list.files(path = "./Figure_2/Data_fig_2", recursive = TRUE, pattern = "species_plants.csv")
plant_species <- list.files(path = "/Figures/Figure_2/Data_fig_2", recursive = TRUE, pattern = "species_plants.csv")
plant_species <- list.files(path = "./Figures/Figure_2/Data_fig_2", recursive = TRUE, pattern = "species_plants.csv")
CCMetagen_community <- read.csv("CCMetagen_community.csv")
getwd()
CCMetagen_community <- read.csv("./Figures/Figure_2/Data_fig_2/CCMetagen_community.csv")
q_colors =  3 # for no particular reason
v_colors =  viridis(q_colors, option = "plasma")
v_colours = c(v_colors,"#73D055FF")
library(scales)
v_colors =  viridis(q_colors, option = "plasma")
if (!require('hrbrthemes')) install.packages('hrbrthemes'); library('hrbrthemes')
q_colors =  3 # for no particular reason
v_colors =  viridis(q_colors, option = "plasma")
v_colours = c(v_colors,"#73D055FF")
v_colors =  viridis(q_colors, option = "plasma")
ggsave(filename="final_barplot_others.pdf",plot = final_barplot_others, path = "./Figures/Figure_2/Data_fig_2/", device = "pdf", width = 9, height = 5)
# Direct shotgun metagenomics captures species abundance of honey samples
# R script author: Anastasios Galanis, 2020
# This script will INSTALL packages that have not been previously installed.
# If you do not wish to install new packages, please avoid running this script.
# This script will reproduce Figures 2 A, B, and C
# This script is written in R version 3.6.3
# Load or install (if not present) the required packages
if (!require('tidyverse')) install.packages('tidyverse'); library('tidyverse')
if (!require('stringr')) install.packages('stringr'); library('stringr')
if (!require('ggplot2')) install.packages('ggplot2'); library('ggplot2')
if (!require('ggsci')) install.packages('ggsci'); library('ggsci')
if (!require('here')) install.packages('here'); library('here')
if (!require('ggpubr')) install.packages('ggpubr'); library('ggpubr')
# Read the necessary classification resultfiles specific to Viridiplantae at Species level
plant_species <- list.files(path = "./Figures/Figure_2/Data_fig_2", recursive = TRUE, pattern = "species_plants.csv")
comparison_species_plants <- plant_species %>%
setNames(nm = .) %>%
map_df(read.csv, .id = "file name")
comparison_species_plants$Software <- factor(comparison_species_plants$Software, levels = c("Mock","CCMetagen","DIAMOND","kraken2","minimap2"))
# This creates the stacked barplot
stacked_barplot_species_plants <- ggplot() + geom_bar(aes(y = Observed_Abundance, x = Software, fill= Species), data = comparison_species_plants, stat='identity', width=0.3, position="fill") + theme(legend.position = 'bottom', legend.text = element_text(size = 10), plot.title = element_text(hjust = 0.5)) + scale_fill_rickandmorty() + theme_bw(base_size =15) + scale_y_continuous(labels = function(x) paste0(x*100, "%"))
final_barplot_species_plants <- print(stacked_barplot_species_plants + labs(title= "Comparison Viridiplantae Species level",y="Observed Abundance (%)", x = ""))
# Export image as PDF
ggsave(path = "./Figures/Figure_2/Data_fig_2/", filename="final_barplot_species_plants.pdf",plot = final_barplot_species_plants, width = 9, device = "pdf")
# Same code as above, but for Genus level
plant_genus <- list.files(path = "./Figures/Figure_2/Data_fig_2", recursive = TRUE, pattern = "genus_plants.csv")
comparison_genus_plants <- plant_genus %>%
setNames(nm = .) %>%
map_df(read.csv, .id = "file name")
comparison_genus_plants$Software <- factor(comparison_genus_plants$Software, levels = c("Mock","CCMetagen","DIAMOND","kraken2","MG-RAST", "minimap2"))
stacked_barplot_genus_plants <- ggplot() + geom_bar(aes(y = Observed_Abundance, x = Software, fill= Genus), data = comparison_genus_plants, stat='identity', width=0.3, position = "fill") + theme(legend.position = 'bottom', legend.text = element_text(size = 8)) + scale_fill_rickandmorty() + theme_bw(base_size =15) + scale_y_continuous(labels = function(x) paste0(x*100, "%"))
final_barplot_genus_plants <- print(stacked_barplot_genus_plants + labs(title= "Comparison Viridiplantae Genus level",y="Observed Abundance (%)", x = ""))
ggsave(filename="final_barplot_genus_plants.pdf",plot = final_barplot_genus_plants, path = "./Figures/Figure_2/Data_fig_2/", device = "pdf", width = 9)
# Other dataset
others_dataset <- list.files(path = "./Figures/Figure_2/Data_fig_2", recursive = TRUE, pattern = "others.csv")
comparison_others <- others_dataset %>%
setNames(nm = .) %>%
map_df(read.csv, .id = "file name")
comparison_others$Software <- factor(comparison_others$Software, levels = c("Mock","CCMetagen","DIAMOND","kraken2","minimap2"))
stacked_barplot_others <- ggplot() + geom_bar(aes(y = Observed_Abundance, x = Software, fill= Species), data = comparison_others, stat='identity', width=0.3, position="fill") + theme(legend.position = 'bottom', legend.text = element_text(size = 8)) + scale_fill_rickandmorty() + theme_bw(base_size = 15) + scale_y_continuous(labels = function(x) paste0(x*100, "%"))
final_barplot_others <- print(stacked_barplot_others + labs(title= "Comparison for other organisms (non-Viridiplantae)",y="Observed Abundance (%)", x = ""))
ggsave(filename="final_barplot_others.pdf",plot = final_barplot_others, path = "./Figures/Figure_2/Data_fig_2/", device = "pdf", width = 9, height = 5)
# The code below reproduces the Community 2D figure
# First, load the data
CCMetagen_community <- read.csv("./Figures/Figure_2/Data_fig_2/CCMetagen_community.csv")
DIAMOND_community <- read.csv("./Figures/Figure_2/Data_fig_2/DIAMOND_community.csv")
kraken2_community <- read.csv("./Figures/Figure_2/Data_fig_2/kraken2_community.csv")
minimap2_community <- read.csv("./Figures/Figure_2/Data_fig_2/minimap2_community.csv")
# Create a function to make a scatter plot
scatterplot <- function(df, x, y) {
ggscatter(df, x="Observed_Abundance", y= "Expected_Abundance", color = "Taxonomic_Domain", size = 3, palette = c("#0D0887FF","#8a8a5c","#CC4678FF","#73D055FF","#F0F921FF")) + stat_cor(size=7, label.x = 4, label.y = 18) + labs(x="Observed Abundance (%)", y="Expected Abundance (%)", color = "Taxonomic Domain", title = "") + theme_bw(base_size = 15) + geom_abline(intercept = 0, slope =1) + theme(legend.text = element_text(size=10))
}
# Apply the function to make scatter plots per tool
plot1 <- scatterplot(CCMetagen_community) + xlim(0,20) + ylim(0,20)
plot2 <- scatterplot(DIAMOND_community) + xlim(0,20) + ylim(0,20)
plot3 <- scatterplot(kraken2_community) + xlim(0,20) + ylim(0,20)
plot4 <- scatterplot(minimap2_community) + xlim(0,20) + ylim(0,20)
# Combine the scatter plots into one and edit legend before exporting the final one
final_scatterplot_no_export <- ggarrange(plot1,plot2,plot3,plot4, labels = c("A","B","C","D"),ncol = 2, nrow = 2, common.legend = TRUE, legend = "bottom")
final_scatterplot <- annotate_figure(final_scatterplot_no_export,  top = text_grob("Performance of tools on the community dataset", face = "bold", size = 14), bottom = text_grob("A: CCMetagen, B: DIAMOND, C: kraken2, D: minimap2"))
ggsave(path = "/Figures/Figure_2/", filename = "scatter_plot_performance.pdf", plot= final_scatterplot_community, height=8, width = 10, device = "pdf")
plant_species <- list.files(path = "./Figures/Figure_2/Data_fig_2", recursive = TRUE, pattern = "species_plants.csv")
comparison_species_plants <- plant_species %>%
setNames(nm = .) %>%
map_df(read.csv, .id = "file name")
comparison_species_plants$Software <- factor(comparison_species_plants$Software, levels = c("Mock","CCMetagen","DIAMOND","kraken2","minimap2"))
# This creates the stacked barplot
stacked_barplot_species_plants <- ggplot() + geom_bar(aes(y = Observed_Abundance, x = Software, fill= Species), data = comparison_species_plants, stat='identity', width=0.3, position="fill") + theme(legend.position = 'bottom', legend.text = element_text(size = 10), plot.title = element_text(hjust = 0.5)) + scale_fill_rickandmorty() + theme_bw(base_size =15) + scale_y_continuous(labels = function(x) paste0(x*100, "%"))
final_barplot_species_plants <- print(stacked_barplot_species_plants + labs(title= "Comparison Viridiplantae Species level",y="Observed Abundance (%)", x = ""))
plant_species <- list.files(path = "./Figures/Figure_2/Data_fig_2", recursive = TRUE, pattern = "species_plants.csv")
plant_species
ccm <- read.csv("CCMetagen_species_plants.csv")
comparison_species_plants <- plant_species %>%
setNames(nm = .) %>%
map_df(read.csv("./Figures/Figure_2/Data_fig_2/"), .id = "file name")
comparison_species_plants <- plant_species %>%
setNames(nm = .) %>%
map_df(~read.csv("./Figures/Figure_2/Data_fig_2/"), .id = "file name")
comparison_species_plants <- list.files(path = "./Figures/Figure_2/Data_fig_2", recursive = TRUE, pattern = "species_plants.csv") %>%
setNames(nm = .) %>%
map_df(read.csv, .id = "file name")
plant_species <- list.files(path = "./Figures/Figure_2/Data_fig_2", recursive = TRUE, pattern = "species_plants.csv")
comparison_species_plants <- plant_species %>%
setNames(nm = .) %>%
map_df(~read.csv(file.path("./Figures/Figure_2/Data_fig_2/",.)), .id = "file name")
comparison_species_plants$Software <- factor(comparison_species_plants$Software, levels = c("Mock","CCMetagen","DIAMOND","kraken2","minimap2"))
# This creates the stacked barplot
stacked_barplot_species_plants <- ggplot() + geom_bar(aes(y = Observed_Abundance, x = Software, fill= Species), data = comparison_species_plants, stat='identity', width=0.3, position="fill") + theme(legend.position = 'bottom', legend.text = element_text(size = 10), plot.title = element_text(hjust = 0.5)) + scale_fill_rickandmorty() + theme_bw(base_size =15) + scale_y_continuous(labels = function(x) paste0(x*100, "%"))
final_barplot_species_plants <- print(stacked_barplot_species_plants + labs(title= "Comparison Viridiplantae Species level",y="Observed Abundance (%)", x = ""))
# Export image as PDF
ggsave(path = "./Figures/Figure_2/", filename="final_barplot_species_plants.pdf",plot = final_barplot_species_plants, width = 9, device = "pdf")
# Same code as above, but for Genus level
plant_genus <- list.files(path = "./Figures/Figure_2/Data_fig_2", recursive = TRUE, pattern = "genus_plants.csv")
comparison_genus_plants <- plant_genus %>%
setNames(nm = .) %>%
map_df(~read.csv(file.path("./Figures/Figure_2/Data_fig_2/",.), .id = "file name"))
comparison_genus_plants$Software <- factor(comparison_genus_plants$Software, levels = c("Mock","CCMetagen","DIAMOND","kraken2","MG-RAST", "minimap2"))
stacked_barplot_genus_plants <- ggplot() + geom_bar(aes(y = Observed_Abundance, x = Software, fill= Genus), data = comparison_genus_plants, stat='identity', width=0.3, position = "fill") + theme(legend.position = 'bottom', legend.text = element_text(size = 8)) + scale_fill_rickandmorty() + theme_bw(base_size =15) + scale_y_continuous(labels = function(x) paste0(x*100, "%"))
final_barplot_genus_plants <- print(stacked_barplot_genus_plants + labs(title= "Comparison Viridiplantae Genus level",y="Observed Abundance (%)", x = ""))
ggsave(filename="final_barplot_genus_plants.pdf",plot = final_barplot_genus_plants, path = "./Figures/Figure_2/", device = "pdf", width = 9)
plant_genus <- list.files(path = "./Figures/Figure_2/Data_fig_2", recursive = TRUE, pattern = "genus_plants.csv")
comparison_genus_plants <- plant_genus %>%
setNames(nm = .) %>%
map_df(~read.csv(file.path("./Figures/Figure_2/Data_fig_2/",.)), .id = "file name")
comparison_genus_plants$Software <- factor(comparison_genus_plants$Software, levels = c("Mock","CCMetagen","DIAMOND","kraken2","MG-RAST", "minimap2"))
stacked_barplot_genus_plants <- ggplot() + geom_bar(aes(y = Observed_Abundance, x = Software, fill= Genus), data = comparison_genus_plants, stat='identity', width=0.3, position = "fill") + theme(legend.position = 'bottom', legend.text = element_text(size = 8)) + scale_fill_rickandmorty() + theme_bw(base_size =15) + scale_y_continuous(labels = function(x) paste0(x*100, "%"))
final_barplot_genus_plants <- print(stacked_barplot_genus_plants + labs(title= "Comparison Viridiplantae Genus level",y="Observed Abundance (%)", x = ""))
ggsave(filename="final_barplot_genus_plants.pdf",plot = final_barplot_genus_plants, path = "./Figures/Figure_2/", device = "pdf", width = 9)
others_dataset <- list.files(path = "./Figures/Figure_2/Data_fig_2", recursive = TRUE, pattern = "others.csv")
comparison_others <- others_dataset %>%
setNames(nm = .) %>%
map_df(~read.csv(file.path("./Figures/Figure_2/Data_fig_2/",.), .id = "file name"))
comparison_others$Software <- factor(comparison_others$Software, levels = c("Mock","CCMetagen","DIAMOND","kraken2","minimap2"))
stacked_barplot_others <- ggplot() + geom_bar(aes(y = Observed_Abundance, x = Software, fill= Species), data = comparison_others, stat='identity', width=0.3, position="fill") + theme(legend.position = 'bottom', legend.text = element_text(size = 8)) + scale_fill_rickandmorty() + theme_bw(base_size = 15) + scale_y_continuous(labels = function(x) paste0(x*100, "%"))
final_barplot_others <- print(stacked_barplot_others + labs(title= "Comparison for other organisms (non-Viridiplantae)",y="Observed Abundance (%)", x = ""))
ggsave(filename="final_barplot_others.pdf",plot = final_barplot_others, path = "./Figures/Figure_2/", device = "pdf", width = 9, height = 5)
others_dataset <- list.files(path = "./Figures/Figure_2/Data_fig_2", recursive = TRUE, pattern = "others.csv")
comparison_others <- others_dataset %>%
setNames(nm = .) %>%
map_df(~read.csv(file.path("./Figures/Figure_2/Data_fig_2/",.)), .id = "file name")
comparison_others$Software <- factor(comparison_others$Software, levels = c("Mock","CCMetagen","DIAMOND","kraken2","minimap2"))
stacked_barplot_others <- ggplot() + geom_bar(aes(y = Observed_Abundance, x = Software, fill= Species), data = comparison_others, stat='identity', width=0.3, position="fill") + theme(legend.position = 'bottom', legend.text = element_text(size = 8)) + scale_fill_rickandmorty() + theme_bw(base_size = 15) + scale_y_continuous(labels = function(x) paste0(x*100, "%"))
final_barplot_others <- print(stacked_barplot_others + labs(title= "Comparison for other organisms (non-Viridiplantae)",y="Observed Abundance (%)", x = ""))
ggsave(filename="final_barplot_others.pdf",plot = final_barplot_others, path = "./Figures/Figure_2/", device = "pdf", width = 9, height = 5)
CCMetagen_community <- read.csv("./Figures/Figure_2/Data_fig_2/CCMetagen_community.csv")
DIAMOND_community <- read.csv("./Figures/Figure_2/Data_fig_2/DIAMOND_community.csv")
kraken2_community <- read.csv("./Figures/Figure_2/Data_fig_2/kraken2_community.csv")
minimap2_community <- read.csv("./Figures/Figure_2/Data_fig_2/minimap2_community.csv")
scatterplot <- function(df, x, y) {
ggscatter(df, x="Observed_Abundance", y= "Expected_Abundance", color = "Taxonomic_Domain", size = 3, palette = c("#0D0887FF","#8a8a5c","#CC4678FF","#73D055FF","#F0F921FF")) + stat_cor(size=7, label.x = 4, label.y = 18) + labs(x="Observed Abundance (%)", y="Expected Abundance (%)", color = "Taxonomic Domain", title = "") + theme_bw(base_size = 15) + geom_abline(intercept = 0, slope =1) + theme(legend.text = element_text(size=10))
}
plot1 <- scatterplot(CCMetagen_community) + xlim(0,20) + ylim(0,20)
plot2 <- scatterplot(DIAMOND_community) + xlim(0,20) + ylim(0,20)
plot3 <- scatterplot(kraken2_community) + xlim(0,20) + ylim(0,20)
plot4 <- scatterplot(minimap2_community) + xlim(0,20) + ylim(0,20)
final_scatterplot_no_export <- ggarrange(plot1,plot2,plot3,plot4, labels = c("A","B","C","D"),ncol = 2, nrow = 2, common.legend = TRUE, legend = "bottom")
final_scatterplot <- annotate_figure(final_scatterplot_no_export,  top = text_grob("Performance of tools on the community dataset", face = "bold", size = 14), bottom = text_grob("A: CCMetagen, B: DIAMOND, C: kraken2, D: minimap2"))
ggsave(path = "/Figures/Figure_2/", filename = "scatter_plot_performance.pdf", plot= final_scatterplot_community, height=8, width = 10, device = "pdf")
ggsave(path = "/Figures/Figure_2/", filename = "scatter_plot_performance.pdf", plot= final_scatterplot, height=8, width = 10, device = "pdf")
ggsave(path = "./Figures/Figure_2/", filename = "scatter_plot_performance.pdf", plot= final_scatterplot, height=8, width = 10, device = "pdf")
try_path <- "./Figures/Figure_2/Data_fig_2"
temp_species_plants <- list.files(path = try_path, pattern = "species_plants.csv")
data_path <- "./Figures/Figure_2/Data_fig_2"
plant_species <- list.files(path = data_path, recursive = TRUE, pattern = "species_plants.csv")
comparison_species_plants <- plant_species %>%
setNames(nm = .) %>%
map_df(~read.csv(file.path(data_path,.)), .id = "file name")
temp_species_plants <- list.files(path = data_path, pattern = "species_plants.csv")
species_plants_list <- lapply(temp_species_plants,read.csv(file.path(data_path)))
temp_genus_plants <- list.files(path = data_path, pattern = "genus_plants.csv")
genus_plants_list <- lapply(temp_genus_plants,read.csv(file.path(data_path)))
temp_others <- list.files(path = data_path, pattern = "others.csv")
others_list <- lapply(temp_others,read.csv(file.path(data_path)))
temp_community <- list.files(path = data_path, pattern = "community.csv")
community_list <- lapply(temp_community,read.csv(file.path(data_path)))
species_plants_list <- lapply(temp_species_plants,~read.csv(file.path(data_path)))
species_plants_list <- lapply(temp_species_plants,read.csv(file.path(data_path)))
genus_plants_list <- lapply(temp_genus_plants,read.csv)
genus_plants_list <- lapply(temp_genus_plants,read.csv(file.path(data_path,.)))
genus_plants_list <- lapply(temp_genus_plants,read.csv(file.path(data_path)))
genus_plants_list <- lapply(temp_genus_plants,read.csv(file.path("./Figures/Figure_2/Data_fig_2")))
genus_plants_list <- lapply(temp_genus_plants,read.csv(file.path("./Figures/Figure_2/Data_fig_2/")))
species_plants_list <- lapply(temp_species_plants,read.csv(file.path(data_path,temp_species_plants)))
genus_plants_list <- temp_genus_plants %>% map(~read.csv(file.path(data_path,.)))
View(genus_plants_list)
genus_plants_list <- temp_genus_plants %>% map(~read.csv(file.path(data_path,.)), .id="file name")
View(genus_plants_list)
genus_plants_list <- temp_genus_plants %>%  setNames(nm = .) %>%
map(~read.csv(file.path(data_path,.)), .id="file name")
View(genus_plants_list)
genus_plants_list <- temp_genus_plants %>%  map(~read.csv(file.path(data_path,.)))
View(genus_plants_list)
getnames <- function(df){
soft <- df[2,1]
return(soft)
}
list_naming_genus <- unlist(lapply(species_plants_list,getnames), use.names = FALSE)
names(genus_plants_list) <- list_naming_genus
temp_species_plants <- list.files(path = data_path, pattern = "species_plants.csv")
species_plants_list <- temp_species_plants %>%  map(~read.csv(file.path(data_path,.)))
list_naming <- unlist(lapply(species_plants_list,getnames), use.names = FALSE)
names(species_plants_list) <- list_naming
View(species_plants_list)
temp_species_plants <- list.files(path = data_path, pattern = "species_plants.csv")
species_plants_list <- temp_species_plants %>%  map(~read.csv(file.path(data_path,.)))
temp_genus_plants <- list.files(path = data_path, pattern = "genus_plants.csv")
genus_plants_list <- temp_genus_plants %>%  map(~read.csv(file.path(data_path,.)))
temp_others <- list.files(path = data_path, pattern = "others.csv")
others_list <- temp_others %>%  map(~read.csv(file.path(data_path,.)))
temp_community <- list.files(path = data_path, pattern = "community.csv")
community_list <- temp_community %>%  map(~read.csv(file.path(data_path,.)))
list_naming <- unlist(lapply(species_plants_list,getnames), use.names = FALSE)
names(species_plants_list) <- list_naming
list_naming_genus <- unlist(lapply(species_plants_list,getnames), use.names = FALSE)
names(genus_plants_list) <- list_naming_genus
names(others_list) <- list_naming
names(community_list) <- list_naming
custom_rmse <- function(df){
exp <- df[,"Expected_Abundance"]
obs <- df[,"Observed_Abundance"]
rmse_value <- rmse(exp,obs)
return(rmse_value)
}
RMSE_plant_species <- as.data.frame(do.call(rbind, lapply(species_plants_list,custom_rmse)))
if (!require('hydroGOF')) install.packages('hydroGOF'); library('hydroGOF')
RMSE_plant_species <- as.data.frame(do.call(rbind, lapply(species_plants_list,custom_rmse)))
View(RMSE_plant_species)
RMSE_plant_genus <- as.data.frame(do.call(rbind, lapply(genus_plants_list,custom_rmse)))
RMSE_others <- as.data.frame(do.call(rbind, lapply(others_list,custom_rmse)))
RMSE_community <- as.data.frame(do.call(rbind, lapply(community_list,custom_rmse)))
RMSE_total <- cbind(RMSE_plant_species,RMSE_plant_genus,RMSE_others,RMSE_community)
colnames(RMSE_total) <- c("Plant_Species","Plant_Genus","Others","Community")
names_for_RMSE <- c("Viridiplantae: \n Species level","Viridiplantae: \n Genus level", "Others", "Community")
RMSE_plant_genus <- as.data.frame(do.call(rbind, lapply(genus_plants_list,custom_rmse)))
View(genus_plants_list)
temp_genus_plants <- list.files(path = data_path, pattern = "genus_plants.csv")
genus_plants_list <- temp_genus_plants %>%  map(~read.csv(file.path(data_path,.)))
View(genus_plants_list)
temp_genus_plants
temp_genus_plants[1:5]
temp_genus_plants <- list.files(path = data_path, pattern = "genus_plants.csv")
genus_plants_list <- temp_genus_plants[1:5] %>%  map(~read.csv(file.path(data_path,.))) # 1:5 in order to exclude the mock
temp_others
temp_others <- list.files(path = data_path, pattern = "others.csv")
others_list <- temp_others[1:4] %>%  map(~read.csv(file.path(data_path,.))) # 1:4 in order to exclude the mock
temp_community
list_naming <- unlist(lapply(species_plants_list,getnames), use.names = FALSE)
names(species_plants_list) <- list_naming
list_naming_genus <- unlist(lapply(species_plants_list,getnames), use.names = FALSE)
names(genus_plants_list) <- list_naming_genus
names(others_list) <- list_naming
names(community_list) <- list_naming
RMSE_plant_genus <- as.data.frame(do.call(rbind, lapply(genus_plants_list,custom_rmse)))
RMSE_others <- as.data.frame(do.call(rbind, lapply(others_list,custom_rmse)))
RMSE_community <- as.data.frame(do.call(rbind, lapply(community_list,custom_rmse)))
RMSE_total <- cbind(RMSE_plant_species,RMSE_plant_genus,RMSE_others,RMSE_community)
temp_genus_plants
temp_genus_plants[1:5]
genus_plants_list <- temp_genus_plants[-c(4,6)]
temp_genus_plants[-c(4,6)]
genus_plants_list <- temp_genus_plants[-c(4,6)] %>%  map(~read.csv(file.path(data_path,.))) # -c(4,6) to remove MG-RAST and the mock
list_naming_genus <- unlist(lapply(species_plants_list,getnames), use.names = FALSE)
names(genus_plants_list) <- list_naming_genus
RMSE_plant_genus <- as.data.frame(do.call(rbind, lapply(genus_plants_list,custom_rmse)))
RMSE_total <- cbind(RMSE_plant_species,RMSE_plant_genus,RMSE_others,RMSE_community)
colnames(RMSE_total) <- c("Plant_Species","Plant_Genus","Others","Community")
names_for_RMSE <- c("Viridiplantae: \n Species level","Viridiplantae: \n Genus level", "Others", "Community")
names(RMSE_total) <- names_for_RMSE
rounded_RMSE_total <- round(RMSE_total,digits = 3)
png("RMSE_total.png",height = 50*nrow(rounded_RMSE_total), width = 100*ncol(rounded_RMSE_total))
rounded_RMSE_total
grid.table(rounded_RMSE_total)
if (!require('gridExtra')) install.packages('gridExtra'); library('gridExtra')
grid.table(rounded_RMSE_total)
png("RMSE_total.png",height = 50*nrow(rounded_RMSE_total), width = 100*ncol(rounded_RMSE_total))
rounded_RMSE_total
grid.table(rounded_RMSE_total)
rounded_RMSE_total
png("RMSE_total.png",height = 50*nrow(rounded_RMSE_total), width = 100*ncol(rounded_RMSE_total))
grid.table(rounded_RMSE_total)
png("RMSE_total.png",height = 50*nrow(rounded_RMSE_total), width = 100*ncol(rounded_RMSE_total))
grid.table(rounded_RMSE_total)
dev.off()
png("./Figures/Figure_2/RMSE_total.png",height = 50*nrow(rounded_RMSE_total), width = 100*ncol(rounded_RMSE_total))
grid.table(rounded_RMSE_total)
dev.off()
dev.off()
