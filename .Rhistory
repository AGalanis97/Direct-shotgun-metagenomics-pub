All<-data.frame(tapply(All$Sum, All$Superkingdom, FUN=sum))
pie (t(All), labels = c("Archaea","Bacteria","Eucaryote","Virus"))
Filter<-data.frame(tapply(NCBI$Sum, NCBI$Superkingdom, FUN=sum))
pie (t(Filter), labels = c("Bacteria","Eucaryote","NA","Virus"),col=myPalette,main="Non-plants superkindgoms distribution in honey")
Relationship <- data.frame(tapply(NCBI$Sum, NCBI$`Relation category`  , FUN=sum))
pie (t(Relationship), labels = c("Bacterial gut community","Host","Human cross contamination","Others","Pathogen","Unknown"),border="white", col=myPalette, main="Relationship of non-plant species with bees ")
Differential <- data.frame(tapply(SeasonalDifAll$Sum, SeasonalDifAll$`Relation category`  , FUN=sum))
pie (t(Differential), labels = c("Bacterial gut community","Host","Human cross contamination","Others","Pathogen","Unknown"),border="white", col=myPalette, main="Relationship of the seasonal specific non-plant species with bees ")
Bartonella_sp <- nonplants[grepl("Bartonella", nonplants$Genus), ]
Bartonella_sp$Category<- c("Bartonella sp.")
Bifidobacterium_sp <- nonplants[grepl("Bifidobacterium", nonplants$Genus), ]
Bifidobacterium_sp$Category<- c("Bifidobacterium sp.")
Bombella_sp <-  nonplants[grepl("Bombella", nonplants$Genus), ]
Bombella_sp$Category<- c("Bombella sp.")
Frischellaperrara <- nonplants[grepl("Frischella perrara", nonplants$Species), ]
Frischellaperrara$Category<- c("Frischella perrara")
Gilliamellaapicola <- nonplants[grepl("Gilliamella apicola", nonplants$Species), ]
Gilliamellaapicola$Category<- c("Gilliamella apicola")
Lactobacilluskunkeei <- nonplants[grepl("Lactobacillus kunkeei", nonplants$Species), ]
Lactobacilluskunkeei$Category<- c("Lactobacillus kunkeei")
Lactobacillus_Firm4 <- nonplants[grepl("Lactobacillus mellis", nonplants$Species) | grepl("Lactobacillus mellifer", nonplants$Species) , ] #doi: 10.1186/s12864-015-1476-6
Lactobacillus_Firm4$Category<- c("Lactobacillus-Firm4") #not plot because of too lower reads
Lactobacillus_Firm5 <- nonplants[grepl("Lactobacillus apis", nonplants$Species) | grepl("Lactobacillus helsingborgensis", nonplants$Species)| grepl("Lactobacillus melliventris", nonplants$Species) | grepl("Lactobacillus kullabergensis", nonplants$Species)| grepl("Lactobacillus kimbladii", nonplants$Species) , ] #doi: 10.1186/s12864-015-1476-6
Lactobacillus_Firm5$Category<- c("Lactobacillus-Firm5")
Lactobacillus_Others <- nonplants[grepl("Lactobacillus sp. Fhon2N", nonplants$Species) | grepl("Lactobacillus apinorum", nonplants$Species)| grepl("Lactobacillus delbrueckii", nonplants$Species) | grepl("Liquorilactobacillus nageliis", nonplants$Species), ]  #Others Lactobacillus with more that 100 reads coverage
Lactobacillus_Others$Category<- c("Lactobacillus-Others")
Lonsdaleabritannica <- nonplants[grepl("Lonsdalea britannica", nonplants$Species), ]
Lonsdaleabritannica$Category<- c("Lonsdalea britannica")
Snodgrassellaalvi <- nonplants[grepl("Snodgrassella alvi", nonplants$Species), ]
Snodgrassellaalvi $Category<- c("Snodgrassella alvi ") #not plot because of too lower reads
microbiota<-rbind(Bartonella_sp,Bifidobacterium_sp,Bombella_sp,Frischellaperrara,Gilliamellaapicola,Lactobacilluskunkeei,Lactobacillus_Firm5,Lactobacillus_Others,Lonsdaleabritannica)
#Because L. kunkeii dominate the DNA from microbiota, I remove it to clarify the barplots
microbiota_nokunkeei<-rbind(Bartonella_sp,Bifidobacterium_sp,Bombella_sp,Frischellaperrara,Gilliamellaapicola,Lactobacillus_Firm5,Lactobacillus_Others,Lonsdaleabritannica)
#Abundance barplots
### ALL
p<-microbiota %>%
group_by(Category) %>%
summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
pp <- melt(p, id.vars="Category")
ppp <-pp %>%
group_by(Category) %>%
summarise(mean=mean(value), sd=sd(value))
ggplot(ppp, aes(reorder(Category,- mean), y=mean, fill=Category)) +
geom_bar(stat="identity", color="black", position=position_dodge(), fill="grey") +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd),position = position_dodge(0.9), width = .3) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45,hjust=1),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "none") +
xlab("Species") +
ylab("Attributed reads")
#### NO KUNKEII
pk<-microbiota_nokunkeei %>%
group_by(Category) %>%
summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
ppk <- melt(pk, id.vars="Category")
ggplot(ppk, aes(variable, value,fill=Category)) +
geom_bar(position="fill", stat="identity")+
theme_minimal()+
scale_fill_brewer(palette="Paired")+
labs(title = "CORE and NON-CORE microbiota detected in Honey",
subtitle = "(Excluding L. kunkeii)")
#Because others abundant bacteria were attributed as gut microbiota from the NCBI file and the differential analyses I decide to include them also in the microbiota database
Sodalis <- nonplants[grepl("Sodalis glossinidius", nonplants$Species) | grepl("Sodalis praecaptivus", nonplants$Species) , ]
Sodalis$Category<- c("Sodalis")
Sodalisglossinidius <- nonplants[grepl("Sodalis glossinidius", nonplants$Species)  , ]
Sodalisglossinidius$Category<- c("Sodalis glossinidius")
Sodalispraecaptivus <- nonplants[grepl("Sodalis praecaptivus", nonplants$Species)  , ]
Sodalispraecaptivus$Category<- c("Sodalis praecaptivus")
Pantoeaagglomerans<-nonplants[grepl("Pantoea agglomerans", nonplants$Species) , ]
Pantoeaagglomerans$Category<- c("Pantoea agglomerans")
Leuconostocpseudomesenteroides<-nonplants[grepl("Leuconostoc pseudomesenteroides", nonplants$Species) , ]
Leuconostocpseudomesenteroides$Category<- c("Leuconostoc pseudomesenteroides")
Enterobacter_sp<-nonplants[grepl("Enterobacter sp. SA187", nonplants$Species) , ]
Enterobacter_sp$Category<- c("Enterobacter sp.")
Arsenophonusnasoniae<-nonplants[grepl("Arsenophonus nasoniae", nonplants$Species) , ]
Arsenophonusnasoniae$Category<- c("Arsenophonus nasoniae")
Parasaccharibacterapium<-nonplants[grepl("Parasaccharibacter apium", nonplants$Species) , ]
Parasaccharibacterapium$Category<- c("Parasaccharibacter apium")
Morganellamorganii<-nonplants[grepl("Morganella morganii", nonplants$Species) , ]
Morganellamorganii$Category<- c("Morganella morganii")
Klebsiellaoxytoca<-nonplants[grepl("Klebsiella oxytoca", nonplants$Species) , ]
Klebsiellaoxytoca$Category<- c("Klebsiella oxytoca")
microbiota_extended<-rbind(microbiota_nokunkeei,Sodalis, Pantoeaagglomerans,Leuconostocpseudomesenteroides,Enterobacter_sp,Arsenophonusnasoniae,Parasaccharibacterapium,Morganellamorganii,Klebsiellaoxytoca)
other_microbiota<-rbind(Sodalis,Pantoeaagglomerans,Leuconostocpseudomesenteroides,Enterobacter_sp,Arsenophonusnasoniae,Parasaccharibacterapium,Morganellamorganii,Klebsiellaoxytoca)
#### EXTENDED
pkext<-microbiota_extended %>%
group_by(Category) %>%
summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
ppkext <- melt(pkext, id.vars="Category")
ggplot(ppkext, aes(variable, value,fill=Category)) +
geom_bar(position="fill", stat="identity")+
theme_minimal() +
labs(title = "EXTENTED GUT MICROBIOTA")
#### OTHERS MICROBIOTA
pkother<-other_microbiota %>%
group_by(Category) %>%
summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
ppkother <- melt(pkother, id.vars="Category")
ggplot(ppkother, aes(variable, value,fill=Category)) +
geom_bar(position="fill", stat="identity")+
theme_minimal()+
scale_fill_brewer(palette="Paired")+
labs(title = "OTHER MICROBIOTA")
### SEASONAL DIFF MICROBIOTA (all except frishella are autonm specific so I removed it for plotting purpose  )
Diff_microbiota<-rbind(Enterobacter_sp,Klebsiellaoxytoca,Leuconostocpseudomesenteroides,Sodalisglossinidius,Sodalispraecaptivus)#,Frischellaperrara
pkdiff<-Diff_microbiota %>%
group_by(Category) %>%
summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
ppkdiff <- melt(pkdiff, id.vars="Category")
ggplot(ppkdiff, aes(variable, value,fill=Category)) +
geom_bar(position="stack", stat="identity")+
theme_minimal()+
scale_fill_brewer(palette="Oranges")+
facet_grid(Category~variable, scales="free", space="free_x")
functional<-read.csv("./Non Plant/functional_results_significant_bacteria.csv", header = TRUE)
functional<-read.csv("./Non Plants/functional_results_significant_bacteria.csv", header = TRUE)
Func_Sum<-functional %>%
group_by(Species) %>%
summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
Functional_Reduced<- functional[grepl("Enterobacter sp. SA187", functional$Species) | grepl("Klebsiella oxytoca", functional$Species) | grepl("Leuconostoc pseudomesenteroides", functional$Species)| grepl("Sodalis glossinidius", functional$Species)| grepl("Sodalis praecaptivus", functional$Species) , ]
Functional_Reduced<-Functional_Reduced[,-c(1:2,4:6,8:11,14)]
Func<- reshape2::melt(Functional_Reduced, id=c("GO_description","Species"))
colnames(Func)[3] <- "Method"
colnames(Func)[4] <- "Frequency"
Func_10 <- Func%>%
mutate_if(sapply(Func, is.character), as.factor)%>%
filter(!GO_description=="NO_NAME")%>%
group_by(GO_description) %>%
filter(n() == 10) #only GO terms present in the 5 species and both methods
summary(Func_10)
b<-Func_10 %>%
nest(data = c(Species, Method,Frequency)) %>%
mutate(model = map(data, ~anova(lm(Frequency ~ Species, .))),
tidy = map(model, broom::tidy)) %>%
select(GO_description, tidy) %>%
unnest(tidy)
b$significance<-ifelse(b$p.value<0.005,"significant","not sign.")
#################################
#In order to perform statistical test across ALL GO, I need to attribute a zero value to the missing species
fill<-reshape2::dcast(Func, GO_description + Method ~ Species,value.var = "Frequency", fun.aggregate = mean)
fill[is.na(fill)] <- 0 #The missing value for certain GO corresponds to true zeros (no hits during alignments)
Func_all<- reshape2::melt(fill, id=c("GO_description","Method"))
colnames(Func_all)[3] <- "Species"
colnames(Func_all)[4] <- "Frequency"
Func_all_m <- Func_all %>%
mutate_if(sapply(Func_all, is.character), as.factor)%>%
filter(!GO_description=="NO_NAME")%>%
group_by(GO_description) %>%
filter(n() == 10)
summary(Func_all_m)
#cube root transformation
#Func_all_m$Frequency<-sign(Func_all_m$Frequency) * abs(Func_all_m$Frequency)^(1/3)
#plotNormalHistogram(Func_all_m$Frequency)
#####CHOOSE#######
###### ANOVA
c<-Func_all_m %>%
nest(data = c(Species, Method,Frequency)) %>% #nesting doesn't work, I can't fix it
mutate(model = map(data, ~anova(lm(Frequency ~ Species, .))),
tidy = map(model, broom::tidy)) %>%
select(GO_description, tidy) %>%
unnest(tidy)
###### NON PARAMETRIC
c<-Func_all_m %>%
nest(data = c(Species, Method,Frequency)) %>% #nesting doesn't work, I can't fix it
mutate(model = map(data, ~kruskal.test(Frequency ~ Species, .)),
tidy = map(model, broom::tidy)) %>%
select(GO_description, tidy) %>%
unnest(tidy)
#####CHOOSE#######
c$significance<-ifelse(c$p.value<0.005,"significant","not sign.")
###### DATA CHECKS ######
anova <- aov(Frequency ~ Species , data = Func_all_m)
# Test for Homogeneity of variances (OK IF around red line)
plot(anova, 1)
# Second Test for Homogeneity of variances (OK if p value significatif)
leveneTest(Frequency ~ Species, data = Func_all_m)
# Test for Normality distribution (OK If most point follow the line)
plot(anova, 2)
# Second test for normality Extract the residuals
anova_residuals <- residuals(object = anova )
# Run Shapiro-Wilk test (OK if p value significatif)
#shapiro.test(x = anova_residuals ) #This test can't be applied to so many data
#### FINAL STAT, CLEAN and EXPORT TABLE ####
significant<-c%>%
filter(!term=="Residuals")
stat<-Func_all_m %>%
group_by(GO_description, Species) %>%
summarise(
n=n(),
mean = mean(Frequency, na.rm = TRUE),
sd = sd(Frequency, na.rm = TRUE)
)
stat1<-reshape2::dcast(stat, GO_description ~ Species,value.var = "mean")
colnames(stat1)[2] <- "Enterobacter sp. SA187 - Mean SM/DSM"
colnames(stat1)[3] <- "Klebsiella oxytoca - Mean SM/DSM"
colnames(stat1)[4] <- "Leuconostoc pseudomesenteroides - Mean SM/DSM"
colnames(stat1)[5] <- "Sodalis glossinidius - Mean SM/DSM"
colnames(stat1)[6] <- "Sodalis praecaptivus - Mean SM/DSM"
stat2<-reshape2::dcast(stat, GO_description ~ Species,value.var = "sd")
colnames(stat2)[2] <- "Enterobacter sp. SA187 - SD SM/DSM"
colnames(stat2)[3] <- "Klebsiella oxytoca - SD SM/DSM"
colnames(stat2)[4] <- "Leuconostoc pseudomesenteroides - SD SM/DSM"
colnames(stat2)[5] <- "Sodalis glossinidius - SD SM/DSM"
colnames(stat2)[6] <- "Sodalis praecaptivus - SD SM/DSM"
GO_sign<- merge(stat1,stat2,by="GO_description")
GO_sign<-merge(GO_sign,significant,by="GO_description")
significant<-c%>%
filter(!term=="Residuals")
###### ANOVA
c<-Func_all_m %>%
nest(data = c(Species, Method,Frequency)) %>% #nesting doesn't work, I can't fix it
mutate(model = map(data, ~anova(lm(Frequency ~ Species, .))),
tidy = map(model, broom::tidy)) %>%
select(GO_description, tidy) %>%
unnest(tidy)
View(c)
c$significance<-ifelse(c$p.value<0.005,"significant","not sign.")
significant<-c%>%
filter(!term=="Residuals")
stat<-Func_all_m %>%
group_by(GO_description, Species) %>%
summarise(
n=n(),
mean = mean(Frequency, na.rm = TRUE),
sd = sd(Frequency, na.rm = TRUE)
)
stat1<-reshape2::dcast(stat, GO_description ~ Species,value.var = "mean")
colnames(stat1)[2] <- "Enterobacter sp. SA187 - Mean SM/DSM"
colnames(stat1)[3] <- "Klebsiella oxytoca - Mean SM/DSM"
colnames(stat1)[4] <- "Leuconostoc pseudomesenteroides - Mean SM/DSM"
colnames(stat1)[5] <- "Sodalis glossinidius - Mean SM/DSM"
colnames(stat1)[6] <- "Sodalis praecaptivus - Mean SM/DSM"
stat2<-reshape2::dcast(stat, GO_description ~ Species,value.var = "sd")
colnames(stat2)[2] <- "Enterobacter sp. SA187 - SD SM/DSM"
colnames(stat2)[3] <- "Klebsiella oxytoca - SD SM/DSM"
colnames(stat2)[4] <- "Leuconostoc pseudomesenteroides - SD SM/DSM"
colnames(stat2)[5] <- "Sodalis glossinidius - SD SM/DSM"
colnames(stat2)[6] <- "Sodalis praecaptivus - SD SM/DSM"
GO_sign<- merge(stat1,stat2,by="GO_description")
GO_sign<-merge(GO_sign,significant,by="GO_description")
View(GO_sign)
View(Func_10)
sum(GO_sign$significance=="significant")
sum(GO_sign$significance = "significant")
sum(GO_sign$significance == "significant")
sign_go <- GO_sign$significance == "signficant"
sign_go <- GO_sign[GO_sign$significance == "signficant",]
View(sign_go)
sign_go <- GO_sign[,GO_sign$significance == "signficant"]
sign_go <- GO_sign[,GO_sign$significance == "significant"]
sign_go <- GO_sign[GO_sign$significance == "significant",]
View(sign_go)
BiocManager::install("ViSEAGO")
View(functional)
filtered_gos <- functional[match(functional$GO_description, sign_go$GO_description), ]
View(filtered_gos)
View(significant)
sign_go$GO_description <- as.character(sign_go$GO_description)
filtered_gos <- functional[match(functional$GO_description, sign_go$GO_description), ]
View(filtered_gos)
functional$GO_description <- as.character(functional$GO_description)
filtered_gos <- functional[match(functional$GO_description, sign_go$GO_description), ]
View(filtered_gos)
filtered_gos <- functional[match(sign_go$GO_description, functional$GO_description), ]
View(filtered_gos)
library(pheatmap)
forplot <- filtered_gos[,c(3:11)]
View(forplot)
forplot <- filtered_gos[,c(3:10,12)]
rownames(forplot) <- forplot$GO_description
forplot <- na.omit(forplot)
rownames(forplot) <- forplot$GO_description
heatmapplot <- pheatmap(forplot)
forplot <- forplot[,-9]
heatmapplot <- pheatmap(forplot)
heatmapplot <- pheatmap(forplot, show_rownames = F)
forplot <- forplot %>% mutate_all(.funs = log2)
View(forplot)
heatmapplot <- pheatmap(forplot, show_rownames = F)
forplot <- forplot %>% mutate_all(.funs = log2(1+x))
forplot <- forplot %>% mutate_all(.funs = log2(1+.))
forplot <- forplot %>% mutate_all(.funs = +1)
forplot <- forplot +1
forplot <- forplot %>% mutate_all(.funs = log2)
forplot <- filtered_gos[,c(3:10,12)]
forplot <- na.omit(forplot)
rownames(forplot) <- forplot$GO_description
forplot <- forplot[,-9]
forplot <- forplot +1
forplot <- forplot %>% mutate_all(.funs = log2)
heatmapplot <- pheatmap(forplot, show_rownames = F)
heatmapplot <- pheatmap(forplot, show_rownames = F, cluster_rows = F)
heatmapplot <- pheatmap(forplot, show_rownames = F, cluster_rows = T)
functional<-read.csv("./Non Plants/functional_results_significant_bacteria.csv", header = F)
heatmapplot <- pheatmap(forplot, show_rownames = F, cluster_rows = F)
View(forplot)
View(sign_go)
rownames(sign_go) <- NULL
sign_go_filtered <- sign_go[-c(16, 23, 33, 36, 35, 42, 43, 44, 46, 48, 49, 69, 72, 75, 107, 108, 111, 110, 122, 123, 124, 125, 126, 132, 140, 145,146, 147, 148, 163, 162, 165, 170, 179, 182, 194, 196, 198, 207, 217, 218, 219, 220, 224, 225, 229, 231, 233, 234, 237, 247, 250, 263, 264),]
forplot2 <- sign_go_filtered[,c(3:10,12)]
forplot2 <- na.omit(forplot2)
rownames(forplot2) <- forplot2$GO_description
forplot2 <- forplot2[,-9]
forplot2 <- forplot2 +1
forplot2 <- forplot2 %>% mutate_all(.funs = log2)
heatmapplot2 <- pheatmap(forplot2, show_rownames = F, cluster_rows = F)
View(sign_go_filtered)
sign_go_filtered <- sign_go[c(16, 23, 33, 36, 35, 42, 43, 44, 46, 48, 49, 69, 72, 75, 107, 108, 111, 110, 122, 123, 124, 125, 126, 132, 140, 145,146, 147, 148, 163, 162, 165, 170, 179, 182, 194, 196, 198, 207, 217, 218, 219, 220, 224, 225, 229, 231, 233, 234, 237, 247, 250, 263, 264),]
filtered_gos <- functional[match(sign_go_filtered$GO_description, functional$GO_description), ]
forplot2 <- filtered_gos[,c(3:10,12)]
forplot2 <- na.omit(forplot2)
rownames(forplot2) <- forplot2$GO_description
forplot2 <- forplot2[,-9]
forplot2 <- forplot2 +1
forplot2 <- forplot2 %>% mutate_all(.funs = log2)
heatmapplot2 <- pheatmap(forplot2, show_rownames = F, cluster_rows = F)
filtered_gos <- functional[match(sign_go_filtered$GO_description, functional$GO_description), ]
forplot2 <- filtered_gos[,c(3:10,12)]
forplot2 <- na.omit(forplot2)
rownames(forplot2) <- forplot2$GO_description
View(forplot2)
filtered_gos <- functional[match(sign_go_filtered$GO_description, functional$GO_description), ]
View(filtered_gos)
View(sign_go_filtered)
View(functional)
functional<-read.csv("./Non Plants/functional_results_significant_bacteria.csv", header = TRUE)
sign_go$GO_description <- as.character(sign_go$GO_description)
functional$GO_description <- as.character(functional$GO_description)
filtered_gos <- functional[match(sign_go$GO_description, functional$GO_description), ]
forplot <- filtered_gos[,c(3:10,12)]
forplot <- na.omit(forplot)
rownames(forplot) <- forplot$GO_description
forplot <- forplot[,-9]
forplot <- forplot +1
forplot <- forplot %>% mutate_all(.funs = log2)
heatmapplot <- pheatmap(forplot, show_rownames = F, cluster_rows = F)
filtered_gos <- functional[match(sign_go_filtered$GO_description, functional$GO_description), ]
View(filtered_gos)
forplot2 <- filtered_gos[,c(3:10,12)]
forplot2 <- na.omit(forplot2)
rownames(forplot2) <- forplot2$GO_description
forplot2 <- forplot2[,-9]
forplot2 <- forplot2 +1
forplot2 <- forplot2 %>% mutate_all(.funs = log2)
heatmapplot2 <- pheatmap(forplot2, show_rownames = F, cluster_rows = F)
filtered_gos <- functional[!match(sign_go_filtered$GO_description, functional$GO_description), ]
filtered_gos <- functional[match(sign_go_filtered$GO_description, functional$GO_description), ]
filtered_gos <- functional[!(match(sign_go_filtered$GO_description, functional$GO_description)), ]
filtered_gos <- subset(functional, !(functional$GO_description %in% sign_go_filtered$GO_description))
View(filtered_gos)
forplot2 <- filtered_gos[,c(3:10,12)]
forplot2 <- na.omit(forplot2)
rownames(forplot2) <- forplot2$GO_description
forplot2 <- forplot2[,-9]
filtered_gos <- subset(functional, !(functional$GO_description %in% sign_go_filtered$GO_description))
forplot2 <- filtered_gos[,c(3:10,12)]
forplot2 <- na.omit(forplot2)
rownames(forplot2) <- forplot2$GO_description
View(forplot2)
sign_go_filtered <- sign_go[-c(16, 23, 33, 36, 35, 42, 43, 44, 46, 48, 49, 69, 72, 75, 107, 108, 111, 110, 122, 123, 124, 125, 126, 132, 140, 145,146, 147, 148, 163, 162, 165, 170, 179, 182, 194, 196, 198, 207, 217, 218, 219, 220, 224, 225, 229, 231, 233, 234, 237, 247, 250, 263, 264),]
filtered_gos <- functional[match(sign_go_filtered$GO_description, functional$GO_description), ]
forplot2 <- filtered_gos[,c(3:10,12)]
forplot2 <- na.omit(forplot2)
rownames(forplot2) <- forplot2$GO_description
forplot2 <- forplot2[,-9]
forplot2 <- forplot2 +1
forplot2 <- forplot2 %>% mutate_all(.funs = log2)
heatmapplot2 <- pheatmap(forplot2, show_rownames = F, cluster_rows = F)
c<-Func_all_m %>%
nest(data = c(Species, Method,Frequency)) %>% #nesting doesn't work, I can't fix it
mutate(model = map(data, ~anova(lm(Frequency ~ Species, .))),
tidy = map(model, broom::tidy)) %>%
select(GO_description, tidy) %>%
unnest(tidy)
d<-Func_all_m %>%
nest(data = c(Species, Method,Frequency)) %>% #nesting doesn't work, I can't fix it
mutate(model = map(data, ~kruskal.test(Frequency ~ Species, .)),
tidy = map(model, broom::tidy)) %>%
select(GO_description, tidy) %>%
unnest(tidy)
c$significance<-ifelse(c$p.value<0.005,"significant","not sign.")
d$significance<-ifelse(c$p.value<0.005,"significant","not sign.")
View(d)
View(d)
d<-Func_all_m %>%
nest(data = c(Species, Method,Frequency)) %>% #nesting doesn't work, I can't fix it
mutate(model = map(data, ~kruskal.test(Frequency ~ Species, .)),
tidy = map(model, broom::tidy)) %>%
select(GO_description, tidy) %>%
unnest(tidy)
View(d)
d$significance<-ifelse(c$p.value<0.005,"significant","not sign.")
e <- as.data.frame(d$GO_description)
View(e)
e <- as.data.frame(d$p.value)
e$go <- as.data.frame(d$GO_description)
e$pvalue <- as.data.frame(d$p.value)
e$significance <- ifelse(e$pvalue<0.005,"significant","not sign.")
anovasigs <- c[c$significance=="significant"]
anovasigs <- c[c$significance=="significant",]
View(anovasigs)
View(e)
View(c)
c <- na.omit(c)
anovasigs <- c[c$significance=="significant",]
kruskal <- e[e$significance == "significant",]
View(kruskal)
f$go <- d$GO_description
f <- d$GO_description
f$pvalue <- as.data.frame(d$p.value)
View(f)
f <- as.vector(d$GO_description)
g <- as.vector(d$p.value)
h <- cbind(f,g)
View(h)
h <- as.data.frame(cbind(f,g))
f$significance <- ifelse(e$pvalue<0.005,"significant","not sign.")
f <- as.vector(d$GO_description)
g <- as.vector(d$p.value)
h <- as.data.frame(cbind(f,g))
h$significance <- ifelse(h$pvalue<0.005,"significant","not sign.")
View(h)
h$significance <- ifelse(h$g<0.005,"significant","not sign.")
h$g <- as.numeric(h$g)
h$significance <- ifelse(h$g<0.005,"significant","not sign.")
h$g <- as.numeric(as.character(h$g))
h$significance <- ifelse(h$g<0.005,"significant","not sign.")
f <- as.vector(d$GO_description)
g <- as.vector(d$p.value)
h <- as.data.frame(cbind(f,g))
h$g <- as.numeric(as.character(h$g))
h$significance <- ifelse(h$g<0.005,"significant","not sign.")
kruskal <- h[h$significance == "significant",]
View(kruskal)
View(d)
View(GO_sign)
View(functional)
View(filtered_gos)
View(c)
View(stat)
View(stat1)
View(c)
filtered_gos <- functional[match(sign_go$GO_description, functional$GO_description), ]
View(filtered_gos)
forplot3 <- filtered_gos[,c(3:10,12,13)]
View(forplot3)
forplot3 <- forplot3 %>% mutate(sums = rowSums())
forplot3 <- forplot3 %>% mutate(sums = rowSums(.))
forplot3 <- forplot3 %>% mutate(sums = rowSums(is.numeric(.)))
forplot3 <- forplot3 %>% mutate(sums = rowsum(group = Species))
forplot3 <- forplot3 %>% mutate(sums = rowsum(x = is.numeric,group = Species))
forplot3 <- forplot3 %>% mutate(sums = rowSums(.[1:8]))
drops <- forplot3[,9:11]
View(drops)
drops <- drops %>% group_by(Species)
drops <- na.omit(drops)
drops <- drops %>% group_by(Species)
drops_split <- group_split(drops)
View(drops_split)
View(drops_split[[5]])
drops_split <- lapply(drops_split, function(df) {
colnames(df)[3] <- df[1,2]
df <- df[,-2]
})
View(drops_split)
drops_split <- group_split(drops)
View(drops_split)
View(drops_split[[1]])
df <- drops_split[[1]]
df[1,2]
colnames(df)[3]
drops_split <- lapply(drops_split, function(df) {
colnames(df)[3] <- df[1,2]
df <- df[,-2]
})
View(drops_split)
drops_split <- group_split(drops)
View(drops_split)
View(drops_split[[1]])
colnames(drops_split[[1]])[3] <- "Enterobacter sp. SA187"
View(drops_split)
View(drops_split[[2]])
View(drops_split[[3]])
View(drops_split[[4]])
View(drops_split[[5]])
colnames(drops_split[[1]])[3] <- "Enterobacter sp. SA187"
colnames(drops_split[[2]])[3] <- "Frischella perrara"
colnames(drops_split[[3]])[3] <- "Leuconostoc pseudomesenteroides"
colnames(drops_split[[4]])[3] <- "Serratia symbiotica	"
colnames(drops_split[[5]])[3] <- "Sodalis praecaptivus	"
drops_split <- lapply(drops_split, function(df) {
df <- df[-2]
})
library(purrr)
combined <- drops_split %>% purrr::reduce(full_join, by = "GO_description")
View(combined)
combined <- combined %>% replace_na(., replace = 0)
combined <- combined %>% replace_na(0)
combined <- combined %>% replace(is.na(),0)
combined <- combined %>% replace(is.na(.),0)
library(tidyverse)
combined <- combined %>% column_to_rownames(var = "GO_description")
heatmapplot3 <- pheatmap(combined, show_rownames = F, cluster_rows = F)
heatmapplot3 <- pheatmap(combined, show_rownames = F, cluster_rows = F, cluster_cols = F)
combined <- combined + 1
combined <- log2(combined)
heatmapplot3 <- pheatmap(combined, show_rownames = F, cluster_rows = F, cluster_cols = F)
