Taxonomic_IDs_dataframe_genus <- as.data.frame(TaxonomicIDs_genus)
annotationrows_genus <- bind_cols(Taxid_taxonomy_genus,Taxonomic_IDs_dataframe_genus)
colnames(annotationrows_genus) <- c("Domain", "Taxonomic_ID")
annotationrows_genus <- tibble::column_to_rownames(annotationrows_genus, var = "Taxonomic_ID")
ann_colors = list(
Domain = c(Bacteria = "#0D0887FF", Viruses = "#73D055FF", Eukaryota = "#CC4678FF", Viridiplantae = "#F0F921FF", Archaea = "#ad05f5"),
Season = c(May = "#5cb300", July = "#ecf547", November = "#8f7c56"))
ordered_counts_genus <- order(rowMeans(counts(Hives_dds_RLE_genus,normalized=TRUE)), decreasing=TRUE)
final_heatmap_genus <- pheatmap(assay(Hives_counts_vst_genus)[ordered_counts_genus,],cluster_rows = FALSE, show_rownames = FALSE, clustering_distance_cols = "correlation", cluster_cols = TRUE, annotation_col = select(Hives_annotation,"Season"), annotation_row = annotationrows_genus, annotation_colors = ann_colors[1:2], main = "Heatmap genera", height = 15)
ggsave(filename="heatmap_genus.png", plot=final_heatmap_genus, path ="./Figures/Figure_3")
# Species
Hives_dds_species <- DESeqDataSetFromMatrix(countData = Hives_comparison_species, colData = hives_metadata, design = ~Method + Hive, tidy = TRUE)
Hives_dds_RLE_species <- estimateSizeFactors(Hives_dds_species,type = "ratio")
Hives_normalised_counts_species <- counts(Hives_dds_RLE_species, normalized = TRUE)
Hives_counts_vst_species <- varianceStabilizingTransformation(Hives_dds_RLE_species, blind = FALSE)
# Export the counts because it will be needed for the next figure
Hives_normalised_counts_species <- rownames_to_column(Hives_normalised_counts_species, var = "Taxonomic_ID")
write.csv(Hives_normalised_counts_species, file = "./Figures/Figure_3/normalised_counts_species.csv")
write.csv(as.data.frame(Hives_normalised_counts_species), file = "./Figures/Figure_3/normalised_counts_species.csv")
Hives_normalised_counts_species <- rownames_to_column(as.data.frame(Hives_normalised_counts_species), var = "Taxonomic_ID")
View(Hives_normalised_counts)
Hives_dds_species <- DESeqDataSetFromMatrix(countData = Hives_comparison_species, colData = hives_metadata, design = ~Method + Hive, tidy = TRUE)
Hives_dds_RLE_species <- estimateSizeFactors(Hives_dds_species,type = "ratio")
Hives_normalised_counts_species <- counts(Hives_dds_RLE_species, normalized = TRUE)
Hives_normalised_counts_species_export <- as.data.frame(Hives_normalised_counts_species)
View(Hives_normalised_counts_species_export)
Hives_normalised_counts_species_export <- as.data.frame(Hives_normalised_counts_species)
Hives_normalised_counts_species_export <- Hives_normalised_counts_species_export %>% rownames_to_column(., var = "Taxonomic_ID")
View(Hives_normalised_counts_species_export)
write.csv(Hives_normalised_counts_species_export, file = "./Figures/Figure_3/normalised_counts_species.csv")
write.csv(Hives_normalised_counts_species_export, file = "./Figures/Figure_3/normalised_counts_species.csv")
# Direct shotgun metagenomics captures species abundance of honey samples
# R script author: Anastasios Galanis, 2020
# This script will INSTALL packages that have not been previously installed.
# If you do not wish to install new packages, please avoid running this script.
# This script will reproduce Figures 3A
# This script is written in R version 3.6.3
# Load or install (if not present) the required packages
if (!require('tidyverse')) install.packages('tidyverse'); library('tidyverse')
if (!require('purrr')) install.packages('purrr'); library('purrr')
if (!require('taxonomizr')) install.packages('taxonomizr'); library('taxonomizr')
if (!require('here')) install.packages('here'): library('here')
# Taxonomizr will return the taxonomy for each species. However, this requires that a database is built locally (requires 60 GB of space).
# prepareDatabase('accessionTaxa.sql')
# This process will take over 3 hours on a regular laptop/PC. Othherwise, please consider dowloading the zipped file
# from here: and simply unzip it in the cloned repository. Place it at the top level, honeyDSM-seq and not in the subfolders.
if (!require('DESeq2')) install.packages('DESeq2'); library('DESeq2')
if (!require('pheatmap')) install.packages('pheatmap'): library('pheatmap')
if (!require('taxize')) install.packages('taxize'): library('taxize')
setwd(here())
# Import the normalised reads table
Hives_normalised_counts <- read.csv("./Figures/Figure_3/normalised_counts_species.csv")
View(Hives_normalised_counts)
Hives_normalised_counts <- rename(Hives_normalised_counts, X = "Taxonomic_ID")
View(Hives_normalised_counts)
Normalised_counts_with_Hive7 <- Hives_normalised_counts_species %>% round(.,digits = 0)
Rounded_counts <- Hives_normalised_counts %>% round(.,digits = 0)
Relative_abundance_hives <- Rounded_counts %>% mutate_all(.,funs((./sum(.))*100))
View(Relative_abundance_hives)
Hives_normalised_counts <- rename(Hives_normalised_counts, X = "Taxonomic_ID") %>% column_to_rownames(var = "Taxonomic_ID")
Rounded_counts <- Hives_normalised_counts %>% round(.,digits = 0)
Relative_abundance_hives <- Rounded_counts %>% mutate_all(.,funs((./sum(.))*100))
View(Relative_abundance_hives)
Hives_normalised_counts <- read.csv("./Figures/Figure_3/normalised_counts_species.csv")
Hives_normalised_counts <- rename(Hives_normalised_counts, X = "Taxonomic_ID") %>% column_to_rownames(var = "Taxonomic_ID")
Rounded_counts <- Hives_normalised_counts %>% round(.,digits = 0)
Relative_abundance_hives <- Rounded_counts %>% mutate_all(.,funs((./sum(.))*100))
View(Relative_abundance_hives)
colnames(Hives_normalised_counts)
colnames(Hives_normalised_counts)[2:4]
Hives_normalised_counts <- read.csv("./Figures/Figure_3/normalised_counts_species.csv")
Hives_normalised_counts <- rename(Hives_normalised_counts, X = "Taxonomic_ID") %>% column_to_rownames(var = "Taxonomic_ID")
Rounded_counts <- Hives_normalised_counts %>% mutate_at(colnames(Hives_normalised_counts)[2:9], roround(.,digits = 0))
Relative_abundance_hives <- Rounded_counts %>% mutate_at(colnames(Hives_normalised_counts)[2:9],funs((./sum(.))*100)) %>% column_to_rownames(var = "Taxonomic_ID")
Hives_normalised_counts <- read.csv("./Figures/Figure_3/normalised_counts_species.csv")
Hives_normalised_counts <- rename(Hives_normalised_counts, X = "Taxonomic_ID")
Rounded_counts <- Hives_normalised_counts %>% mutate_at(colnames(Hives_normalised_counts)[2:9], roround(.,digits = 0))
Rounded_counts <- Hives_normalised_counts %>% mutate_at(colnames(Hives_normalised_counts)[2:9], round(.,digits = 0))
Rounded_counts <- Hives_normalised_counts %>% mutate_at(colnames(Hives_normalised_counts)[2:9], funs(round(.,digits = 0))
Rounded_counts <- Hives_normalised_counts %>% mutate_at(colnames(Hives_normalised_counts)[2:9], funs(round(.,digits = 0)))
View(Rounded_counts)
View(Hives_normalised_counts)
Relative_abundance_hives <- Rounded_counts %>% mutate_at(colnames(Hives_normalised_counts)[2:9],funs((./sum(.))*100)) %>% column_to_rownames(var = "Taxonomic_ID")
View(Relative_abundance_hives)
classification_phyloseq <- function(df) {
taxids <- rownames(df)
Phylum <- as.character(getTaxonomy(taxids, desiredTaxa = "phylum"))
Superkingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "superkingdom"))
Kingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "kingdom"))
Class <- as.character(getTaxonomy(taxids, desiredTaxa = "class"))
Order <- as.character(getTaxonomy(taxids, desiredTaxa = "order"))
Family <- as.character(getTaxonomy(taxids,desiredTaxa = "family"))
Genus <- as.character(getTaxonomy(taxids,desiredTaxa = "genus"))
Species <- as.character(getTaxonomy(taxids,desiredTaxa = "species"))
cbind(df, Superkingdom, Kingdom, Phylum, Class, Order, Family, Genus, Species)
}
getwd()
Relative_abundance_hives_with_tax <- classification_phyloseq(Relative_abundance_hives)
getwd()
getwd()
classification_phyloseq <- function(df) {
taxids <- rownames(df)
Phylum <- as.character(getTaxonomy(taxids, desiredTaxa = "phylum"))
Superkingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "superkingdom"))
Kingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "kingdom"))
Class <- as.character(getTaxonomy(taxids, desiredTaxa = "class"))
Order <- as.character(getTaxonomy(taxids, desiredTaxa = "order"))
Family <- as.character(getTaxonomy(taxids,desiredTaxa = "family"))
Genus <- as.character(getTaxonomy(taxids,desiredTaxa = "genus"))
Species <- as.character(getTaxonomy(taxids,desiredTaxa = "species"))
cbind(df, Superkingdom, Kingdom, Phylum, Class, Order, Family, Genus, Species)
}
Relative_abundance_hives_with_tax <- classification_phyloseq(Relative_abundance_hives)
Relative_abundance_hives_with_tax <- classification_phyloseq(Relative_abundance_hives)
getwd()
setwd(here())
Relative_abundance_hives_with_tax <- classification_phyloseq(Relative_abundance_hives)
classification_phyloseq <- function(df) {
taxids <- rownames(df)
Phylum <- as.character(getTaxonomy(taxids, desiredTaxa = "phylum", 'accessionTaxa.sql'))
Superkingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "superkingdom", 'accessionTaxa.sql'))
Kingdom <- as.character(getTaxonomy(taxids, desiredTaxa = "kingdom", 'accessionTaxa.sql'))
Class <- as.character(getTaxonomy(taxids, desiredTaxa = "class", 'accessionTaxa.sql'))
Order <- as.character(getTaxonomy(taxids, desiredTaxa = "order", 'accessionTaxa.sql'))
Family <- as.character(getTaxonomy(taxids,desiredTaxa = "family", 'accessionTaxa.sql'))
Genus <- as.character(getTaxonomy(taxids,desiredTaxa = "genus", 'accessionTaxa.sql'))
Species <- as.character(getTaxonomy(taxids,desiredTaxa = "species", 'accessionTaxa.sql'))
cbind(df, Superkingdom, Kingdom, Phylum, Class, Order, Family, Genus, Species)
}
Relative_abundance_hives_with_tax <- classification_phyloseq(Relative_abundance_hives)
Relative_abundance_with_tax <- Relative_abundance_hives_with_tax
Relative_abundance_with_tax$Superkingdom <- as.character(Relative_abundance_with_tax$Superkingdom)
Relative_abundance_with_tax$Kingdom <- as.character(Relative_abundance_with_tax$Kingdom)
Relative_abundance_with_tax_not_found <- Relative_abundance_with_tax %>% mutate_all(~replace(., is.na(.), print("Not found")))
View(Relative_abundance_with_tax_not_found)
Hives_normalised_counts <- read.csv("./Figures/Figure_3/normalised_counts_species.csv")
Hives_normalised_counts <- rename(Hives_normalised_counts, X = "Taxonomic_ID")
Rounded_counts <- Hives_normalised_counts %>% mutate_at(colnames(Hives_normalised_counts)[2:9], funs(round(.,digits = 0))) %>% column_to_rownames(var = "Taxonomic_ID")
View(Hives_normalised_counts)
View(Rounded_counts)
Rounded_counts_with_tax <- classification_phyloseq(Rounded_counts)
View(Rounded_counts_with_tax)
colnames(Rounded_counts_with_tax)[1:8]
Rounded_counts_with_tax <- Rounded_counts_with_tax %>% mutate_all(~replace(., is.na(.), print("Not found")))
Rounded_counts_with_tax <- na.omit(Rounded_counts_with_tax$Superkingdom)
Rounded_counts_with_tax <- Rounded_counts_with_tax %>% mutate_all(~replace(., is.na(.), print("Not found")))
Rounded_counts_with_tax <- na.omit(Rounded_counts_with_tax$Superkingdom)
Rounded_counts_with_tax <- classification_phyloseq(Rounded_counts)
Rounded_counts_with_tax <- Rounded_counts_with_tax %>% mutate_all(~replace(., is.na(.), print("Not found")))
View(Rounded_counts_with_tax)
Rounded_counts_with_tax <- Rounded_counts_with_tax %>% mutate_all(~replace(., is.na(.), NA)))
Rounded_counts_with_tax <- Rounded_counts_with_tax %>% filter(., Superkingdom != c("Archaea","Bacteria","Eukaryota","Viruses"))
View(Rounded_counts_with_tax)
levels(Rounded_counts_with_tax$Superkingdom)
Rounded_counts_with_tax <- classification_phyloseq(Rounded_counts)
levels(Rounded_counts_with_tax$Superkingdom)
View(Rounded_counts_with_tax)
is.na(Rounded_counts_with_tax$Superkingdom)
?drop_na
?drop_na()
Rounded_counts_with_tax <- Rounded_counts_with_tax %>% drop_na(cols = "Superkingdom")
Rounded_counts_with_tax <- Rounded_counts_with_tax %>% drop_na(Superkingdom)
colnames(Rounded_counts_with_tax)[1:8]
Relative_abundance_hives <- Rounded_counts_with_tax %>% mutate_at(colnames(Rounded_counts_with_tax)[1:8],funs((./sum(.))*100)) %>% column_to_rownames(var = "Taxonomic_ID")
# Calculate relative abundance
Relative_abundance_hives <- Rounded_counts_with_tax %>% mutate_at(colnames(Rounded_counts_with_tax)[1:8],funs((./sum(.))*100))
View(Relative_abundance_hives)
View(Rounded_counts_with_tax)
# Remove NAs from Superkingdom
Rounded_counts_with_tax <- Rounded_counts_with_tax %>% rownames_to_column(var="Taxonomic_ID") %>%  drop_na(Superkingdom)
View(Rounded_counts_with_tax)
Relative_abundance_hives <- Rounded_counts_with_tax %>% mutate_at(colnames(Rounded_counts_with_tax)[1:8],funs((./sum(.))*100))
# Calculate relative abundance
Relative_abundance_hives <- Rounded_counts_with_tax %>% mutate_at(colnames(Rounded_counts_with_tax)[2:9],funs((./sum(.))*100))
View(Relative_abundance_hives)
# We copy the file into a new one so we have a new varibale to adjust and alter without needing to complete everything
# from the beginning
Relative_abundance_with_tax <- Relative_abundance_hives
# We copy the file into a new one so we have a new varibale to adjust and alter without needing to complete everything
# from the beginning
Relative_abundance_with_tax <- Relative_abundance_hives[,-1]
View(Relative_abundance_with_tax)
nDSM_H4 <- Relative_abundance_with_tax[,c(1,9,10,16)] %>% filter(.,DirectSM_H4 != 0)
nDSM_H5 <- Relative_abundance_with_tax[,c(2,9,10,16)] %>% filter(.,DirectSM_H5 != 0)
nDSM_H6 <- Relative_abundance_with_tax[,c(3,9,10,16)] %>% filter(.,DirectSM_H6 != 0)
nDSM_H7 <- Relative_abundance_with_tax[,c(4,9,10,16)] %>% filter(.,DirectSM_H7 != 0)
nSM_H4 <- Relative_abundance_with_tax[,c(5,9,10,16)] %>% filter(.,SM_H4 != 0)
nSM_H5 <- Relative_abundance_with_tax[,c(6,9,10,16)] %>% filter(.,SM_H5 != 0)
nSM_H6 <- Relative_abundance_with_tax[,c(7,9,10,16)] %>% filter(.,SM_H6 != 0)
nSM_H7 <- Relative_abundance_with_tax[,c(8,9,10,16)] %>% filter(.,SM_H7 != 0)
new_lyst <- list(DSM_H4,DSM_H5,DSM_H6,DSM_H7,SM_H4,SM_H5,SM_H6,SM_H7)
names(new_lyst) <- c("DSM_H4","DSM_H5","DSM_H6","DSM_H7","SM_H4","SM_H5","SM_H6","SM_H7")
DSM_H4 <- Relative_abundance_with_tax[,c(1,9,10)] %>% filter(.,DirectSM_H4 != 0)
DSM_H5 <- Relative_abundance_with_tax[,c(2,9,10)] %>% filter(.,DirectSM_H5 != 0)
DSM_H6 <- Relative_abundance_with_tax[,c(3,9,10)] %>% filter(.,DirectSM_H6 != 0)
DSM_H7 <- new_counts_with_tax1[,c(4,9,10)] %>% filter(.,DirectSM_H7 != 0)
SM_H4 <- Relative_abundance_with_tax[,c(5,9,10)] %>% filter(.,SM_H4 != 0)
SM_H5 <- Relative_abundance_with_tax[,c(6,9,10)] %>% filter(.,SM_H5 != 0)
SM_H6 <- Relative_abundance_with_tax[,c(7,9,10)] %>% filter(.,SM_H6 != 0)
SM_H7 <- Relative_abundance_with_tax[,c(8,9,10)] %>% filter(.,SM_H7 != 0)
new_lyst <- list(DSM_H4,DSM_H5,DSM_H6,DSM_H7,SM_H4,SM_H5,SM_H6,SM_H7)
names(new_lyst) <- c("DSM_H4","DSM_H5","DSM_H6","DSM_H7","SM_H4","SM_H5","SM_H6","SM_H7")
DSM_H7 <- Relative_abundance_with_tax[,c(4,9,10)] %>% filter(.,DirectSM_H7 != 0)
SM_H4 <- Relative_abundance_with_tax[,c(5,9,10)] %>% filter(.,SM_H4 != 0)
SM_H5 <- Relative_abundance_with_tax[,c(6,9,10)] %>% filter(.,SM_H5 != 0)
SM_H6 <- Relative_abundance_with_tax[,c(7,9,10)] %>% filter(.,SM_H6 != 0)
SM_H7 <- Relative_abundance_with_tax[,c(8,9,10)] %>% filter(.,SM_H7 != 0)
new_lyst <- list(DSM_H4,DSM_H5,DSM_H6,DSM_H7,SM_H4,SM_H5,SM_H6,SM_H7)
names(new_lyst) <- c("DSM_H4","DSM_H5","DSM_H6","DSM_H7","SM_H4","SM_H5","SM_H6","SM_H7")
count_kingdoms <- function(df, name) {
Bacteria <- sum(df$Superkingdom == "Bacteria")
Viridiplantae <- sum(df$Kingdom == "Viridiplantae")
Eukaryota <- (sum(df$Superkingdom == "Eukaryota") - Viridiplantae)
Viruses <- sum(df$Superkingdom == "Viruses")
Archaea <- sum(df$Superkingdom == "Archaea")
df_1 <- rbind(Bacteria,Viruses,Archaea,Viridiplantae,Eukaryota) %>% as.data.frame();
return(df_1)
}
kingdoms_per_sample <- lapply(new_lyst,count_kingdoms) %>% do.call(cbind,.)
kingdoms_per_sample2 <- lapply(new_lyst,count_kingdoms) %>% do.call(rbind,.) %>% t() %>% as.data.frame()
rownames(kingdoms_per_sample2) <- NULL
colnames(kingdoms_per_sample) <- c("DirectSM_H4","DirectSM_H5","DirectSM_H6","DirectSM_H7","SM_H4","SM_H5","SM_H6","SM_H7")
kingdom_for_plot <- t(kingdoms_per_sample) %>% as.data.frame() %>% rownames_to_column(var = "Sample")
kingdom_for_plot$Sample <- rep(c("DirectSM_H4","DirectSM_H5","DirectSM_H6","DirectSM_H7","SM_H4","SM_H5","SM_H6","SM_H7"))
new_kingdom_with_percent1 <- kingdom_for_plot
new_kingdom_with_percent2 = round((new_kingdom_with_percent1[,-1]/rowSums(new_kingdom_with_percent1[,-1]))*100, digits = 2)
new_kingdom_with_percent3 = new_kingdom_with_percent2[,-3]
names_samples <- as.data.frame(kingdom_for_plot[,1])
new_kingdom_with_percent4 = cbind(names_samples,new_kingdom_with_percent3)
colnames(new_kingdom_with_percent4) <- c("Sample","Bacteria","Viruses","Viridiplantae","Eukaryota")
kingdom_melt_percent5 <- reshape2::melt(new_kingdom_with_percent4, id = "Sample")
kingdom_melt_percent5$Sample <- factor(kingdom_melt_percent5$Sample, levels = c("SM_H4","SM_H5","SM_H6","SM_H7","DirectSM_H4","DirectSM_H5","DirectSM_H6","DirectSM_H7"))
kingdom_melt <- reshape2::melt(kingdom_for_plot, id = "Sample") %>% filter(variable != "Archaea")
kingdom_melt$Sample <- factor(kingdom_melt$Sample, levels = c("SM_H4","SM_H5","SM_H6","SM_H7","DirectSM_H4","DirectSM_H5","DirectSM_H6","DirectSM_H7"))
x_axis_labels <- c("SM H4","SM H5","SM H6","SM H7","DirectSM H4","DirectSM H5","DirectSM H6","DirectSM H7")
barplot_species_absolute <- ggplot(kingdom_melt, aes(x=Sample, y= value, fill=variable)) + geom_bar(stat = "identity") + theme_bw() + scale_fill_manual(values=c("#0D0887FF","#F0F921FF","#73D055FF","#CC4678FF")) + labs(y = "Number of species", x="", fill="Domain") + theme(text = element_text(size=15),axis.text.x = element_text(angle=45, hjust=1, size = 10)) + scale_x_discrete(labels = x_axis_labels) + geom_text(aes(label=ifelse(value>20,paste0(kingdom_melt_percent5$value,"%"),"")), position=position_stack(vjust=0.5) , colour="white")
barplot_species_absolute
View(Rounded_counts)
counts_1 <- Rounded_counts
hive4counts <- counts_1[,c(1,2)]
View(hive4counts)
hive5counts <- counts_1[,c(3,4)]
hive6counts <- counts_1[,c(5,6)]
hive7counts <- counts_1[,c(7,8)]
hive4counts <- counts_1[,c(1,2)] %>% mutate(Hive4_diff = DirectSM_H4 - SM_H4)
hive4counts <- counts_1[,c(1,2)] %>% mutate(Hive4_diff = "DirectSM_H4" - "SM_H4")
hive5counts <- counts_1[,c(3,6)]
hive6counts <- counts_1[,c(5,7)]
hive7counts <- counts_1[,c(7,8)]
hive4counts <- counts_1[,c(1,5)]
hive4counts$H4_diff = hive4counts$DirectSM_H4 - hive4counts$SM_H4
View(hive4counts)
hive5counts <- counts_1[,c(2,6)]
hive6counts <- counts_1[,c(3,7)]
hive7counts <- counts_1[,c(4,8)]
hive4counts$H4_diff = hive4counts$DirectSM_H4 - hive4counts$SM_H4
hive4counts$H5_diff = hive5counts$DirectSM_H5 - hive5counts$SM_H5
hive4counts$H6_diff = hive6counts$DirectSM_H6 - hive6counts$SM_H6
hive4counts$H7_diff = hive7counts$DirectSM_H7 - hive7counts$SM_H7
hive4counts <- counts_1[,c(1,5)]
hive5counts <- counts_1[,c(2,6)]
hive6counts <- counts_1[,c(3,7)]
hive7counts <- counts_1[,c(4,8)]
hive4counts$H4_diff = hive4counts$DirectSM_H4 - hive4counts$SM_H4
hive5counts$H5_diff = hive5counts$DirectSM_H5 - hive5counts$SM_H5
hive6counts$H6_diff = hive6counts$DirectSM_H6 - hive6counts$SM_H6
hive7counts$H7_diff = hive7counts$DirectSM_H7 - hive7counts$SM_H7
hive4counts <- counts_1[,c(1,5)] %>% rownames_to_column(var = "Taxonomic_ID")
hive4counts <- counts_1[,c(1,5)] %>% rownames_to_column(var = "Taxonomic_ID")
hive5counts <- counts_1[,c(2,6)] %>% rownames_to_column(var = "Taxonomic_ID")
hive6counts <- counts_1[,c(3,7)] %>% rownames_to_column(var = "Taxonomic_ID")
hive7counts <- counts_1[,c(4,8)] %>% rownames_to_column(var = "Taxonomic_ID")
hive4counts$H4_diff = hive4counts$DirectSM_H4 - hive4counts$SM_H4
hive5counts$H5_diff = hive5counts$DirectSM_H5 - hive5counts$SM_H5
hive6counts$H6_diff = hive6counts$DirectSM_H6 - hive6counts$SM_H6
hive7counts$H7_diff = hive7counts$DirectSM_H7 - hive7counts$SM_H7
differences <- merge(hive4counts[,c(1,4)],hive5counts[,c(1,4)],hive6counts[,c(1,4)],hive7counts[,c(1,4)],by="Taxonomic_ID")
differences <- merge(hive4counts[,c(1,4)],hive5counts[,c(1,4)],hive6counts[,c(1,4)],hive7counts[,c(1,4)],by=1)
differences <- merge(hive4counts[,c(1,4)],hive5counts[,c(1,4)],hive6counts[,c(1,4)],hive7counts[,c(1,4)],by=Taxonomic_ID)
differences <- merge(hive4counts[,c(1,4)],hive5counts[,c(1,4)],hive6counts[,c(1,4)],hive7counts[,c(1,4)])
h4diff <- hive4counts[,c(1,4)]
View(h4diff)
h4diff <- hive4counts[,c(1,4)]
h5diff <- hive5counts[,c(1,4)]
h6diff <- hive6counts[,c(1,4)]
h7diff <- hive7counts[,c(1,4)]
differences <- full_join(h4diff,h5diff,h6diff,h7diff, by="Taxonomic_ID")
differences <- full_join(h4diff,h5diff,h6diff,h7diff)
differences <- merge(h4diff,h5diff,h6diff,h7diff)
differences <- cbind(h4diff,h5diff,h6diff,h7diff)
View(differences)
counts_1$H4_diff <- counts_1$DirectSM_H4 - counts_1$SM_H4
View(counts_1)
counts_1$H4_diff <- counts_1$DirectSM_H4 - counts_1$SM_H4
counts_1$H5_diff = counts_1$DirectSM_H5 - counts_1$SM_H5
counts_1$H6_diff = counts_1$DirectSM_H6 - counts_1$SM_H6
counts_1$H7_diff = counts_1$DirectSM_H7 - counts_1$SM_H7
differences <- differences[,c(9:12)]
differences <- counts_1[,c(9:12)]
View(differences)
install.packages("metacoder")
library(metacoder)
ids_metacoder <- rownames(differences[1:10],)
ids_metacoder <- rownames(differences[1:10])
ids_metacoder <- rownames(differences)
ids_metacoder <- as.numeric(rownames(differences))[1:10]
load("filtered_data.Rdata")
load("C:/Users/user/Downloads/filtered_data.Rdata")
obj %>%
filter_taxa(grepl(pattern = "^[a-zA-Z]+$", taxon_names)) %>% # remove "odd" taxa
filter_taxa(taxon_ranks == "o", supertaxa = TRUE) %>% # subset to the order rank
heat_tree(node_label = gsub(pattern = "\\[|\\]", replacement = "", taxon_names),
node_size = n_obs,
node_color = n_obs,
node_color_axis_label = "OTU count",
layout = "davidson-harel", initial_layout = "reingold-tilford")
treehe <- heat_tree(obj)
treehe
ids <- as.numeric(rownames(differences))
write.csv("./Figures/Figure_3/taxids.csv")
getwd()
write.csv(ids,"./Figures/Figure_3/taxids.csv")
ids <- as.data.frame(rownames(differences))
View(ids)
write.csv(ids,"./Figures/Figure_3/taxids.csv")
write.csv(ids[-1,],"./Figures/Figure_3/taxids.csv",row.names = FALSE)
write.csv(ids[-1,],"./Figures/Figure_3/taxids.csv",row.names = FALSE)
?write.csv()
write.csv(ids[-1,],"./Figures/Figure_3/taxids.csv",row.names = FALSE,col.names = FALSE)
View(ids)
write.csv(ids,"./Figures/Figure_3/taxids.csv",row.names = FALSE, col.names = FALSE)
write.csv(ids,"./Figures/Figure_3/taxids.csv",row.names = FALSE, col.names = FALSE)
colnames(ids) <- "ids"
write.csv(ids,"./Figures/Figure_3/taxids.csv",row.names = FALSE, col.names = FALSE)
write.table(ids,"./Figures/Figure_3/taxids.csv",row.names = FALSE, col.names = FALSE)
library(taxize)
View(Rounded_counts_with_tax)
ids <- Rounded_counts_with_tax$Species
colnames(ids) <- "ids"
colnames(ids) <- "ids"
colnames(ids)
ids <- as.data.frame(Rounded_counts_with_tax$Species)
colnames(ids) <- "ids"
write.table(ids,"./Figures/Figure_3/taxids.csv",row.names = FALSE, col.names = FALSE)
library(ggtree)
tree1 <- read.tree("phyliptree.phy")
circ <- ggtree(tree1, layout = "circular")
circ
p1 <- gheatmap(circ, differences, offset=.8, width=.2,
colnames_angle=95, colnames_offset_y = .25) +
scale_fill_viridis_d(option="D", name="discrete\nvalue")
p1
p1 <- gheatmap(circ, differences, offset=.8, width=.2,
colnames_angle=95, colnames_offset_y = .25)
p1
rownames(differences) <- tree1$tip.label
nrow(tree1$tip.label)
View(Rounded_counts_with_tax)
counts_1 <- Rounded_counts_with_tax[,c(1:9)]
View(counts_1)
counts_1$H4_diff <- counts_1$DirectSM_H4 - counts_1$SM_H4
counts_1$H5_diff = counts_1$DirectSM_H5 - counts_1$SM_H5
counts_1$H6_diff = counts_1$DirectSM_H6 - counts_1$SM_H6
counts_1$H7_diff = counts_1$DirectSM_H7 - counts_1$SM_H7
differences <- counts_1[,c(9:12)]
rownames(differences) <- tree1$tip.label
tree1$tip.label
library(treeio)
tree1 <- read.phylip.tree("phyliptree.phy")
tree1 <- read.tree("phyliptree.phy")
circ <- ggtree(tree1, layout = "circular")
rownames(differences) <- tree1$tip.label
tree1 <- read.newick("phyliptree.phy")
tree1 <- read.newick("phyliptree.phy")
circ <- ggtree(tree1, layout = "circular")
rownames(differences) <- tree1$tip.label
library(ape)
tree1 <- ape::read.tree("phyliptree.phy")
circ <- ggtree(tree1, layout = "circular")
rownames(differences) <- tree1$tip.label
tree1$edge
tree1 <- ape::read.tree("phyliptree.phy")
write.beast(tree1,file="treeexport.nexus")
tree1$tip.label
tree1 <- read.mega("tree.nexus")
tree1 <- read.tree("tree.nexus")
getwd()
tree1 <- read.tree("tree.newick")
tree1 <- read.tree("newtree.nexus")
tree1 <- read.tree("tree.newick")
tree1 <- read.tree("tree.newick")
circ <- ggtree(tree1, layout = "circular")
p1 <- gheatmap(circ, differences, offset=.8, width=.2,
colnames_angle=95, colnames_offset_y = .25)
p1
tree1$tip.label
rownames(differences) <- tree1$tip.label
p1
View(differences)
tree1 <- read.tree("new_dash.newick")
circ <- ggtree(tree1, layout = "circular")
rownames(differences) <- tree1$tip.label
tree1$tip.label[1:10]
rownames(differences)[1:10]
install.packages("ggnewscalefill")
p1 <- gheatmap(circ, differences, offset=.8, width=.2,
colnames_angle=95, colnames_offset_y = .25, scale_fill_viridis_d())
p1 <- gheatmap(circ, differences, offset=.8, width=.2,
colnames_angle=95, colnames_offset_y = .25, scale_fill_viridis_d(option="D", name="continuous\nvalue"))
library(viridis)
p1 <- gheatmap(circ, differences, offset=.8, width=.2,
colnames_angle=95, colnames_offset_y = .25, scale_fill_viridis_d(option="D", name="continuous\nvalue"))
?gheatmap()
p1 <- gheatmap(circ, differences, offset=.8, width=.2,
colnames_angle=95, colnames_offset_y = .25) + scale_fill_viridis_d(option="D", name="continuous\nvalue"))
p1 <- gheatmap(circ, differences, offset=.8, width=.2,
colnames_angle=95, colnames_offset_y = .25) + scale_fill_viridis_d(option="D", name="continuous\nvalue")
p1
p1 <- gheatmap(circ, differences, offset=.8, width=.2,
colnames_angle=95, colnames_offset_y = .25) + scale_fill_viridis_d()
p1
p1 <- gheatmap(circ, differences, offset=.8, width=.2,
colnames_angle=95, colnames_offset_y = .25) + scale_fill_viridis_d(option="D", name="discrete\nvalue")
p1
tree_hclust <- ape::as.phylo(tree1)
install.packages("circlize")
library(circlize)
dend = as.dendrogram(tree_hclust)
tree_hclust <- ape::as.hclust.phylo(tree1)
install.packages("phylogram")
library(phylogram)
dend = as.dendrogram.phylo(tree1)
tree_hclust <- ape::as.hclust(tree1)
tree_hclust <- ape::as.phylo.hclust(tree1)
tree_hclust <- as.hclust(circ)
tree_hclust <- as.hclust.ggtree(circ)
tree1 <- read.tree("new_dash.newick")
circ <- ggtree(tree1, layout = "circular")
circ$labels
rownames(differences) <- tree1$tip.label
p1 <- gheatmap(circ, differences,
colnames_angle=95, colnames_offset_y = .25) + scale_fill_viridis_d(option="D", name="discrete\nvalue")
p1
p1 <- gheatmap(circ, differences,
colnames_angle=95, colnames_offset_y = .25) + scale_fill_viridis_d()
p1
p1 <- gheatmap(circ, differences,
colnames_angle=95, colnames_offset_y = .25)
p1
View(counts_1)
differences <- counts_1[,c(10:13)]
p1 <- gheatmap(circ, differences, colnames_angle=95, colnames_offset_y = .25) + scale_fill_viridis()
p1
circ <- ggtree(tree1, layout = "circular") + theme_tree2()
p1 <- gheatmap(circ, differences, colnames_angle=95, colnames_offset_y = .25) + scale_fill_viridis()
p1
p1 <- gheatmap(circ, differences, colnames_angle=95, colnames_offset_y = .25)
ggsave(p1, filename="circlularplot.pdf", device = "pdf")
p1 <- gheatmap(circ, differences, colnames_angle=95, colnames_offset_y = .25)
p1
circ <- ggtree(tree1, layout = "circular")
p1
library(ggplot2)
differences %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
differences %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
View(differences)
library(reshape2)
melt_dif <- reshape2::melt(differences)
View(melt_dif)
melt_dif %>%
ggplot( aes(x=variable, y=value, fill=variable)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11))
library(ggridges)
ggplot(melt_dif, aes(x = variable, y = value, fill = variable)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
ggplot(melt_dif, aes(x = variable, y = value)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
head(diamonds)
ggplot(melt_dif, aes(x = value, y = variable, fill = variable)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
