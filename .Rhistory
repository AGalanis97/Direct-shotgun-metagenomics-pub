go_trial <- go_names
go_trial$species <- gsub(".*[__]([^.]+)[.].*", "\\1", go_trial$species)
go_trial <- go_names
go_trial$species <- gsub(".*[__]([^.]+)[.].*", "\\1", go_trial$species)
go_trial$go_function <- gsub("|g", "", go_trial$go_function)
go_trial <- go_names
go_trial$species <- gsub(".*[__]([^.]+)[.].*", "\\1", go_trial$species)
go_trial$go_function <- gsub("|g*", "", go_trial$go_function)
View(go_trial)
go_trial <- go_names
go_trial$go_function <- gsub("|g.*", "", go_trial$go_function)
go_trial <- go_names
go_trial$go_function <- gsub("|.*", "", go_trial$go_function)
go_trial <- go_names
go_trial$go_function <- gsub("//|.*", "", go_trial$go_function)
go_trial <- go_names
go_trial$go_function <- gsub("/|.*", "", go_trial$go_function)
go_trial <- go_names
go_trial$go_function <- gsub("|", "", go_trial$go_function)
go_trial <- go_names
go_trial$go_function <- gsub("\\|.*", "", go_trial$go_function)
go_trial$species <- gsub(".*[__]([^.]+)[.].*", "\\1", go_trial$species)
go_trial2 <- go_trial[!grepl("GO:", go_trial$species)]
go_trial2 <- go_trial[!grepl("GO:", go_trial$species),]
View(go_trial2)
go_names_deseq <- round(go_names, digits = 0)
go_names <- read.table('./Figures/Figure_7/combined_tables_with_go_names.tsv',
row.names=1, header=T, sep='\t',
comment.char='', quote='')
# Remove the suffix from the sample labels
names(go_names) <- gsub('_Abundance.RPKs', '', names(go_names))
go_names_deseq <- round(go_names, digits = 0)
Hives_dds_go <- DESeqDataSetFromMatrix(countData = go_names_deseq, colData = hives_metadata_new, design = ~Method + Season, tidy = F)
Hives_dds_RLE_go <- estimateSizeFactors(Hives_dds_go,type = "ratio")
Hives_normalised_counts_go <- counts(Hives_dds_RLE_go, normalized = TRUE)
View(Hives_normalised_counts_go)
go_names_normalised <- Hives_normalised_counts_go %>% rownames_to_column(var="species")
go_names_normalised$go_function <- go_names_normalised$species
go_names_normalised$species <- gsub(".*[__]([^.]+)[.].*", "\\1", go_names_normalised$species)
go_names_normalised$go_function <- gsub("\\|.*", "", go_names_normalised$go_function)
go_names_normalised <- go_trial[!grepl("GO:", go_names_normalised$species),]
go_names_normalised <- counts(Hives_dds_RLE_go, normalized = TRUE)
Hives_normalised_counts_go <- counts(Hives_dds_RLE_go, normalized = TRUE)
go_names_normalised <- Hives_normalised_counts_go %>% rownames_to_column(var="species")
newfram <- as.data.frame(Hives_normalised_counts_go)
View(newfram)
go_names_normalised <- as.data.frame(Hives_normalised_counts_go) %>% rownames_to_column(var="species")
go_names_normalised$go_function <- go_names_normalised$species
go_names_normalised$species <- gsub(".*[__]([^.]+)[.].*", "\\1", go_names_normalised$species)
go_names_normalised$go_function <- gsub("\\|.*", "", go_names_normalised$go_function)
go_names_normalised <- go_trial[!grepl("GO:", go_names_normalised$species),]
go_names_normalised <- as.data.frame(Hives_normalised_counts_go) %>% rownames_to_column(var="species")
go_names_normalised$go_function <- go_names_normalised$species
go_names_normalised$species <- gsub(".*[__]([^.]+)[.].*", "\\1", go_names_normalised$species)
go_names_normalised$go_function <- gsub("\\|.*", "", go_names_normalised$go_function)
go_names_normalised <- go_names_normalised[!grepl("GO:", go_names_normalised$species),]
View(go_names_normalised)
library(reshape2)
go_for_plot <- reshape2::melt(go_names_normalised)
View(go_for_plot)
go_for_plot2 <- go_for_plot[-c(1,2),]
ggplot(go_for_plot2, aes(x=species, y=value)) +
geom_bar(stat = "identity") + theme(legend.position="none")
View(go_for_plot2)
ggplot(go_for_plot2, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "stack") + theme(legend.position="none")
go_for_plot2 <- go_for_plot[-c(1,25),]
View(go_for_plot2)
go_for_plot <- reshape2::melt(go_names_normalised)
go_for_plot2 <- go_for_plot[-c(1,2),]
View(go_for_plot)
go_for_plot <- reshape2::melt(go_names_normalised)
go_for_plot2 <- go_for_plot[-c(1,24),]
View(go_for_plot2)
go_for_plot3 <- go_for_plot[-c(1,24),]
View(go_for_plot3)
go_for_plot2 <- go_for_plot[-c(1:24),]
View(go_for_plot2)
ggplot(go_for_plot2, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "stack") + theme(legend.position="none")
go_names_normalised <- go_names_normalised[!grepl("UNMAPPED", go_names_normalised$species),]
go_names_normalised <- go_names_normalised[!grepl("UNGROUPED", go_names_normalised$species),]
go_for_plot <- reshape2::melt(go_names_normalised)
go_for_plot2 <- go_for_plot[-c(1:24),]
ggplot(go_for_plot2, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "stack") + theme(legend.position="none")
ggplot(go_for_plot2, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none")
library(viridis)
ggplot(go_for_plot2, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none") + scale_color_viridis_d()
ggplot(go_for_plot2, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none") + scale_fill_viridis_d()
ggplot(go_for_plot2, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="bottom") + scale_fill_viridis_d() + theme_minimal() ylab("GO function (%)")
ggplot(go_for_plot2, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="bottom") + scale_fill_viridis_d() + theme_minimal() + ylab("GO function (%)")
go_names_normalised2 <- as.data.frame(Hives_normalised_counts_go) %>% rownames_to_column(var="species")
go_names_normalised2 <- go_names_normalised2[!grepl("g_", go_names_normalised2$species),]
View(go_names_normalised2)
go_names_normalised2$rowsum <- rowSums(go_names_normalised2[,-1])
View(go_names_normalised2)
go_names_normalised2 <- order(go_names_normalised2$rowsum)
go_names_normalised2 <- go_names_normalised2[order(go_names_normalised2$rowsum),]
go_names_normalised2 <- as.data.frame(Hives_normalised_counts_go) %>% rownames_to_column(var="species")
go_names_normalised2 <- go_names_normalised2[!grepl("g_", go_names_normalised2$species),]
go_names_normalised2$rowsum <- rowSums(go_names_normalised2[,-1])
go_names_normalised2 <- go_names_normalised2[-c(1,2),]
go_names_normalised2 <- go_names_normalised2[order(go_names_normalised2$rowsum),]
go_names_normalised2 <- go_names_normalised2[order(go_names_normalised2$rowsum, decreasing = T),]
go_top_30 <- go_names_normalised2[1:30,]
View(go_top_30)
go_top_30 <- go_names_normalised2$species[1:30,]
go_top_30 <- go_names_normalised2$species[1:30]
go_for_plot3 <- go_for_plot2[go_for_plot2$go_function %in% go_top_30,]
View(go_for_plot3)
ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none") + scale_fill_viridis_d() + theme_minimal() + ylab("GO function (%)")
ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none") + scale_fill_viridis_d() + theme_minimal() + ylab("GO function (%)")
ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none")
ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none") + scale_fill_viridis_d()
ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none") + scale_fill_viridis_d() + theme_minimal()
go_top_30 <- go_names_normalised2$species[1:10]
go_for_plot2 <- go_for_plot[-c(1:24),]
go_for_plot3 <- go_for_plot2[go_for_plot2$go_function %in% go_top_30,]
ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none") + scale_fill_viridis_d() + theme_minimal() + ylab("GO function (%)")
go_top_30 <- go_names_normalised2$species[1:20]
go_for_plot2 <- go_for_plot[-c(1:24),]
go_for_plot3 <- go_for_plot2[go_for_plot2$go_function %in% go_top_30,]
ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none") + scale_fill_viridis_d() + theme_minimal() + ylab("GO function (%)")
go_names_previous <- read.table('./Figures/Figure_7/combined_tables_with_go_names_previous.tsv',
row.names=1, header=T, sep='\t',
comment.char='', quote='')
# Remove the suffix from the sample labels
names(go_names_previous) <- gsub('_Abundance.RPKs', '', names(go_names_previous))
library(tidyverse)
library(ggplot2)
library(reshape2)
View(go_names_previous)
go_names_deseq_previous <- round(go_names_previous, digits = 0)
go_names_normalised_previous <- go_names_deseq_previous %>% rownames_to_column(var="species")
go_names_normalised_previous$go_function <- go_names_normalised_previous$species
go_names_normalised_previous$species <- gsub(".*[__]([^.]+)[.].*", "\\1", go_names_normalised_previous$species)
go_names_normalised_previous$go_function <- gsub("\\|.*", "", go_names_normalised_previous$go_function)
go_names_normalised_previous <- go_names_normalised_previous[!grepl("GO:", go_names_normalised_previous$species),]
go_names_normalised_previous <- go_names_normalised_previous[!grepl("UNMAPPED", go_names_normalised_previous$species),]
go_names_normalised_previous <- go_names_normalised_previous[!grepl("UNGROUPED", go_names_normalised_previous$species),]
go_names_normalised3 <- go_names_normalised_previous[!grepl("g_", go_names_normalised_previous$species),]
go_names_normalised3$rowsum <- rowSums(go_names_normalised3[,-1])
go_names_normalised3 <- go_names_normalised3[-c(1,2),]
go_names_normalised3 <- go_names_normalised3[order(go_names_normalised3$rowsum, decreasing = T),]
go_top_30_previous <- go_names_normalised3$species[1:20]
go_for_plot_previous <- reshape2::melt(go_names_normalised3)
go_for_plot3 <- go_for_plot_previous[-c(1:24),]
go_for_plot4 <- go_for_plot3[go_for_plot3$go_function %in% go_top_30_previous,]
View(go_names_normalised3)
View(go_names_normalised2)
View(go_names_normalised3)
go_names_normalised3 <- go_names_normalised_previous[!grepl("g_", go_names_normalised_previous$species),]
go_names_normalised3$rowsum <- rowSums(go_names_normalised3[,-1])
go_names_normalised3$rowsum <- rowSums(go_names_normalised3[,c(2,3)])
go_names_normalised3 <- go_names_normalised3[-c(1:4),]
go_names_normalised3 <- go_names_normalised3[order(go_names_normalised3$rowsum, decreasing = T),]
go_top_30_previous <- go_names_normalised3$go_function[1:20]
go_for_plot_previous <- reshape2::melt(go_names_normalised3)
View(go_for_plot_previous)
go_for_plot4 <- go_for_plot_previous[go_for_plot_previous$go_function %in% go_top_30_previous,]
go_top_30 %in% go_top_30_previous
go_top_30_previous
View(go_names_normalised)
if (!require('tidyverse')) install.packages('tidyverse'); library('tidyverse')
if (!require('purrr')) install.packages('purrr'); library('purrr')
if (!require('here')) install.packages('here'): library('here')
if (!require('pheatmap')) install.packages('pheatmap'): library('pheatmap')
if (!require('EnhancedVolcano')) BiocManager::install('EnhancedVolcano'): library('EnhancedVolcano')
if (!require("DEGreport")) BiocManager::install("DEGreport"): library('DEGreport')
if (!require("reshape2")) BiocManager::install("reshape2"): library('reshape2')
df_humann <- read.table('./Figures/Figure_7/go_annotation_notnorm.tsv',
row.names=1, header=T, sep='\t',
comment.char='', quote='')
# Remove the suffix from the sample labels
names(df_humann) <- gsub('_Abundance.RPKs', '', names(df_humann))
hives_metadata <- read.csv("./Figures/Figure_3/Data_fig_3/metadata_hives.csv")
hives_metadata_new <- hives_metadata %>% column_to_rownames(var="X")
df_humann2 <- round(df_humann, digits = 0)
Hives_dds_functional <- DESeqDataSetFromMatrix(countData = df_humann2, colData = hives_metadata_new, design = ~Method + Season, tidy = F)
Hives_dds_RLE_functional <- estimateSizeFactors(Hives_dds_functional,type = "ratio")
Hives_normalised_counts_functional <- counts(Hives_dds_RLE_functional, normalized = TRUE)
Hives_counts_vst_functional <- varianceStabilizingTransformation(Hives_dds_RLE_functional, blind = FALSE)
ordered_counts_functional <- order(rowMeans(counts(Hives_dds_RLE_functional,normalized=TRUE)), decreasing=TRUE)
final_heatmap_functional <- pheatmap(assay(Hives_counts_vst_functional)[ordered_counts_functional,],cluster_rows = FALSE, show_rownames = FALSE, clustering_distance_cols = "correlation", cluster_cols = TRUE)
library(DESeq2)
Hives_dds_functional <- DESeqDataSetFromMatrix(countData = df_humann2, colData = hives_metadata_new, design = ~Method + Season, tidy = F)
Hives_dds_RLE_functional <- estimateSizeFactors(Hives_dds_functional,type = "ratio")
Hives_normalised_counts_functional <- counts(Hives_dds_RLE_functional, normalized = TRUE)
Hives_counts_vst_functional <- varianceStabilizingTransformation(Hives_dds_RLE_functional, blind = FALSE)
ordered_counts_functional <- order(rowMeans(counts(Hives_dds_RLE_functional,normalized=TRUE)), decreasing=TRUE)
final_heatmap_functional <- pheatmap(assay(Hives_counts_vst_functional)[ordered_counts_functional,],cluster_rows = FALSE, show_rownames = FALSE, clustering_distance_cols = "correlation", cluster_cols = TRUE)
get_volcano_plot <- function(dds_rle_object, contrast, annotation) {
object <- DESeq(dds_rle_object)
res_dds <- results(object, contrast)
res <- lfcShrink(object,contrast = contrast, res=res_dds,type = 'normal')
EnhancedVolcano(res, lab = NA, x = 'log2FoldChange',y= 'pvalue', FCcutoff = 1,
colAlpha = 2,labSize = 2, xlim = c(-2,2))
}
get_volcano_plot(Hives_dds_RLE_functional, contrast = c('Method','SM','Direct_SM'))
get_volcano_plot <- function(dds_rle_object, contrast, annotation) {
object <- DESeq(dds_rle_object,test = "LRT", reduced = ~Season, full = ~Method+Season)
res_dds <- results(object, contrast)
res <- lfcShrink(object,contrast = contrast, res=res_dds,type = 'normal')
EnhancedVolcano(res, lab = NA, x = 'log2FoldChange',y= 'pvalue', FCcutoff = 1,
colAlpha = 2,labSize = 2, xlim = c(-2,2))
}
get_volcano_plot(Hives_dds_RLE_functional, contrast = c('Method','SM','Direct_SM'))
get_volcano_plot(Hives_dds_RLE_functional, contrast = c('Season','May','November'))
# By season
get_volcano_plot(Hives_dds_RLE_functional, contrast = c('Season','May','July'))
get_volcano_plot <- function(dds_rle_object, contrast, annotation) {
object <- DESeq(dds_rle_object,test = "LRT", reduced = ~Method, full = ~Method+Season)
res_dds <- results(object, contrast)
res <- lfcShrink(object,contrast = contrast, res=res_dds,type = 'normal')
EnhancedVolcano(res, lab = NA, x = 'log2FoldChange',y= 'pvalue', FCcutoff = 1,
colAlpha = 2,labSize = 2, xlim = c(-2,2))
}
get_volcano_plot(Hives_dds_RLE_functional, contrast = c('Method','SM','Direct_SM'))
# By season
get_volcano_plot(Hives_dds_RLE_functional, contrast = c('Season','May','July'))
get_volcano_plot <- function(dds_rle_object, contrast, annotation, reducedmodel, fullmodel) {
object <- DESeq(dds_rle_object,test = "LRT", reduced = reducedmodel, full = ~fullmodel)
res_dds <- results(object, contrast)
res <- lfcShrink(object,contrast = contrast, res=res_dds,type = 'normal')
EnhancedVolcano(res, lab = NA, x = 'log2FoldChange',y= 'pvalue', FCcutoff = 1,
colAlpha = 2,labSize = 2, xlim = c(-2,2))
}
get_volcano_plot(Hives_dds_RLE_functional, contrast = c('Method','SM','Direct_SM'). reducedmodel = "Method", fullmodel = "Method+Season")
get_volcano_plot(Hives_dds_RLE_functional, contrast = c('Method','SM','Direct_SM'), reducedmodel = "Method", fullmodel = "Method+Season")
get_volcano_plot <- function(dds_rle_object, contrast, annotation, reducedmodel, fullmodel) {
object <- DESeq(dds_rle_object,test = "LRT", reduced = ~reducedmodel, full = ~fullmodel)
res_dds <- results(object, contrast)
res <- lfcShrink(object,contrast = contrast, res=res_dds,type = 'normal')
EnhancedVolcano(res, lab = NA, x = 'log2FoldChange',y= 'pvalue', FCcutoff = 1,
colAlpha = 2,labSize = 2, xlim = c(-2,2))
}
get_volcano_plot(Hives_dds_RLE_functional, contrast = c('Method','SM','Direct_SM'), reducedmodel = "Method", fullmodel = "Method+Season")
get_volcano_plot(Hives_dds_RLE_functional, contrast = c('Method','SM','Direct_SM'), reducedmodel = c("Method"), fullmodel = c("Method+Season"))
get_volcano_plot(Hives_dds_RLE_functional, contrast = c('Method','SM','Direct_SM'), reducedmodel = paste("Method"), fullmodel = paste("Method+Season"))
get_volcano_plot <- function(dds_rle_object, contrast, annotation, reducedmodel, fullmodel) {
object <- DESeq(dds_rle_object,test = "LRT", reduced = ~ reducedmodel, full = ~ fullmodel)
res_dds <- results(object, contrast)
res <- lfcShrink(object,contrast = contrast, res=res_dds,type = 'normal')
EnhancedVolcano(res, lab = NA, x = 'log2FoldChange',y= 'pvalue', FCcutoff = 1,
colAlpha = 2,labSize = 2, xlim = c(-2,2))
}
get_volcano_plot(Hives_dds_RLE_functional, contrast = c('Method','SM','Direct_SM'), reducedmodel = paste("Method"), fullmodel = paste("Method+Season"))
paste("~Method")
get_volcano_plot <- function(dds_rle_object, contrast, annotation, reducedmodel, fullmodel) {
object <- DESeq(dds_rle_object,test = "LRT", reduced = reducedmodel, full =  fullmodel)
res_dds <- results(object, contrast)
res <- lfcShrink(object,contrast = contrast, res=res_dds,type = 'normal')
EnhancedVolcano(res, lab = NA, x = 'log2FoldChange',y= 'pvalue', FCcutoff = 1,
colAlpha = 2,labSize = 2, xlim = c(-2,2))
}
get_volcano_plot(Hives_dds_RLE_functional, contrast = c('Method','SM','Direct_SM'), reducedmodel = noquote("~Method"), fullmodel = noquote("~Method+Season"))
get_volcano_plot(Hives_dds_RLE_functional, contrast = c('Method','SM','Direct_SM'), reducedmodel = noquote("~Method"), fullmodel = noquote("~Method + Season"))
object <- DESeq(Hives_dds_RLE_functional,test = "LRT", reduced = ~Method, full =  ~Method + Season)
res_dds <- results(object, contrast)
res_dds <- results(object, contrast = c('Method','SM','Direct_SM'))
res <- lfcShrink(object,contrast = contrast, res=res_dds,type = 'normal')
res <- lfcShrink(object,contrast = contrast = c('Method','SM','Direct_SM'), res=res_dds,type = 'normal')
res <- lfcShrink(object,contrast = c('Method','SM','Direct_SM'), res=res_dds,type = 'normal')
EnhancedVolcano(res, lab = NA, x = 'log2FoldChange',y= 'pvalue', FCcutoff = 1,
colAlpha = 2,labSize = 2, xlim = c(-2,2))
get_volcano_plot <- function(dds_rle_object, contrast, annotation, reducedmodel, fullmodel) {
object <- DESeq(dds_rle_object,test = "LRT", reduced = reducedmodel, full =  fullmodel)
res_dds <- results(object, contrast)
res <- lfcShrink(object,contrast = contrast, res=res_dds,type = 'normal')
EnhancedVolcano(res, lab = NA, x = 'log2FoldChange',y= 'pvalue', FCcutoff = 1,
colAlpha = 2,labSize = 2, xlim = c(-2,2))
}
get_volcano_plot(Hives_dds_RLE_functional, contrast = c('Method','SM','Direct_SM'), reducedmodel = noquote("~Method"), fullmodel = noquote("~Method + Season"))
get_volcano_plot <- function(dds_rle_object, .contrast, annotation, reducedmodel, fullmodel) {
object <- DESeq(dds_rle_object,test = "LRT", reduced = reducedmodel, full =  fullmodel)
res_dds <- results(object, .contrast)
res <- lfcShrink(object,contrast = .contrast, res=res_dds,type = 'normal')
EnhancedVolcano(res, lab = NA, x = 'log2FoldChange',y= 'pvalue', FCcutoff = 1,
colAlpha = 2,labSize = 2, xlim = c(-2,2))
}
get_volcano_plot(Hives_dds_RLE_functional, .contrast = c('Method','SM','Direct_SM'), reducedmodel = noquote("~Method"), fullmodel = noquote("~Method + Season"))
noquote("~Method + Season")
get_volcano_plot(Hives_dds_RLE_functional, .contrast = c('Method','SM','Direct_SM'), reducedmodel = noquote("~Method"), fullmodel = noquote("~Method+Season"))
get_volcano_plot <- function(dds_rle_object, .contrast, reducedmodel, fullmodel) {
object <- DESeq(dds_rle_object,test = "LRT", reduced = reducedmodel, full =  fullmodel)
res_dds <- results(object, .contrast)
res <- lfcShrink(object,contrast = .contrast, res=res_dds,type = 'normal')
EnhancedVolcano(res, lab = NA, x = 'log2FoldChange',y= 'pvalue', FCcutoff = 1,
colAlpha = 2,labSize = 2, xlim = c(-2,2))
}
get_volcano_plot(Hives_dds_RLE_functional, .contrast = c('Method','SM','Direct_SM'), reducedmodel = noquote("~Method"), fullmodel = noquote("~Method+Season"))
get_volcano_plot(Hives_dds_RLE_functional, .contrast = c('Method','SM','Direct_SM'), reducedmodel = noquote("~Method"), fullmodel = noquote("~Method + Season"))
get_volcano_plot <- function(dds_rle_object, .contrast) {
object <- DESeq(dds_rle_object,test = "LRT", reduced = ~Method, full = ~Method+Season)
res_dds <- results(object, .contrast)
res <- lfcShrink(object,contrast = .contrast, res=res_dds,type = 'normal')
EnhancedVolcano(res, lab = NA, x = 'log2FoldChange',y= 'pvalue', FCcutoff = 1,
colAlpha = 2,labSize = 2, xlim = c(-2,2))
}
get_volcano_plot(Hives_dds_RLE_functional, .contrast = c('Method','SM','Direct_SM'))
get_volcano_plot(Hives_dds_RLE_functional, .contrast = c('Season','May','November'))
get_volcano_plot(Hives_dds_RLE_functional, .contrast = c('Season','May','July'))
get_volcano_plot <- function(dds_rle_object, .contrast) {
object <- DESeq(dds_rle_object,test = "LRT", reduced = ~Method, full = ~Method+Season)
res_dds <- results(object, .contrast)
res <- lfcShrink(object, res=res_dds,type = 'normal')
EnhancedVolcano(res, lab = NA, x = 'log2FoldChange',y= 'pvalue', FCcutoff = 1,
colAlpha = 2,labSize = 2, xlim = c(-2,2))
}
get_volcano_plot <- function(dds_rle_object, .contrast) {
object <- DESeq(dds_rle_object,test = "LRT", reduced = ~Method, full = ~Method+Season)
res_dds <- results(object)
res <- lfcShrink(object, res=res_dds,type = 'normal')
EnhancedVolcano(res, lab = NA, x = 'log2FoldChange',y= 'pvalue', FCcutoff = 1,
colAlpha = 2,labSize = 2, xlim = c(-2,2))
}
get_volcano_plot(Hives_dds_RLE_functional, .contrast = c('Season','May','July'))
get_volcano_plot <- function(dds_rle_object, .contrast) {
object <- DESeq(dds_rle_object,test = "LRT", reduced = ~Method, full = ~Method+Season)
res_dds <- results(object)
res <- lfcShrink(object, res=res_dds,type = 'apeglm')
EnhancedVolcano(res, lab = NA, x = 'log2FoldChange',y= 'pvalue', FCcutoff = 1,
colAlpha = 2,labSize = 2, xlim = c(-2,2))
}
get_volcano_plot(Hives_dds_RLE_functional, .contrast = c('Season','May','July'))
get_volcano_plot(Hives_dds_RLE_functional, .contrast = c('Season','May','July'))
get_volcano_plot <- function(dds_rle_object, .contrast) {
object <- DESeq(dds_rle_object,test = "LRT", reduced = ~Method, full = ~Method+Season)
res_dds <- results(object, .contrast)
res <- lfcShrink(object,contrast = .contrast, res=res_dds,type = 'normal')
EnhancedVolcano(res, lab = NA, x = 'log2FoldChange',y= 'pvalue', FCcutoff = 1,
colAlpha = 2,labSize = 2, xlim = c(-2,2))
}
get_volcano_plot(Hives_dds_RLE_functional, .contrast = c('Season','May','July'))
get_volcano_plot(Hives_dds_RLE_functional, .contrast = c('Method','SM','Direct_SM'))
# By season
get_volcano_plot(Hives_dds_RLE_functional, contrast = c('Season','May','November'))
# By season
get_volcano_plot(Hives_dds_RLE_functional, .contrast = c('Season','May','November'))
go_names <- read.table('./Figures/Figure_7/combined_tables_with_go_names.tsv',
row.names=1, header=T, sep='\t',
comment.char='', quote='')
# Remove the suffix from the sample labels
names(go_names) <- gsub('_Abundance.RPKs', '', names(go_names))
go_names_deseq <- round(go_names, digits = 0)
Hives_dds_go <- DESeqDataSetFromMatrix(countData = go_names_deseq, colData = hives_metadata_new, design = ~Method + Season, tidy = F)
Hives_dds_RLE_go <- estimateSizeFactors(Hives_dds_go,type = "ratio")
Hives_normalised_counts_go <- counts(Hives_dds_RLE_go, normalized = TRUE)
go_names_normalised <- as.data.frame(Hives_normalised_counts_go) %>% rownames_to_column(var="species")
go_names_normalised$go_function <- go_names_normalised$species
go_names_normalised$species <- gsub(".*[__]([^.]+)[.].*", "\\1", go_names_normalised$species)
go_names_normalised$go_function <- gsub("\\|.*", "", go_names_normalised$go_function)
go_names_normalised <- go_names_normalised[!grepl("GO:", go_names_normalised$species),]
go_names_normalised <- go_names_normalised[!grepl("UNMAPPED", go_names_normalised$species),]
go_names_normalised <- go_names_normalised[!grepl("UNGROUPED", go_names_normalised$species),]
View(go_names_normalised)
go_names_normalised <- go_names_normalised[!grepl("UNGROUPED", go_names_normalised$go_function),]
get_most_abundant_go <- function(normalised_counts, top_x_gos) {
go_names_normalised_x <- as.data.frame(Hives_normalised_counts_go) %>% rownames_to_column(var="species")
go_names_normalised_x <- go_names_normalised_x[!grepl("g_", go_names_normalised_x$species),]
go_names_normalised_x$rowsum <- rowSums(go_names_normalised_x[,-1])
go_names_normalised_x <- go_names_normalised_x[-c(1,2),]
go_names_normalised_x <- go_names_normalised_x[order(go_names_normalised_x$rowsum, decreasing = T),]
go_top_x <- go_names_normalised_x$species[top_x_gos]
}
get_most_abundant_go <- function(normalised_counts, top_x_gos) {
go_names_normalised_x <- as.data.frame(normalised_counts) %>% rownames_to_column(var="species")
go_names_normalised_x <- go_names_normalised_x[!grepl("g_", go_names_normalised_x$species),]
go_names_normalised_x$rowsum <- rowSums(go_names_normalised_x[,-1])
go_names_normalised_x <- go_names_normalised_x[-c(1,2),]
go_names_normalised_x <- go_names_normalised_x[order(go_names_normalised_x$rowsum, decreasing = T),]
go_top_x <- go_names_normalised_x$species[top_x_gos]
}
get_most_abundant_go(Hives_normalised_counts_go, top_x_gos = c(1:20))
x_gos <- get_most_abundant_go(Hives_normalised_counts_go, top_x_gos = c(1:20))
x_gos <- get_most_abundant_go(Hives_normalised_counts_go, top_x_gos = c(1:30))
x_gos
top_20_gos <- get_most_abundant_go(Hives_normalised_counts_go, top_x_gos = c(1:20))
go_for_plot <- reshape2::melt(go_names_normalised)
go_for_plot3 <- go_for_plot2[go_for_plot2$go_function %in% top_20_gos,]
ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none") + scale_fill_viridis_d() + theme_minimal() + ylab("GO function (%)")
species_functional_diversity <- function(normalised_counts) {
go_names_normalised <- as.data.frame(normalised_counts) %>% rownames_to_column(var="species")
go_names_normalised$go_function <- go_names_normalised$species
go_names_normalised$species <- gsub(".*[__]([^.]+)[.].*", "\\1", go_names_normalised$species)
go_names_normalised$go_function <- gsub("\\|.*", "", go_names_normalised$go_function)
go_names_normalised <- go_names_normalised[!grepl("GO:", go_names_normalised$species),]
go_names_normalised <- go_names_normalised[!grepl("UNMAPPED", go_names_normalised$species),]
go_names_normalised <- go_names_normalised[!grepl("UNGROUPED", go_names_normalised$species),]
go_names_normalised <- go_names_normalised[!grepl("UNGROUPED", go_names_normalised$go_function),]
}
species_functional_diversity <- function(normalised_counts) {
go_names_normalised <- as.data.frame(normalised_counts) %>% rownames_to_column(var="species")
go_names_normalised$go_function <- go_names_normalised$species
go_names_normalised$species <- gsub(".*[__]([^.]+)[.].*", "\\1", go_names_normalised$species)
go_names_normalised$go_function <- gsub("\\|.*", "", go_names_normalised$go_function)
go_names_normalised <- go_names_normalised[!grepl("GO:", go_names_normalised$species),]
go_names_normalised <- go_names_normalised[!grepl("UNMAPPED", go_names_normalised$species),]
go_names_normalised <- go_names_normalised[!grepl("UNGROUPED", go_names_normalised$species),]
go_names_normalised <- go_names_normalised[!grepl("UNGROUPED", go_names_normalised$go_function),]
}
functional_diversity_samples <- species_functional_diversity(Hives_normalised_counts_go)
go_for_plot <- reshape2::melt(functional_diversity_samples)
go_for_plot3 <- go_for_plot2[go_for_plot2$go_function %in% top_20_gos,]
ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none") + scale_fill_viridis_d() + theme_minimal() + ylab("GO function (%)")
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none") + scale_fill_viridis_d() + theme_minimal() + ylab("GO function (%)") + labs(fill = "GO function")
functional_diversity_per_species
ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none", axis.text.x = element_text(angle = 45)) + scale_fill_viridis_d() + theme_minimal() + ylab("GO function (%)") + labs(fill = "GO function")
ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none", axis.text.x = element_text(angle = 45)) + scale_fill_viridis_d() + theme_minimal() + ylab("GO function (%)") + labs(fill = "GO function")
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none", axis.text.x = element_text(angle = 45, hjust = 1)) + scale_fill_viridis_d() + theme_minimal() + ylab("GO function (%)") + labs(fill = "GO function")
functional_diversity_per_species
ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none", axis.text.x = element_text(angle = 45, hjust = 1, size = 10)) + scale_fill_viridis_d() + theme_minimal() + ylab("GO function (%)") + labs(fill = "GO function")
ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none", axis.text.y = element_text(angle = 45, hjust = 1, size = 10)) + scale_fill_viridis_d() + theme_minimal() + ylab("GO function (%)") + labs(fill = "GO function")
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none", axis.text.x = element_text(angle = 45, hjust = 1, size = 10)) + scale_fill_viridis_d() + theme_minimal() + ylab("GO function (%)") + labs(fill = "GO function")
functional_diversity_per_species
ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) +
geom_bar(stat = "identity", position = "fill") + theme(legend.position="none", axis.text.x = element_text(angle = 90, hjust = 1, size = 10)) + scale_fill_viridis_d() + theme_minimal() + ylab("GO function (%)") + labs(fill = "GO function")
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) + geom_bar(stat = "identity", position = "fill") + theme_minimal() + theme(legend.position="none", axis.text.x = element_text(angle = 90, hjust = 1, size = 10)) + scale_fill_viridis_d() + ylab("GO function (%)") + labs(fill = "GO function")
functional_diversity_per_species
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) + geom_bar(stat = "identity", position = "fill") + theme_minimal() + theme(legend.position="none", axis.text.x = element_text(angle = 45, hjust = 1, size = 10)) + scale_fill_viridis_d() + ylab("GO function (%)") + labs(fill = "GO function")
functional_diversity_per_species
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) + geom_bar(stat = "identity", position = "fill") + theme_minimal() + theme(legend.position="none", axis.text.x = element_text(face = "italic", angle = 45, hjust = 1, size = 10)) + scale_fill_viridis_d() + ylab("GO function (%)") + labs(fill = "GO function")
functional_diversity_per_species
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) + geom_bar(stat = "identity", position = "fill") + theme_minimal() + theme(legend.position="none", axis.text.x = element_text(face = "italic", angle = 45, hjust = 1, size = 10)) + scale_fill_viridis_d() + ylab("GO function (%)") + labs(fill = "GO function") + scale_y_continuous(breaks = c(0,25,50,75))
functional_diversity_per_species
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) + geom_bar(stat = "identity", position = "fill") + theme_minimal() + theme(legend.position="none", axis.text.x = element_text(face = "italic", angle = 45, hjust = 1, size = 10)) + scale_fill_viridis_d() + ylab("GO function (%)") + labs(fill = "GO function") + scale_y_continuous(limits= c(0,100),breaks = c(0,25,50,75))
functional_diversity_per_species
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) + geom_bar(stat = "identity", position = "fill") + theme_minimal() + theme(legend.position="none", axis.text.x = element_text(face = "italic", angle = 45, hjust = 1, size = 10)) + scale_fill_viridis_d() + ylab("GO function (%)") + labs(fill = "GO function") + scale_y_continuous(limits= c(0,1),breaks = c(0,25,50,75))
functional_diversity_per_species
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) + geom_bar(stat = "identity", position = "fill") + theme_minimal() + theme(legend.position="none", axis.text.x = element_text(face = "italic", angle = 45, hjust = 1, size = 10)) + scale_fill_viridis_d() + ylab("GO function (%)") + labs(fill = "GO function") + scale_y_continuous(labels = "percent")
functional_diversity_per_species
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) + geom_bar(stat = "identity", position = "fill") + theme_minimal() + theme(legend.position="none", axis.text.x = element_text(face = "italic", angle = 45, hjust = 1, size = 10)) + scale_fill_viridis_d() + ylab("GO function (%)") + labs(fill = "GO function") + scale_y_continuous(labels = percent)
functional_diversity_per_species
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) + geom_bar(stat = "identity", position = "fill") + theme_minimal() + theme(legend.position="none", axis.text.x = element_text(face = "italic", angle = 45, hjust = 1, size = 10)) + scale_fill_viridis_d() + ylab("GO function (%)") + labs(fill = "GO function")
functional_diversity_per_species
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) + geom_bar(stat = "identity", position = "fill") + theme_minimal() + theme(legend.position="none", axis.text.x = element_text(face = "italic", angle = 45, hjust = 1, size = 10)) + scale_fill_viridis_d() + ylab("GO function (%)") + labs(fill = "GO function") + scale_y_continuous(labels = c(0,25,50,75,100))
functional_diversity_per_species
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) + geom_bar(stat = "identity", position = "fill") + theme_minimal() + theme(legend.position="none", axis.text.x = element_text(face = "italic", angle = 45, hjust = 1, size = 10), axis.title.x = element_blank()) + scale_fill_viridis_d() + ylab("GO function (%)") + labs(fill = "GO function") + scale_y_continuous(labels = c(0,25,50,75,100))
functional_diversity_per_species
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) + geom_bar(stat = "identity", position = "fill") + theme_minimal() + theme(legend.position="none", axis.text.x = element_text(face = "italic", angle = 45, hjust = 1, size = 10), axis.title.x = element_blank()) + scale_fill_viridis_d(discrete = TRUE) + ylab("GO function (%)") + labs(fill = "GO function") + scale_y_continuous(labels = c(0,25,50,75,100))
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) + geom_bar(stat = "identity", position = "fill") + theme_minimal() + theme(legend.position="none", axis.text.x = element_text(face = "italic", angle = 45, hjust = 1, size = 10), axis.title.x = element_blank()) + scale_fill_viridis(discrete = TRUE) + ylab("GO function (%)") + labs(fill = "GO function") + scale_y_continuous(labels = c(0,25,50,75,100))
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) + geom_bar(stat = "identity", position = "fill") + theme_minimal() + theme(legend.position="none", axis.text.x = element_text(face = "italic", angle = 45, hjust = 1, size = 10), axis.title.x = element_blank()) + scale_fill_viridis(option = "inferno") + ylab("GO function (%)") + labs(fill = "GO function") + scale_y_continuous(labels = c(0,25,50,75,100))
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) + geom_bar(stat = "identity", position = "fill") + theme_minimal() + theme(legend.position="none", axis.text.x = element_text(face = "italic", angle = 45, hjust = 1, size = 10), axis.title.x = element_blank()) + scale_fill_viridis_d(option = "inferno") + ylab("GO function (%)") + labs(fill = "GO function") + scale_y_continuous(labels = c(0,25,50,75,100))
functional_diversity_per_species
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) + geom_bar(stat = "identity", position = "fill") + theme_minimal() + theme(legend.position="none", axis.text.x = element_text(face = "italic", angle = 45, hjust = 1, size = 10), axis.title.x = element_blank()) + scale_fill_viridis_d(option = "plasma") + ylab("GO function (%)") + labs(fill = "GO function") + scale_y_continuous(labels = c(0,25,50,75,100))
functional_diversity_per_species
functional_diversity_per_species <- ggplot(go_for_plot3, aes(x=species, y=value, fill = go_function)) + geom_bar(stat = "identity", position = "fill") + theme_minimal() + theme(legend.position="none", axis.text.x = element_text(face = "italic", angle = 45, hjust = 1, size = 10), axis.title.x = element_blank()) + scale_fill_viridis_d(option = "magma") + ylab("GO function (%)") + labs(fill = "GO function") + scale_y_continuous(labels = c(0,25,50,75,100))
functional_diversity_per_species
go_names_previous <- read.table('./Figures/Figure_7/combined_tables_with_go_names_previous.tsv',
row.names=1, header=T, sep='\t',
comment.char='', quote='')
# Remove the suffix from the sample labels
names(go_names_previous) <- gsub('_Abundance.RPKs', '', names(go_names_previous))
Hives_dds_go_previous <- DESeqDataSetFromMatrix(countData = go_names_previous, colData = hives_metadata_new, design = ~Method + Season, tidy = F)
Hives_dds_RLE_go_previous <- estimateSizeFactors(Hives_dds_go_previous,type = "ratio")
Hives_normalised_counts_go_previous <- counts(Hives_dds_RLE_go_previous, normalized = TRUE)
go_names_deseq_previous <- round(Hives_normalised_counts_go_previous, digits = 0)
previous_functional_diversity <- species_functional_diversity(go_names_deseq_previous)
go_names_previous <- read.table('./Figures/Figure_7/combined_tables_with_go_names_previous.tsv',
row.names=1, header=T, sep='\t',
comment.char='', quote='')
# Remove the suffix from the sample labels
names(go_names_previous) <- gsub('_Abundance.RPKs', '', names(go_names_previous))
View(go_names_previous)
View(go_names_normalised3)
View(hives_metadata_new)
previous_metadata <- read.csv("./Figures/Figures_7/metadata_previous.csv")
getwd()
previous_metadata <- read.csv("./Figures/Figures_7/metadata_previous.csv")
previous_metadata <- read.csv("./Figures/Figures_7/metadata_previous.csv")
previous_metadata <- read.csv("./Figures/Figure_7/metadata_previous.csv")
View(previous_metadata)
previous_metadata <- previous_metadata %>% column_to_rownames(var="X")
previous_metadata
Hives_dds_go_previous <- DESeqDataSetFromMatrix(countData = go_names_previous, colData = previous_metadata, design = ~Source, tidy = F)
go_names_deseq_previous <- round(go_names_previous, digits = 0)
Hives_dds_go_previous <- DESeqDataSetFromMatrix(countData = go_names_deseq_previous, colData = previous_metadata, design = ~Source, tidy = F)
View(Hives_dds_go_previous)
Hives_dds_RLE_go_previous <- estimateSizeFactors(Hives_dds_go_previous,type = "ratio")
Hives_normalised_counts_go_previous <- counts(Hives_dds_RLE_go_previous, normalized = TRUE)
previous_functional_diversity <- species_functional_diversity(go_names_deseq_previous)
View(previous_functional_diversity)
top_30_previous <- get_most_abundant_go(Hives_normalised_counts_go_previous, top_x_gos = c(1:20))
top_30_previous
go_for_plot_previous <- reshape2::melt(previous_functional_diversity)
go_for_plot_previous2 <- go_for_plot_previous[go_for_plot_previous$go_function %in% top_30_previous,]
functional_diversity_per_species_previous <- ggplot(go_for_plot_previous2, aes(x=species, y=value, fill = go_function)) + geom_bar(stat = "identity", position = "fill") + theme_minimal() + theme(legend.position="none", axis.text.x = element_text(face = "italic", angle = 45, hjust = 1, size = 10), axis.title.x = element_blank()) + scale_fill_viridis_d(option = "magma") + ylab("GO function (%)") + labs(fill = "GO function") + scale_y_continuous(labels = c(0,25,50,75,100))
functional_diversity_per_species_previous
library(Venndiagram)
library(VennDiagram)
