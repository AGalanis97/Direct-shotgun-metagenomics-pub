df2 <- df %>%
# 1. Remove any grouping
ungroup() %>%
# 2. Arrange by
#   i.  facet group (period)
#   ii. value (val)
arrange(functions, pvalue) %>%
# 3. Add order column of row numbers
mutate(order = row_number())
plot_df <- ggplot(df2, aes(order, pvalue)) +
geom_col(aes(fill = functions), position = "dodge", width = 0.5) +
scale_x_continuous(
breaks = df2$order,
labels = df2$GO_description) +
# scale_y_continuous(expand = c(0, 0)) +
facet_grid(functions ~ ., scales = "free", space = "free") +
coord_flip() +
theme_minimal() +
scale_fill_brewer(palette = "Set2", name = "functions") +
theme(panel.grid.major.y = element_blank()) +
labs(x="", y="p-value", title = df2$Species[1]) +
theme(text = element_text(size=12),legend.position = "none",
axis.ticks.y = element_blank()) + scale_y_log10("pvalue",
breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
ggsave(filename = plotfilename, plot = plot_df, width = 10, height = 15)
}
go_plot(sodgloss, plotfilename = "sodalis_gloss.pdf")
go_plot(klebsiella, plotfilename = "klesbiella.pdf")
go_plot(sodpra, plotfilename = "sodalis_prae.pdf")
go_plot(enterobacter, plotfilename = "enterobacter.pdf")
go_plot(leuconostoc, plotfilename = "leuconostoc.pdf")
#plot all top functions
automn_final<-rbind(enterobacter,klebsiella,leuconostoc,sodgloss,sodpra)
automn_final<-automn_final[- grep("Others", automn_final$Topfunctions),]
#automn_final$Frequency<-log10(automn_final$Frequency)
automn_final<- automn_final %>%
ungroup() %>%
arrange(Species,Topfunctions, pvalue) %>%
mutate(order = row_number())
ggplot(automn_final, aes(x = pvalue, y = GO_description)) +
geom_point(aes( size = Frequency, color=Species), alpha = 0.5) +
scale_fill_brewer(palette="Oranges")+
theme_minimal()+
facet_grid(vars(Species), scales="free", space="free_x") +
xlab("-log10(p.value)") +
ylab("GO description")
functional<-read.csv("functional_results_significant_bacteria.csv", header = TRUE)
Func_Sum<-functional %>%
group_by(Species) %>%
summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
Functional_Reduced<- functional[grepl("Enterobacter sp. SA187", functional$Species) | grepl("Klebsiella oxytoca", functional$Species) | grepl("Leuconostoc pseudomesenteroides", functional$Species)| grepl("Sodalis glossinidius", functional$Species)| grepl("Sodalis praecaptivus", functional$Species) , ]
Functional_Reduced<-Functional_Reduced[,-c(1:2,4:6,8:11,14)]
Func<- reshape2::melt(Functional_Reduced, id=c("GO_description","Species"))
colnames(Func)[3] <- "Method"
colnames(Func)[4] <- "Frequency"
Func_10 <- Func%>%
mutate_if(sapply(Func, is.character), as.factor)%>%
filter(!GO_description=="NO_NAME")%>%
group_by(GO_description) %>%
filter(n() == 10) #only GO terms present in the 5 species and both methods
summary(Func_10)
b<-Func_10 %>%
nest(data = c(Species, Method,Frequency)) %>%
mutate(model = map(data, ~anova(lm(Frequency ~ Species, .))),
tidy = map(model, broom::tidy)) %>%
select(GO_description, tidy) %>%
unnest(tidy)
b$significance<-ifelse(b$p.value<0.005,"significant","not sign.")
#################################
#In order to perform statistical test across ALL GO, I need to attribute a zero value to the missing species
fill<-reshape2::dcast(Func, GO_description + Method ~ Species,value.var = "Frequency", fun.aggregate = mean)
fill[is.na(fill)] <- 0 #The missing value for certain GO corresponds to true zeros (no hits during alignments)
Func_all<- reshape2::melt(fill, id=c("GO_description","Method"))
colnames(Func_all)[3] <- "Species"
colnames(Func_all)[4] <- "Frequency"
Func_all_m <- Func_all %>%
mutate_if(sapply(Func_all, is.character), as.factor)%>%
filter(!GO_description=="NO_NAME")%>%
group_by(GO_description) %>%
filter(n() == 10)
summary(Func_all_m)
#cube root transformation
Func_all_m$Frequency<-sign(Func_all_m$Frequency) * abs(Func_all_m$Frequency)^(1/3)
plotNormalHistogram(Func_all_m$Frequency)
#####CHOOSE#######
###### ANOVA
c<-Func_all_m %>%
nest(data = c(Species, Method,Frequency)) %>%
mutate(model = map(data, ~anova(lm(Frequency ~ Species, .))),
tidy = map(model, broom::tidy)) %>%
select(GO_description, tidy) %>%
unnest(tidy)
###### NON PARAMETRIC
#c<-Func_all_m %>%
#nest(data = c(Species, Method,Frequency)) %>%
#mutate(model = map(data, ~kruskal.test(Frequency ~ Species, .)),
#tidy = map(model, broom::tidy)) %>%
#select(GO_description, tidy) %>%
#unnest(tidy)
#####CHOOSE#######
c$significance<-ifelse(c$p.value<0.005,"significant","not sign.")
###### DATA CHECKS ######
anova <- aov(Frequency ~ Species , data = Func_all_m)
# Test for Homogeneity of variances (OK IF around red line)
plot(anova, 1)
# Second Test for Homogeneity of variances (OK if p value significatif)
leveneTest(Frequency ~ Species, data = Func_all_m)
# Test for Normality distribution (OK If most point follow the line)
plot(anova, 2)
# Second test for normality Extract the residuals
anova_residuals <- residuals(object = anova )
# Run Shapiro-Wilk test (OK if p value significatif)
#shapiro.test(x = anova_residuals ) #This test can't be applied to so many data
#### FINAL STAT, CLEAN and EXPORT TABLE ####
significant<-c%>%
filter(!term=="Residuals")
stat<-Func_all_m %>%
group_by(GO_description, Species) %>%
summarise(
n=n(),
mean = mean(Frequency, na.rm = TRUE),
sd = sd(Frequency, na.rm = TRUE)
)
stat1<-reshape2::dcast(stat, GO_description ~ Species,value.var = "mean")
colnames(stat1)[2] <- "Enterobacter sp. SA187 - Mean SM/DSM"
colnames(stat1)[3] <- "Klebsiella oxytoca - Mean SM/DSM"
colnames(stat1)[4] <- "Leuconostoc pseudomesenteroides - Mean SM/DSM"
colnames(stat1)[5] <- "Sodalis glossinidius - Mean SM/DSM"
colnames(stat1)[6] <- "Sodalis praecaptivus - Mean SM/DSM"
stat2<-reshape2::dcast(stat, GO_description ~ Species,value.var = "sd")
colnames(stat2)[2] <- "Enterobacter sp. SA187 - SD SM/DSM"
colnames(stat2)[3] <- "Klebsiella oxytoca - SD SM/DSM"
colnames(stat2)[4] <- "Leuconostoc pseudomesenteroides - SD SM/DSM"
colnames(stat2)[5] <- "Sodalis glossinidius - SD SM/DSM"
colnames(stat2)[6] <- "Sodalis praecaptivus - SD SM/DSM"
GO_sign<- merge(stat1,stat2,by="GO_description")
GO_sign<-merge(GO_sign,significant,by="GO_description")
write.table(GO_sign, "GO_significant.txt", sep="\t")
# Export the columns
GO_sign_columns <- GO_sign[,2:6]
# Rename the columns
colnames(GO_sign_columns) <- c("Enterobacter sp. SA187","Klebsiella oxytoca","Leuconostoc pseudomesenteroides","Sodalis glossinidius","Sodalis praecaptivus")
# Extract the maximum number (or Frequency) per GO (this is a choice as we assumed that the highest mean is bringing the significance)
maximum_column_names <- colnames(GO_sign_columns)[max.col(GO_sign_columns,ties.method = "first")] %>% as.data.frame()
# Combine it with the pvalue data
maximums_pvalues_and_names <- cbind(maximum_column_names, GO_sign$GO_description,GO_sign$p.value)
colnames(maximums_pvalues_and_names) <- c("Species","GO_description","pvalue")
maximums_pvalues_and_names <- maximums_pvalues_and_names %>% group_by(Species)
# Create a list with the GOs per species. Each dataframe contains the data for each species.
maximum_split <- maximums_pvalues_and_names %>% group_split()
top20_per_species <- lapply(maximum_split, function(df) {
df <- df[order(df$pvalue),]
df <- df[1:20,]
})
# Manually annotate the functions (copy paste to the GO database)
enterobacter <- top20_per_species[[1]]
enterobacter$functions <- c("MF","MF","MF","MF","MF","MF","MF","MF","CC","MF","CC","MF","BP","BP","MF","BP","MF","MF","MF","BP")
enterobacter$Topfunctions<-c( "Carbohydrate process", "Others","Others","Others","Others","Carbohydrate process","Others","Others","Others","Carbohydrate process","Others","Carbohydrate process","Others","Others","Others","Others","Others","Others","Others","Carbohydrate process" )
enterobacter$pvalue<--log10(enterobacter$pvalue)
enterobacter<-merge(enterobacter,GO_sign,by=c("GO_description"))
enterobacter<-enterobacter[,-c(7:10,12:22)]
colnames(enterobacter)[6] <- "Frequency"
colnames(enterobacter)[7] <- "SD"
klebsiella <- top20_per_species[[2]]
klebsiella$functions <- c("MF","MF","MF","BP","MF","MF","MF","MF","MF","MF","BP","BP","BP","MF","MF","MF","MF","MF","CC","MF")
klebsiella$Topfunctions<-c("Others","C-C lyase activity","tRNA modif","tRNA modif","Phosphorilation","C-C lyase activity","C-C lyase activity","C-C lyase activity","Phosphorilation","Others","Phosphorilation","Others","Others","Others","Others","Others","tRNA modif","Others","Others","Others")
klebsiella$pvalue<--log10(klebsiella$pvalue)
klebsiella<-merge(klebsiella,GO_sign,by=c("GO_description"))
klebsiella<-klebsiella[,-c(6,8:11,13:22)]
colnames(klebsiella)[6] <- "Frequency"
colnames(klebsiella)[7] <- "SD"
leuconostoc <- top20_per_species[[3]]
leuconostoc$functions <- c("MF","BP","BP","MF","CC","MF","CC","BP","BP","MF","MF","MF","MF","MF","BP","MF","MF","MF","BP","BP")
leuconostoc$Topfunctions<-c("tRNA modif","tRNA modif","DNA repair","Glycolysis","Others","Glycolysis","Others","Others","Others","Others","Others","tRNA modif","Others","Others","tRNA modif","DNA repair","Others","DNA repair","DNA repair","DNA repair")
leuconostoc$pvalue<--log10(leuconostoc$pvalue)
leuconostoc<-merge(leuconostoc,GO_sign,by=c("GO_description"))
leuconostoc<-leuconostoc[,-c(6:7,9:12,14:22)]
colnames(leuconostoc)[6] <- "Frequency"
colnames(leuconostoc)[7] <- "SD"
sodgloss <- top20_per_species[[4]]
sodgloss <- sodgloss %>% na.omit()
sodgloss$functions <- c("MF","BP","MF","BP","BP","MF","BP","BP","MF","MF","BP","MF")
functional<-read.csv("functional_results_significant_bacteria.csv", header = TRUE)
Func_Sum<-functional %>%
group_by(Species) %>%
summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
Functional_Reduced<- functional[grepl("Enterobacter sp. SA187", functional$Species) | grepl("Klebsiella oxytoca", functional$Species) | grepl("Leuconostoc pseudomesenteroides", functional$Species)| grepl("Sodalis glossinidius", functional$Species)| grepl("Sodalis praecaptivus", functional$Species) , ]
Functional_Reduced<-Functional_Reduced[,-c(1:2,4:6,8:11,14)]
Func<- reshape2::melt(Functional_Reduced, id=c("GO_description","Species"))
colnames(Func)[3] <- "Method"
colnames(Func)[4] <- "Frequency"
Func_10 <- Func%>%
mutate_if(sapply(Func, is.character), as.factor)%>%
filter(!GO_description=="NO_NAME")%>%
group_by(GO_description) %>%
filter(n() == 10) #only GO terms present in the 5 species and both methods
summary(Func_10)
b<-Func_10 %>%
nest(data = c(Species, Method,Frequency)) %>%
mutate(model = map(data, ~anova(lm(Frequency ~ Species, .))),
tidy = map(model, broom::tidy)) %>%
select(GO_description, tidy) %>%
unnest(tidy)
b$significance<-ifelse(b$p.value<0.005,"significant","not sign.")
#################################
#In order to perform statistical test across ALL GO, I need to attribute a zero value to the missing species
fill<-reshape2::dcast(Func, GO_description + Method ~ Species,value.var = "Frequency", fun.aggregate = mean)
fill[is.na(fill)] <- 0 #The missing value for certain GO corresponds to true zeros (no hits during alignments)
Func_all<- reshape2::melt(fill, id=c("GO_description","Method"))
colnames(Func_all)[3] <- "Species"
colnames(Func_all)[4] <- "Frequency"
Func_all_m <- Func_all %>%
mutate_if(sapply(Func_all, is.character), as.factor)%>%
filter(!GO_description=="NO_NAME")%>%
group_by(GO_description) %>%
filter(n() == 10)
summary(Func_all_m)
#cube root transformation
#Func_all_m$Frequency<-sign(Func_all_m$Frequency) * abs(Func_all_m$Frequency)^(1/3)
#plotNormalHistogram(Func_all_m$Frequency)
#####CHOOSE#######
###### ANOVA
c<-Func_all_m %>%
nest(data = c(Species, Method,Frequency)) %>%
mutate(model = map(data, ~anova(lm(Frequency ~ Species, .))),
tidy = map(model, broom::tidy)) %>%
select(GO_description, tidy) %>%
unnest(tidy)
###### NON PARAMETRIC
#c<-Func_all_m %>%
#nest(data = c(Species, Method,Frequency)) %>%
#mutate(model = map(data, ~kruskal.test(Frequency ~ Species, .)),
#tidy = map(model, broom::tidy)) %>%
#select(GO_description, tidy) %>%
#unnest(tidy)
#####CHOOSE#######
c$significance<-ifelse(c$p.value<0.005,"significant","not sign.")
###### DATA CHECKS ######
anova <- aov(Frequency ~ Species , data = Func_all_m)
# Test for Homogeneity of variances (OK IF around red line)
plot(anova, 1)
# Second Test for Homogeneity of variances (OK if p value significatif)
leveneTest(Frequency ~ Species, data = Func_all_m)
# Test for Normality distribution (OK If most point follow the line)
plot(anova, 2)
# Second test for normality Extract the residuals
anova_residuals <- residuals(object = anova )
# Run Shapiro-Wilk test (OK if p value significatif)
#shapiro.test(x = anova_residuals ) #This test can't be applied to so many data
#### FINAL STAT, CLEAN and EXPORT TABLE ####
significant<-c%>%
filter(!term=="Residuals")
stat<-Func_all_m %>%
group_by(GO_description, Species) %>%
summarise(
n=n(),
mean = mean(Frequency, na.rm = TRUE),
sd = sd(Frequency, na.rm = TRUE)
)
stat1<-reshape2::dcast(stat, GO_description ~ Species,value.var = "mean")
colnames(stat1)[2] <- "Enterobacter sp. SA187 - Mean SM/DSM"
colnames(stat1)[3] <- "Klebsiella oxytoca - Mean SM/DSM"
colnames(stat1)[4] <- "Leuconostoc pseudomesenteroides - Mean SM/DSM"
colnames(stat1)[5] <- "Sodalis glossinidius - Mean SM/DSM"
colnames(stat1)[6] <- "Sodalis praecaptivus - Mean SM/DSM"
stat2<-reshape2::dcast(stat, GO_description ~ Species,value.var = "sd")
colnames(stat2)[2] <- "Enterobacter sp. SA187 - SD SM/DSM"
colnames(stat2)[3] <- "Klebsiella oxytoca - SD SM/DSM"
colnames(stat2)[4] <- "Leuconostoc pseudomesenteroides - SD SM/DSM"
colnames(stat2)[5] <- "Sodalis glossinidius - SD SM/DSM"
colnames(stat2)[6] <- "Sodalis praecaptivus - SD SM/DSM"
GO_sign<- merge(stat1,stat2,by="GO_description")
GO_sign<-merge(GO_sign,significant,by="GO_description")
write.table(GO_sign, "GO_significant.txt", sep="\t")
# Export the columns
GO_sign_columns <- GO_sign[,2:6]
# Rename the columns
colnames(GO_sign_columns) <- c("Enterobacter sp. SA187","Klebsiella oxytoca","Leuconostoc pseudomesenteroides","Sodalis glossinidius","Sodalis praecaptivus")
# Extract the maximum number (or Frequency) per GO (this is a choice as we assumed that the highest mean is bringing the significance)
maximum_column_names <- colnames(GO_sign_columns)[max.col(GO_sign_columns,ties.method = "first")] %>% as.data.frame()
# Combine it with the pvalue data
maximums_pvalues_and_names <- cbind(maximum_column_names, GO_sign$GO_description,GO_sign$p.value)
colnames(maximums_pvalues_and_names) <- c("Species","GO_description","pvalue")
maximums_pvalues_and_names <- maximums_pvalues_and_names %>% group_by(Species)
# Create a list with the GOs per species. Each dataframe contains the data for each species.
maximum_split <- maximums_pvalues_and_names %>% group_split()
top20_per_species <- lapply(maximum_split, function(df) {
df <- df[order(df$pvalue),]
df <- df[1:20,]
})
# Manually annotate the functions (copy paste to the GO database)
enterobacter <- top20_per_species[[1]]
enterobacter$functions <- c("MF","MF","MF","MF","MF","MF","MF","MF","CC","MF","CC","MF","BP","BP","MF","BP","MF","MF","MF","BP")
enterobacter$Topfunctions<-c( "Carbohydrate process", "Others","Others","Others","Others","Carbohydrate process","Others","Others","Others","Carbohydrate process","Others","Carbohydrate process","Others","Others","Others","Others","Others","Others","Others","Carbohydrate process" )
enterobacter$pvalue<--log10(enterobacter$pvalue)
enterobacter<-merge(enterobacter,GO_sign,by=c("GO_description"))
enterobacter<-enterobacter[,-c(7:10,12:22)]
colnames(enterobacter)[6] <- "Frequency"
colnames(enterobacter)[7] <- "SD"
klebsiella <- top20_per_species[[2]]
klebsiella$functions <- c("MF","MF","MF","BP","MF","MF","MF","MF","MF","MF","BP","BP","BP","MF","MF","MF","MF","MF","CC","MF")
klebsiella$Topfunctions<-c("Others","C-C lyase activity","tRNA modif","tRNA modif","Phosphorilation","C-C lyase activity","C-C lyase activity","C-C lyase activity","Phosphorilation","Others","Phosphorilation","Others","Others","Others","Others","Others","tRNA modif","Others","Others","Others")
klebsiella$pvalue<--log10(klebsiella$pvalue)
klebsiella<-merge(klebsiella,GO_sign,by=c("GO_description"))
klebsiella<-klebsiella[,-c(6,8:11,13:22)]
colnames(klebsiella)[6] <- "Frequency"
colnames(klebsiella)[7] <- "SD"
leuconostoc <- top20_per_species[[3]]
leuconostoc$functions <- c("MF","BP","BP","MF","CC","MF","CC","BP","BP","MF","MF","MF","MF","MF","BP","MF","MF","MF","BP","BP")
leuconostoc$Topfunctions<-c("tRNA modif","tRNA modif","DNA repair","Glycolysis","Others","Glycolysis","Others","Others","Others","Others","Others","tRNA modif","Others","Others","tRNA modif","DNA repair","Others","DNA repair","DNA repair","DNA repair")
leuconostoc$pvalue<--log10(leuconostoc$pvalue)
leuconostoc<-merge(leuconostoc,GO_sign,by=c("GO_description"))
leuconostoc<-leuconostoc[,-c(6:7,9:12,14:22)]
colnames(leuconostoc)[6] <- "Frequency"
colnames(leuconostoc)[7] <- "SD"
sodgloss <- top20_per_species[[4]]
sodgloss <- sodgloss %>% na.omit()
sodgloss$functions <- c("MF","BP","MF","BP","BP","MF","BP","BP","MF","MF","BP","MF")
sodgloss$Topfunctions<- c("Transposition","Transposition","Others","Transposition","Others","Others","Transposition","Transposition","Others","Others","Others","Others")
sodgloss$pvalue<--log10(sodgloss$pvalue)
sodgloss<-merge(sodgloss,GO_sign,by=c("GO_description"))
sodgloss<-sodgloss[,-c(6:8,10:13,15:22)]
colnames(sodgloss)[6] <- "Frequency"
colnames(sodgloss)[7] <- "SD"
sodpra <- top20_per_species[[5]]
sodpra$functions <- c("MF","MF","CC","MF","MF","MF","MF","MF","BP","MF","MF","MF","MF","MF","MF","MF","CC","BP","MF","BP")
sodpra$Topfunctions<- c("Amino-acid process","Amino-acid process","Others","Others","Others","Others","Amino-acid process","Amino-acid process","Amino-acid process","Amino-acid process","Others","Others","Others","Others","Others","Others","Others","Others","Others","Others")
sodpra$pvalue<--log10(sodpra$pvalue)
sodpra<-merge(sodpra,GO_sign,by=c("GO_description"))
sodpra<-sodpra[,-c(6:9,11:14,16:22)]
colnames(sodpra)[6] <- "Frequency"
colnames(sodpra)[7] <- "SD"
# Plot function
go_plot <- function(df, plotfilename) {
df2 <- df %>%
# 1. Remove any grouping
ungroup() %>%
# 2. Arrange by
#   i.  facet group (period)
#   ii. value (val)
arrange(functions, pvalue) %>%
# 3. Add order column of row numbers
mutate(order = row_number())
plot_df <- ggplot(df2, aes(order, pvalue)) +
geom_col(aes(fill = functions), position = "dodge", width = 0.5) +
scale_x_continuous(
breaks = df2$order,
labels = df2$GO_description) +
# scale_y_continuous(expand = c(0, 0)) +
facet_grid(functions ~ ., scales = "free", space = "free") +
coord_flip() +
theme_minimal() +
scale_fill_brewer(palette = "Set2", name = "functions") +
theme(panel.grid.major.y = element_blank()) +
labs(x="", y="p-value", title = df2$Species[1]) +
theme(text = element_text(size=12),legend.position = "none",
axis.ticks.y = element_blank()) + scale_y_log10("pvalue",
breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
ggsave(filename = plotfilename, plot = plot_df, width = 10, height = 15)
}
go_plot(sodgloss, plotfilename = "sodalis_gloss.pdf")
# Export the columns
GO_sign_columns <- GO_sign[,2:6]
# Rename the columns
colnames(GO_sign_columns) <- c("Enterobacter sp. SA187","Klebsiella oxytoca","Leuconostoc pseudomesenteroides","Sodalis glossinidius","Sodalis praecaptivus")
# Extract the maximum number (or Frequency) per GO (this is a choice as we assumed that the highest mean is bringing the significance)
maximum_column_names <- colnames(GO_sign_columns)[max.col(GO_sign_columns,ties.method = "first")] %>% as.data.frame()
# Combine it with the pvalue data
maximums_pvalues_and_names <- cbind(maximum_column_names, GO_sign$GO_description,GO_sign$p.value)
colnames(maximums_pvalues_and_names) <- c("Species","GO_description","pvalue")
maximums_pvalues_and_names <- maximums_pvalues_and_names %>% group_by(Species)
# Create a list with the GOs per species. Each dataframe contains the data for each species.
maximum_split <- maximums_pvalues_and_names %>% group_split()
top20_per_species <- lapply(maximum_split, function(df) {
df <- df[order(df$pvalue),]
df <- df[1:20,]
})
# Manually annotate the functions (copy paste to the GO database)
enterobacter <- top20_per_species[[1]]
enterobacter$functions <- c("MF","MF","MF","MF","MF","MF","MF","MF","CC","MF","CC","MF","BP","BP","MF","BP","MF","MF","MF","BP")
enterobacter$Topfunctions<-c( "Carbohydrate process", "Others","Others","Others","Others","Carbohydrate process","Others","Others","Others","Carbohydrate process","Others","Carbohydrate process","Others","Others","Others","Others","Others","Others","Others","Carbohydrate process" )
enterobacter$pvalue<--log10(enterobacter$pvalue)
enterobacter<-merge(enterobacter,GO_sign,by=c("GO_description"))
enterobacter<-enterobacter[,-c(7:10,12:22)]
colnames(enterobacter)[6] <- "Frequency"
colnames(enterobacter)[7] <- "SD"
klebsiella <- top20_per_species[[2]]
klebsiella$functions <- c("MF","MF","MF","BP","MF","MF","MF","MF","MF","MF","BP","BP","BP","MF","MF","MF","MF","MF","CC","MF")
klebsiella$Topfunctions<-c("Others","C-C lyase activity","tRNA modif","tRNA modif","Phosphorilation","C-C lyase activity","C-C lyase activity","C-C lyase activity","Phosphorilation","Others","Phosphorilation","Others","Others","Others","Others","Others","tRNA modif","Others","Others","Others")
klebsiella$pvalue<--log10(klebsiella$pvalue)
klebsiella<-merge(klebsiella,GO_sign,by=c("GO_description"))
klebsiella<-klebsiella[,-c(6,8:11,13:22)]
colnames(klebsiella)[6] <- "Frequency"
colnames(klebsiella)[7] <- "SD"
leuconostoc <- top20_per_species[[3]]
leuconostoc$functions <- c("MF","BP","BP","MF","CC","MF","CC","BP","BP","MF","MF","MF","MF","MF","BP","MF","MF","MF","BP","BP")
leuconostoc$Topfunctions<-c("tRNA modif","tRNA modif","DNA repair","Glycolysis","Others","Glycolysis","Others","Others","Others","Others","Others","tRNA modif","Others","Others","tRNA modif","DNA repair","Others","DNA repair","DNA repair","DNA repair")
leuconostoc$pvalue<--log10(leuconostoc$pvalue)
leuconostoc<-merge(leuconostoc,GO_sign,by=c("GO_description"))
leuconostoc<-leuconostoc[,-c(6:7,9:12,14:22)]
colnames(leuconostoc)[6] <- "Frequency"
colnames(leuconostoc)[7] <- "SD"
sodgloss <- top20_per_species[[4]]
sodgloss <- sodgloss %>% na.omit()
sodgloss$functions <- c("MF","BP","MF","BP","BP","MF","BP","BP","MF","MF","BP","MF")
sodgloss$Topfunctions<- c("Transposition","Transposition","Others","Transposition","Others","Others","Transposition","Transposition","Others","Others","Others","Others")
sodgloss$pvalue<--log10(sodgloss$pvalue)
sodgloss<-merge(sodgloss,GO_sign,by=c("GO_description"))
sodgloss<-sodgloss[,-c(6:8,10:13,15:22)]
colnames(sodgloss)[6] <- "Frequency"
colnames(sodgloss)[7] <- "SD"
sodpra <- top20_per_species[[5]]
sodpra$functions <- c("MF","MF","CC","MF","MF","MF","MF","MF","BP","MF","MF","MF","MF","MF","MF","MF","CC","BP","MF","BP")
sodpra$Topfunctions<- c("Amino-acid process","Amino-acid process","Others","Others","Others","Others","Amino-acid process","Amino-acid process","Amino-acid process","Amino-acid process","Others","Others","Others","Others","Others","Others","Others","Others","Others","Others")
sodpra$pvalue<--log10(sodpra$pvalue)
sodpra<-merge(sodpra,GO_sign,by=c("GO_description"))
sodpra<-sodpra[,-c(6:9,11:14,16:22)]
colnames(sodpra)[6] <- "Frequency"
colnames(sodpra)[7] <- "SD"
#plot all top functions
automn_final<-rbind(enterobacter,klebsiella,leuconostoc,sodgloss,sodpra)
automn_final<-automn_final[- grep("Others", automn_final$Topfunctions),]
#automn_final$Frequency<-log10(automn_final$Frequency)
automn_final<- automn_final %>%
ungroup() %>%
arrange(Species,Topfunctions, pvalue) %>%
mutate(order = row_number())
ggplot(automn_final, aes(x = pvalue, y = GO_description)) +
geom_point(aes( size = Frequency, color=Species), alpha = 0.5) +
scale_fill_brewer(palette="Oranges")+
theme_minimal()+
facet_grid(vars(Species), scales="free", space="free_x") +
xlab("-log10(p.value)") +
ylab("GO description")
ggplot(automn_final, aes(x = pvalue, y = GO_description)) +
geom_point(aes( size = Frequency, color=Species), alpha = 0.5) +
scale_size(breaks = c(0:150)) +
scale_fill_brewer(palette="Oranges")+
theme_minimal()+
facet_grid(vars(Species), scales="free", space="free_x") +
xlab("-log10(p.value)") +
ylab("GO description")
ggplot(automn_final, aes(x = pvalue, y = GO_description)) +
geom_point(aes( size = Frequency, color=Species), alpha = 0.5) +
scale_size(range = c(2,12)) +
scale_fill_brewer(palette="Oranges")+
theme_minimal()+
facet_grid(vars(Species), scales="free", space="free_x") +
xlab("-log10(p.value)") +
ylab("GO description")
ggplot(automn_final, aes(x = pvalue, y = GO_description)) +
geom_point(aes( size = Frequency, color=Species), alpha = 0.5) +
continuous_scale(breaks=c("0","1","10","100","1000"),labels=c("0","1","10","100","1000"),scale_name="Score") +
scale_fill_brewer(palette="Oranges")+
theme_minimal()+
facet_grid(vars(Species), scales="free", space="free_x") +
xlab("-log10(p.value)") +
ylab("GO description")
#plot all top functions (SOL)
automn_final<-rbind(enterobacter,klebsiella,leuconostoc,sodgloss,sodpra)
automn_final<-automn_final[- grep("Others", automn_final$Topfunctions),]
#automn_final$Frequency<-log10(automn_final$Frequency)
automn_final<- automn_final %>%
ungroup() %>%
arrange(Species,Topfunctions, pvalue) %>%
mutate(order = row_number())
ggplot(automn_final, aes(x = pvalue, y = GO_description)) +
geom_point(aes( size = Frequency, color=Species), alpha = 0.5) +
continuous_scale(breaks=c("0","1","10","100","1000"),labels=c("0","1","10","100","1000"),scale_name="Score") +
scale_fill_brewer(palette="Oranges")+
theme_minimal()+
facet_grid(vars(Species), scales="free", space="free_x") +
xlab("-log10(p.value)") +
ylab("GO description")
ggplot(automn_final, aes(x = pvalue, y = GO_description)) +
geom_point(aes( size = Frequency, color=Species), alpha = 0.5) +
scale_size(range = c(0,150)) +
scale_fill_brewer(palette="Oranges")+
theme_minimal()+
facet_grid(vars(Species), scales="free", space="free_x") +
xlab("-log10(p.value)") +
ylab("GO description")
ggplot(automn_final, aes(x = pvalue, y = GO_description)) +
geom_point(aes( size = Frequency, color=Species), alpha = 0.5) +
#scale_size(range = c(0,150)) +
#scale_fill_brewer(palette="Oranges")+
theme_minimal()+
facet_grid(vars(Species), scales="free", space="free_x") +
xlab("-log10(p.value)") +
ylab("GO description")
automn_final<- automn_final %>%
ungroup() %>%
arrange(Species,Topfunctions, pvalue) %>%
mutate(order = row_number())
ggplot(automn_final, aes(x = pvalue, y = GO_description)) +
geom_point(aes( size = Frequency, color=Species), alpha = 0.5) +
#scale_size(range = c(0,150)) +
#scale_fill_brewer(palette="Oranges")+
theme_minimal()+
facet_grid(vars(Species), scales="free", space="free_x") +
xlab("-log10(p.value)") +
ylab("GO description")
View(automn_final)
# Test for Homogeneity of variances (OK IF around red line)
plot(anova, 1)
# Second Test for Homogeneity of variances (OK if p value significatif)
leveneTest(Frequency ~ Species, data = Func_all_m)
# Test for Normality distribution (OK If most point follow the line)
plot(anova, 2)
View(Func_all_m)
