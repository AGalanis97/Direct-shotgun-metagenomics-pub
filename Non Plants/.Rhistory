unnest(tidy)
c<-Func_all_m2 %>%
group_by(GO_description) %>%
nest()
View(c)
View(c[[2]][[3]])
summary(Func_all_m2)
dd<-Func_all_m2 %>%
group_by(GO_description) %>%
nest()
View(dd)
View(dd[[2]][[2]])
View(Func_all_m2)
Func_10 <- Func%>%
mutate_if(sapply(Func, is.character), as.factor)%>%
filter(!GO_description=="NO_NAME")%>%
group_by(GO_description) %>%
filter(n() => 10) #only GO terms present in the 5 species and both methods
Func_10 <- Func%>%
mutate_if(sapply(Func, is.character), as.factor)%>%
filter(!GO_description=="NO_NAME")%>%
group_by(GO_description) %>%
filter(n() > 3) #only GO terms present in the 5 species and both methods
View(Func_10)
summary(Func_10)
b<-Func_10 %>%
nest(data = c(Species, Method,Frequency))
View(b)
View(b[[2]][[1]])
b<-Func_10 %>%
nest(data = c(Species, Method,Frequency)) %>%
mutate(model = map(data, ~anova(lm(Frequency ~ Species, .))),
tidy = map(model, broom::tidy)) %>%
select(GO_description, tidy) %>%
unnest(tidy)
View(b)
b$significance<-ifelse(b$p.value<0.005,"significant","not sign.")
View(b)
functional<-read.csv("functional_results_significant_bacteria.csv", header = TRUE)
Func_Sum<-functional %>%
group_by(Species) %>%
summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
Functional_Reduced<- functional[grepl("Enterobacter sp. SA187", functional$Species) | grepl("Klebsiella oxytoca", functional$Species) | grepl("Leuconostoc pseudomesenteroides", functional$Species)| grepl("Sodalis glossinidius", functional$Species)| grepl("Sodalis praecaptivus", functional$Species) , ]
Functional_Reduced<-Functional_Reduced[,-c(1:2,4:6,8:11,14)]
Func<- reshape2::melt(Functional_Reduced, id=c("GO_description","Species"))
colnames(Func)[3] <- "Method"
colnames(Func)[4] <- "Frequency"
#Func<- subset(Func, Frequency>5)
Func_10 <- Func%>%
mutate_if(sapply(Func, is.character), as.factor)%>%
filter(!GO_description=="NO_NAME")%>%
group_by(GO_description) %>%
filter(n() == 10) #only GO terms present in the 5 species and both methods
summary(Func_10)
b<-Func_10 %>%
nest(data = c(Species, Method,Frequency)) %>%
mutate(model = map(data, ~anova(lm(Frequency ~ Species, .))),
tidy = map(model, broom::tidy)) %>%
select(GO_description, tidy) %>%
unnest(tidy)
b$significance<-ifelse(b$p.value<0.005,"significant","not sign.")
fill<-reshape2::dcast(Func, GO_description ~ Species,value.var = "Frequency", mean)
View(fill)
Func_all<- reshape2::melt(fill, id=c("GO_description"))
View(Func_all)
colnames(Func_all)[2] <- "Species"
colnames(Func_all)[3] <- "Frequency"
View(Func_all)
summary(Func_all)
Func_all_m<- Func_all%>%
mutate_if(sapply(Func_all, is.character), as.factor)
summary(Func_all_m)
View(Func_all_m)
c<-Func_all_m %>%
group_by(GO_description) %>%
nest()
View(c)
View(c[[2]][[11]])
View(c[[2]][[4]])
View(Func_all_m)
Func_all_m$MeanSM_DSM<-c("SM_DSM_mean")
View(Func_all_m)
c<-Func_all_m %>%
nest(data = c(Species, MeanSM_DSM,Frequency))
View(c)
x<-Func_all_m %>%
nest(data = !GO_description)
View(x)
View(x[[2]][[1]])
View(x[[2]][[5]])
x<-Func_all_m %>%
ungroup() %>%
nest(-GO_description)
View(x)
View(x[[2]][[5]])
dd %>%
mutate(result = map(data, ~.x %>% group_by(sub) %>%
summarize(count=n(), mean=mean(value)))) %>%
summy = function(x) Func_all_m %>% group_by(GO_description) %>%
kruskal.test(Frequency ~ Species)
dd %>%
mutate(result = map(data, ~.x %>% group_by(sub) %>%
summarize(count=n(), mean=mean(value)))) %>%
summy = function(x) Func_all_m %>% group_by(GO_description) %>%
kruskal.test(Frequency ~ Species)
# split and apply function, result is a named list:
lapply(split(Func_all_m, Func_all_m$GO_description), function(i){
kruskal.test(Frequency ~ Species, data = i)
})
Func_all_m2<-read.table("Func_all_m.txt",stringsAsFactor = FALSE)
# split and apply function, result is a named list:
lapply(split(Func_all_m2, Func_all_m$GO_description), function(i){
kruskal.test(Frequency ~ Species, data = i)
})
Func_all_m2<-read.table("Func_all_m.txt",header = TRUE, stringsAsFactors = FALSE)
# split and apply function, result is a named list:
lapply(split(Func_all_m2, Func_all_m2$GO_description), function(i){
kruskal.test(Frequency ~ Species, data = i)
})
setwd("~/Desktop/Non Plants")
library(readxl)
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr)
library(data.table)
#library(ggpubr)
library(car) #test for normality
library(rcompanion) #for tranformation cube square
myPalette <- brewer.pal(6, "Dark2")
functional<-read.csv("functional_results_significant_bacteria.csv", header = TRUE)
Func_Sum<-functional %>%
group_by(Species) %>%
summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
Functional_Reduced<- functional[grepl("Enterobacter sp. SA187", functional$Species) | grepl("Klebsiella oxytoca", functional$Species) | grepl("Leuconostoc pseudomesenteroides", functional$Species)| grepl("Sodalis glossinidius", functional$Species)| grepl("Sodalis praecaptivus", functional$Species) , ]
Functional_Reduced<-Functional_Reduced[,-c(1:2,4:6,8:11,14)]
Func<- reshape2::melt(Functional_Reduced, id=c("GO_description","Species"))
colnames(Func)[3] <- "Method"
colnames(Func)[4] <- "Frequency"
Func_10 <- Func%>%
mutate_if(sapply(Func, is.character), as.factor)%>%
filter(!GO_description=="NO_NAME")%>%
group_by(GO_description) %>%
filter(n() == 10) #only GO terms present in the 5 species and both methods
summary(Func_10)
b<-Func_10 %>%
nest(data = c(Species, Method,Frequency)) %>%
mutate(model = map(data, ~anova(lm(Frequency ~ Species, .))),
tidy = map(model, broom::tidy)) %>%
select(GO_description, tidy) %>%
unnest(tidy)
b$significance<-ifelse(b$p.value<0.005,"significant","not sign.")
View(b)
#In order to perform statistical test across ALL GO, I need to attribute a zero value to the missing species
fill<-reshape2::dcast(Func, GO_description + Method ~ Species,value.var = "Frequency", fun.aggregate = mean)
fill[is.na(fill)] <- 0 #The missing value for certain GO corresponds to true zeros (no hits during alignments)
Func_all<- reshape2::melt(fill, id=c("GO_description","Method"))
colnames(Func_all)[3] <- "Species"
colnames(Func_all)[4] <- "Frequency"
Func_all_m <- Func_all %>%
mutate_if(sapply(Func_all, is.character), as.factor)%>%
filter(!GO_description=="NO_NAME")%>%
group_by(GO_description) %>%
filter(n() == 10)
summary(Func_all_m)
#cube root transformation
Func_all_m$Frequency<-sign(Func_all_m$Frequency) * abs(Func_all_m$Frequency)^(1/3)
plotNormalHistogram(Func_all_m$Frequency)
c<-Func_all_m %>%
nest(data = c(Species, Method,Frequency))
View(c)
View(c[[2]][[5]])
setwd("~/Desktop/Non Plants")
library(readxl)
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr)
library(data.table)
#library(ggpubr)
library(car) #test for normality
library(rcompanion) #for transformation cube square
myPalette <- brewer.pal(6, "Dark2")
#All non plant species
nonplants<-read.csv("~/Documents/GitHub/Direct-shotgun-metagenomics-pub/Normalised_reads/normalised_methodseason_species.csv", header = TRUE)
nonplants<-nonplants[!grepl("Viridiplantae", nonplants$Kingdom),]
#filter species with less that 100 reads and export for manual and NCBI-based classification
nonplants$Sum<-rowSums(nonplants[3:10])
nonplantsfilt<-nonplants[!(rowSums(nonplants[3:10])<=100), ] # this threshold give the same distribution that with all read
write.table(nonplantsfilt, file = "nonplantsfilt.txt", sep = "\t",row.names = TRUE, col.names = NA)
#merge with Pavlopoulos analysis (NCBI search)
NCBI<-read_excel("NCBI.xlsx")
NCBI<-NCBI[!grepl("Apis mellifera filamentous virus", NCBI$Species),]
#Differential non plant species across seasons (from Cluster analysis)
SeasonalDifCl1<-read.csv("~/Documents/GitHub/Direct-shotgun-metagenomics-pub/Figures/Figure_3/Cluster/Species_cluster_1.csv", header = TRUE)
SeasonalDifCl3<-read.csv("~/Documents/GitHub/Direct-shotgun-metagenomics-pub/Figures/Figure_3/Cluster/Species_cluster_3.csv", header = TRUE)
SeasonalDifCl4<-read.csv("~/Documents/GitHub/Direct-shotgun-metagenomics-pub/Figures/Figure_3/Cluster/Species_cluster_4.csv", header = TRUE)
SeasonalDifAll<-rbind(SeasonalDifCl1,SeasonalDifCl3,SeasonalDifCl4)
SeasonalDifAll<-SeasonalDifAll[!grepl("Viridiplantae", SeasonalDifAll$Kingdom),]
SeasonalDifAll<-SeasonalDifAll[,-(2:11)]
SeasonalDifAll<-merge(SeasonalDifAll,NCBI,by="Species")
#plot distribution
All<-nonplants[!grepl("Apis mellifera filamentous virus", nonplants$Species),] #remove Am f virus
All<-data.frame(tapply(All$Sum, All$Superkingdom, FUN=sum))
pie (t(All), labels = c("Archaea","Bacteria","Eucaryote","Virus"))
Filter<-data.frame(tapply(NCBI$Sum, NCBI$Superkingdom, FUN=sum))
pie (t(Filter), labels = c("Bacteria","Eucaryote","NA","Virus"),col=myPalette,main="Non-plants superkindgoms distribution in honey")
Relationship <- data.frame(tapply(NCBI$Sum, NCBI$`Relation category`  , FUN=sum))
pie (t(Relationship), labels = c("Bacterial gut community","Host","Human cross contamination","Others","Pathogen","Unknown"),border="white", col=myPalette, main="Relationship of non-plant species with bees ")
Differential <- data.frame(tapply(SeasonalDifAll$Sum, SeasonalDifAll$`Relation category`  , FUN=sum))
pie (t(Differential), labels = c("Bacterial gut community","Host","Human cross contamination","Others","Pathogen","Unknown"),border="white", col=myPalette, main="Relationship of the seasonal specific non-plant species with bees ")
#Extract data of the known microbiota (from Kešnerová et al. 2019 and doi: 10.1186/s12864-015-1476-6)
Bartonella_sp <- nonplants[grepl("Bartonella", nonplants$Genus), ]
Bartonella_sp$Category<- c("Bartonella sp.")
Bifidobacterium_sp <- nonplants[grepl("Bifidobacterium", nonplants$Genus), ]
Bifidobacterium_sp$Category<- c("Bifidobacterium sp.")
Bombella_sp <-  nonplants[grepl("Bombella", nonplants$Genus), ]
Bombella_sp$Category<- c("Bombella sp.")
Frischellaperrara <- nonplants[grepl("Frischella perrara", nonplants$Species), ]
Frischellaperrara$Category<- c("Frischella perrara")
Gilliamellaapicola <- nonplants[grepl("Gilliamella apicola", nonplants$Species), ]
Gilliamellaapicola$Category<- c("Gilliamella apicola")
Lactobacilluskunkeei <- nonplants[grepl("Lactobacillus kunkeei", nonplants$Species), ]
Lactobacilluskunkeei$Category<- c("Lactobacillus kunkeei")
Lactobacillus_Firm4 <- nonplants[grepl("Lactobacillus mellis", nonplants$Species) | grepl("Lactobacillus mellifer", nonplants$Species) , ] #doi: 10.1186/s12864-015-1476-6
Lactobacillus_Firm4$Category<- c("Lactobacillus-Firm4") #not plot because of too lower reads
Lactobacillus_Firm5 <- nonplants[grepl("Lactobacillus apis", nonplants$Species) | grepl("Lactobacillus helsingborgensis", nonplants$Species)| grepl("Lactobacillus melliventris", nonplants$Species) | grepl("Lactobacillus kullabergensis", nonplants$Species)| grepl("Lactobacillus kimbladii", nonplants$Species) , ] #doi: 10.1186/s12864-015-1476-6
Lactobacillus_Firm5$Category<- c("Lactobacillus-Firm5")
Lactobacillus_Others <- nonplants[grepl("Lactobacillus sp. Fhon2N", nonplants$Species) | grepl("Lactobacillus apinorum", nonplants$Species)| grepl("Lactobacillus delbrueckii", nonplants$Species) | grepl("Liquorilactobacillus nageliis", nonplants$Species), ]  #Others Lactobacillus with more that 100 reads coverage
Lactobacillus_Others$Category<- c("Lactobacillus-Others")
Lonsdaleabritannica <- nonplants[grepl("Lonsdalea britannica", nonplants$Species), ]
Lonsdaleabritannica$Category<- c("Lonsdalea britannica")
Snodgrassellaalvi <- nonplants[grepl("Snodgrassella alvi", nonplants$Species), ]
Snodgrassellaalvi $Category<- c("Snodgrassella alvi ") #not plot because of too lower reads
microbiota<-rbind(Bartonella_sp,Bifidobacterium_sp,Bombella_sp,Frischellaperrara,Gilliamellaapicola,Lactobacilluskunkeei,Lactobacillus_Firm5,Lactobacillus_Others,Lonsdaleabritannica)
#Because L. kunkeii dominate the DNA from microbiota, I remove it
microbiota_nokunkeei<-rbind(Bartonella_sp,Bifidobacterium_sp,Bombella_sp,Frischellaperrara,Gilliamellaapicola,Lactobacillus_Firm5,Lactobacillus_Others,Lonsdaleabritannica)
#Abundance barplots
### ALL
p<-microbiota %>%
group_by(Category) %>%
summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
pp <- melt(p, id.vars="Category")
ppp <-pp %>%
group_by(Category) %>%
summarise(mean=mean(value), sd=sd(value))
ggplot(ppp, aes(reorder(Category,- mean), y=mean, fill=Category)) +
geom_bar(stat="identity", color="black", position=position_dodge(), fill="grey") +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd),position = position_dodge(0.9), width = .3) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45,hjust=1),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "none") +
xlab("Species") +
ylab("Attributed reads")
#### NO KUNKEII
pk<-microbiota_nokunkeei %>%
group_by(Category) %>%
summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
ppk <- melt(pk, id.vars="Category")
ggplot(ppk, aes(variable, value,fill=Category)) +
geom_bar(position="fill", stat="identity")+
theme_minimal()+
scale_fill_brewer(palette="Paired")+
labs(title = "CORE and NON-CORE microbiota detected in Honey",
subtitle = "(Excluding L. kunkeii)")
#Because others abundant bacteria were attributed as gut microbiota from the NCBI and the differential analyses I decide to include them also in the microbiota database
Sodalis <- nonplants[grepl("Sodalis glossinidius", nonplants$Species) | grepl("	Sodalis praecaptivus", nonplants$Species) , ]
Sodalis$Category<- c("Sodalis")
Pantoeaagglomerans<-nonplants[grepl("Pantoea agglomerans", nonplants$Species) , ]
Pantoeaagglomerans$Category<- c("Pantoea agglomerans")
Leuconostocpseudomesenteroides<-nonplants[grepl("Leuconostoc pseudomesenteroides", nonplants$Species) , ]
Leuconostocpseudomesenteroides$Category<- c("Leuconostoc pseudomesenteroides")
Enterobacter_sp<-nonplants[grepl("Enterobacter sp. SA187", nonplants$Species) , ]
Enterobacter_sp$Category<- c("Enterobacter sp.")
Arsenophonusnasoniae<-nonplants[grepl("Arsenophonus nasoniae", nonplants$Species) , ]
Arsenophonusnasoniae$Category<- c("Arsenophonus nasoniae")
Parasaccharibacterapium<-nonplants[grepl("Parasaccharibacter apium", nonplants$Species) , ]
Parasaccharibacterapium$Category<- c("Parasaccharibacter apium")
Morganellamorganii<-nonplants[grepl("Morganella morganii", nonplants$Species) , ]
Morganellamorganii$Category<- c("Morganella morganii")
Klebsiellaoxytoca<-nonplants[grepl("Klebsiella oxytoca", nonplants$Species) , ]
Klebsiellaoxytoca$Category<- c("Klebsiella oxytoca")
microbiota_extended<-rbind(microbiota_nokunkeei,Sodalis, Pantoeaagglomerans,Leuconostocpseudomesenteroides,Enterobacter_sp,Arsenophonusnasoniae,Parasaccharibacterapium,Morganellamorganii,Klebsiellaoxytoca)
other_microbiota<-rbind(Sodalis,Pantoeaagglomerans,Leuconostocpseudomesenteroides,Enterobacter_sp,Arsenophonusnasoniae,Parasaccharibacterapium,Morganellamorganii,Klebsiellaoxytoca)
#### EXTENDED
pkext<-microbiota_extended %>%
group_by(Category) %>%
summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
ppkext <- melt(pkext, id.vars="Category")
ggplot(ppkext, aes(variable, value,fill=Category)) +
geom_bar(position="fill", stat="identity")+
theme_minimal() +
labs(title = "EXTENTED GUT MICROBIOTA")
#### OTHERS MICROBIOTA
pkother<-other_microbiota %>%
group_by(Category) %>%
summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
ppkother <- melt(pkother, id.vars="Category")
ggplot(ppkother, aes(variable, value,fill=Category)) +
geom_bar(position="fill", stat="identity")+
theme_minimal()+
scale_fill_brewer(palette="Paired")+
labs(title = "OTHER MICROBIOTA")
### SEASONAL DIFF MICROBIOTA (all except frishella are autonm specific so I removed it for result purpose)
Diff_microbiota<-rbind(Enterobacter_sp,Klebsiellaoxytoca,Leuconostocpseudomesenteroides,Sodalis,Frischellaperrara)
pkdiff<-Diff_microbiota %>%
group_by(Category) %>%
summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
ppkdiff <- melt(pkdiff, id.vars="Category")
ggplot(ppkdiff, aes(variable, value,fill=Category)) +
geom_bar(position="stack", stat="identity")+
theme_minimal()+
scale_fill_brewer(palette="Oranges")+
facet_grid(Category~variable, scales="free", space="free_x")
functional<-read.csv("functional_results_significant_bacteria.csv", header = TRUE)
Func_Sum<-functional %>%
group_by(Species) %>%
summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
Functional_Reduced<- functional[grepl("Enterobacter sp. SA187", functional$Species) | grepl("Klebsiella oxytoca", functional$Species) | grepl("Leuconostoc pseudomesenteroides", functional$Species)| grepl("Sodalis glossinidius", functional$Species)| grepl("Sodalis praecaptivus", functional$Species) , ]
Functional_Reduced<-Functional_Reduced[,-c(1:2,4:6,8:11,14)]
Func<- reshape2::melt(Functional_Reduced, id=c("GO_description","Species"))
colnames(Func)[3] <- "Method"
colnames(Func)[4] <- "Frequency"
Func_10 <- Func%>%
mutate_if(sapply(Func, is.character), as.factor)%>%
filter(!GO_description=="NO_NAME")%>%
group_by(GO_description) %>%
filter(n() == 10) #only GO terms present in the 5 species and both methods
summary(Func_10)
b<-Func_10 %>%
nest(data = c(Species, Method,Frequency))
View(b)
View(b[[2]][[2]])
b<-Func_10 %>%
nest(data = c(Species, Method,Frequency)) %>%
mutate(model = map(data, ~anova(lm(Frequency ~ Species, .))),
tidy = map(model, broom::tidy)) %>%
select(GO_description, tidy) %>%
unnest(tidy)
b$significance<-ifelse(b$p.value<0.005,"significant","not sign.")
#In order to perform statistical test across ALL GO, I need to attribute a zero value to the missing species
fill<-reshape2::dcast(Func, GO_description + Method ~ Species,value.var = "Frequency", fun.aggregate = mean)
fill[is.na(fill)] <- 0 #The missing value for certain GO corresponds to true zeros (no hits during alignments)
Func_all<- reshape2::melt(fill, id=c("GO_description","Method"))
colnames(Func_all)[3] <- "Species"
colnames(Func_all)[4] <- "Frequency"
Func_all_m <- Func_all %>%
mutate_if(sapply(Func_all, is.character), as.factor)%>%
filter(!GO_description=="NO_NAME")%>%
group_by(GO_description) %>%
filter(n() == 10)
summary(Func_all_m)
#cube root transformation
Func_all_m$Frequency<-sign(Func_all_m$Frequency) * abs(Func_all_m$Frequency)^(1/3)
plotNormalHistogram(Func_all_m$Frequency)
c<-Func_all_m %>%
nest(data = c(Species, Method,Frequency))
View(c)
View(c[[2]][[11]])
View(Func_all_m)
functional<-read.csv("functional_results_significant_bacteria.csv", header = TRUE)
Func_Sum<-functional %>%
group_by(Species) %>%
summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
Functional_Reduced<- functional[grepl("Enterobacter sp. SA187", functional$Species) | grepl("Klebsiella oxytoca", functional$Species) | grepl("Leuconostoc pseudomesenteroides", functional$Species)| grepl("Sodalis glossinidius", functional$Species)| grepl("Sodalis praecaptivus", functional$Species) , ]
Functional_Reduced<-Functional_Reduced[,-c(1:2,4:6,8:11,14)]
Func<- reshape2::melt(Functional_Reduced, id=c("GO_description","Species"))
colnames(Func)[3] <- "Method"
colnames(Func)[4] <- "Frequency"
Func_10 <- Func%>%
mutate_if(sapply(Func, is.character), as.factor)%>%
filter(!GO_description=="NO_NAME")%>%
group_by(GO_description) %>%
filter(n() == 10) #only GO terms present in the 5 species and both methods
summary(Func_10)
b<-Func_10 %>%
nest(data = c(Species, Method,Frequency)) %>%
mutate(model = map(data, ~anova(lm(Frequency ~ Species, .))),
tidy = map(model, broom::tidy)) %>%
select(GO_description, tidy) %>%
unnest(tidy)
b$significance<-ifelse(b$p.value<0.005,"significant","not sign.")
#################################
#In order to perform statistical test across ALL GO, I need to attribute a zero value to the missing species
fill<-reshape2::dcast(Func, GO_description + Method ~ Species,value.var = "Frequency", fun.aggregate = mean)
fill[is.na(fill)] <- 0 #The missing value for certain GO corresponds to true zeros (no hits during alignments)
Func_all<- reshape2::melt(fill, id=c("GO_description","Method"))
colnames(Func_all)[3] <- "Species"
colnames(Func_all)[4] <- "Frequency"
Func_all_m <- Func_all %>%
mutate_if(sapply(Func_all, is.character), as.factor)%>%
filter(!GO_description=="NO_NAME")%>%
group_by(GO_description) %>%
filter(n() == 10)
summary(Func_all_m)
#cube root transformation
#Func_all_m$Frequency<-sign(Func_all_m$Frequency) * abs(Func_all_m$Frequency)^(1/3)
#plotNormalHistogram(Func_all_m$Frequency)
#####CHOOSE#######
###### ANOVA
c<-Func_all_m %>%
nest(data = c(Species, Method,Frequency)) %>% #nesting doesn't work, I can't fix it
mutate(model = map(data, ~anova(lm(Frequency ~ Species, .))),
tidy = map(model, broom::tidy)) %>%
select(GO_description, tidy) %>%
unnest(tidy)
###### NON PARAMETRIC
c<-Func_all_m %>%
nest(data = c(Species, Method,Frequency)) %>% #nesting doesn't work, I can't fix it
mutate(model = map(data, ~kruskal.test(Frequency ~ Species, .)),
tidy = map(model, broom::tidy)) %>%
select(GO_description, tidy) %>%
unnest(tidy)
#####CHOOSE#######
c$significance<-ifelse(c$p.value<0.005,"significant","not sign.")
###### DATA CHECKS ######
anova <- aov(Frequency ~ Species , data = Func_all_m)
# Test for Homogeneity of variances (OK IF around red line)
plot(anova, 1)
# Second Test for Homogeneity of variances (OK if p value significatif)
leveneTest(Frequency ~ Species, data = Func_all_m)
# Test for Normality distribution (OK If most point follow the line)
plot(anova, 2)
# Second test for normality Extract the residuals
anova_residuals <- residuals(object = anova )
# Run Shapiro-Wilk test (OK if p value significatif)
#shapiro.test(x = anova_residuals ) #This test can't be applied to so many data
#### FINAL STAT, CLEAN and EXPORT TABLE ####
significant<-c%>%
filter(!term=="Residuals")
View(Func_all_m)
View(Func_10)
View(b)
setwd("~/Desktop/Non Plants")
library(readxl)
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr)
library(data.table)
#library(ggpubr)
library(car) #test for normality
library(rcompanion) #for transformation cube square
myPalette <- brewer.pal(6, "Dark2")
#All non plant species
nonplants<-read.csv("~/Documents/GitHub/Direct-shotgun-metagenomics-pub/Normalised_reads/normalised_methodseason_species.csv", header = TRUE)
nonplants<-nonplants[!grepl("Viridiplantae", nonplants$Kingdom),]
#filter species with less that 100 reads and export for manual and NCBI-based classification
nonplants$Sum<-rowSums(nonplants[3:10])
nonplantsfilt<-nonplants[!(rowSums(nonplants[3:10])<=100), ] # this threshold give the same distribution that with all read
write.table(nonplantsfilt, file = "nonplantsfilt.txt", sep = "\t",row.names = TRUE, col.names = NA)
#merge with Pavlopoulos analysis (NCBI search)
NCBI<-read_excel("NCBI.xlsx")
NCBI<-NCBI[!grepl("Apis mellifera filamentous virus", NCBI$Species),]
#Differential non plant species across seasons (from Cluster analysis)
SeasonalDifCl1<-read.csv("~/Documents/GitHub/Direct-shotgun-metagenomics-pub/Figures/Figure_3/Cluster/Species_cluster_1.csv", header = TRUE)
SeasonalDifCl3<-read.csv("~/Documents/GitHub/Direct-shotgun-metagenomics-pub/Figures/Figure_3/Cluster/Species_cluster_3.csv", header = TRUE)
SeasonalDifCl4<-read.csv("~/Documents/GitHub/Direct-shotgun-metagenomics-pub/Figures/Figure_3/Cluster/Species_cluster_4.csv", header = TRUE)
SeasonalDifAll<-rbind(SeasonalDifCl1,SeasonalDifCl3,SeasonalDifCl4)
SeasonalDifAll<-SeasonalDifAll[!grepl("Viridiplantae", SeasonalDifAll$Kingdom),]
SeasonalDifAll<-SeasonalDifAll[,-(2:11)]
SeasonalDifAll<-merge(SeasonalDifAll,NCBI,by="Species")
#plot distribution
All<-nonplants[!grepl("Apis mellifera filamentous virus", nonplants$Species),] #remove Am f virus
All<-data.frame(tapply(All$Sum, All$Superkingdom, FUN=sum))
pie (t(All), labels = c("Archaea","Bacteria","Eucaryote","Virus"))
Filter<-data.frame(tapply(NCBI$Sum, NCBI$Superkingdom, FUN=sum))
pie (t(Filter), labels = c("Bacteria","Eucaryote","NA","Virus"),col=myPalette,main="Non-plants superkindgoms distribution in honey")
Relationship <- data.frame(tapply(NCBI$Sum, NCBI$`Relation category`  , FUN=sum))
pie (t(Relationship), labels = c("Bacterial gut community","Host","Human cross contamination","Others","Pathogen","Unknown"),border="white", col=myPalette, main="Relationship of non-plant species with bees ")
Differential <- data.frame(tapply(SeasonalDifAll$Sum, SeasonalDifAll$`Relation category`  , FUN=sum))
pie (t(Differential), labels = c("Bacterial gut community","Host","Human cross contamination","Others","Pathogen","Unknown"),border="white", col=myPalette, main="Relationship of the seasonal specific non-plant species with bees ")
### SEASONAL DIFF MICROBIOTA (all except frishella are autonm specific so I removed it for plotting purpose  )
Diff_microbiota<-rbind(Enterobacter_sp,Klebsiellaoxytoca,Leuconostocpseudomesenteroides,Sodalis)#,Frischellaperrara
pkdiff<-Diff_microbiota %>%
group_by(Category) %>%
summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
ppkdiff <- melt(pkdiff, id.vars="Category")
ggplot(ppkdiff, aes(variable, value,fill=Category)) +
geom_bar(position="stack", stat="identity")+
theme_minimal()+
scale_fill_brewer(palette="Oranges")+
facet_grid(Category~variable, scales="free", space="free_x")
Sodalisglossinidius <- nonplants[grepl("Sodalis glossinidius", nonplants$Species)  , ]
Sodalis$Category<- c("Sodalis glossinidius")
Sodalisglossinidius <- nonplants[grepl("Sodalis glossinidius", nonplants$Species)  , ]
Sodalisglossinidius$Category<- c("Sodalis glossinidius")
Sodalis <- nonplants[grepl("Sodalis glossinidius", nonplants$Species) | grepl("	Sodalis praecaptivus", nonplants$Species) , ]
Sodalis$Category<- c("Sodalis")
Sodalisglossinidius <- nonplants[grepl("Sodalis glossinidius", nonplants$Species)  , ]
Sodalisglossinidius$Category<- c("Sodalis glossinidius")
Sodalispraecaptivus <- nonplants[grepl("Sodalis praecaptivus", nonplants$Species)  , ]
Sodalispraecaptivus$Category<- c("Sodalis praecaptivus")
### SEASONAL DIFF MICROBIOTA (all except frishella are autonm specific so I removed it for plotting purpose  )
Diff_microbiota<-rbind(Enterobacter_sp,Klebsiellaoxytoca,Leuconostocpseudomesenteroides,Sodalisglossinidius,Sodalispraecaptivus)#,Frischellaperrara
pkdiff<-Diff_microbiota %>%
group_by(Category) %>%
summarise_at(vars(DirectSM_H5,SM_H5,DirectSM_H7,SM_H7,DirectSM_H6,SM_H6,DirectSM_H4,SM_H4  ), funs(sum))
ppkdiff <- melt(pkdiff, id.vars="Category")
ggplot(ppkdiff, aes(variable, value,fill=Category)) +
geom_bar(position="stack", stat="identity")+
theme_minimal()+
scale_fill_brewer(palette="Oranges")+
facet_grid(Category~variable, scales="free", space="free_x")
